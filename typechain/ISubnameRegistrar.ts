/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ISubnameRegistrarInterface extends utils.Interface {
  functions: {
    "addNextPriceForCharLength(bytes32,uint256)": FunctionFragment;
    "available(bytes)": FunctionFragment;
    "commit(bytes32)": FunctionFragment;
    "getLastCharIndex(bytes32)": FunctionFragment;
    "getPriceDataForLength(bytes32,uint16)": FunctionFragment;
    "makeCommitment(bytes,address,bytes32)": FunctionFragment;
    "register(bytes,address,address,uint256,bytes32,address,uint32)": FunctionFragment;
    "rentPrice(bytes,uint256)": FunctionFragment;
    "setOfferSubnames(bytes32,bool)": FunctionFragment;
    "setParams(bytes,bool,address,uint64,uint64,uint16,uint16)": FunctionFragment;
    "setPricingForAllLengths(bytes32,uint256[])": FunctionFragment;
    "updatePriceForCharLength(bytes32,uint16,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addNextPriceForCharLength",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "available",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "commit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getLastCharIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataForLength",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCommitment",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rentPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferSubnames",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [
      BytesLike,
      boolean,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricingForAllLengths",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceForCharLength",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNextPriceForCharLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastCharIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataForLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rentPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOfferSubnames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricingForAllLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceForCharLength",
    data: BytesLike
  ): Result;

  events: {
    "NameRenewed(bytes,uint256,uint256)": EventFragment;
    "SubnameRegistered(bytes,bytes32,address,uint256,uint256)": EventFragment;
    "UnruggableRegistered(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnruggableRegistered"): EventFragment;
}

export type NameRenewedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { name: string; cost: BigNumber; expires: BigNumber }
>;

export type NameRenewedEventFilter = TypedEventFilter<NameRenewedEvent>;

export type SubnameRegisteredEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    name: string;
    node: string;
    owner: string;
    price: BigNumber;
    expires: BigNumber;
  }
>;

export type SubnameRegisteredEventFilter =
  TypedEventFilter<SubnameRegisteredEvent>;

export type UnruggableRegisteredEvent = TypedEvent<[string], { name: string }>;

export type UnruggableRegisteredEventFilter =
  TypedEventFilter<UnruggableRegisteredEvent>;

export interface ISubnameRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISubnameRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    available(
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commit(
      commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { weiPrice: BigNumber; usdPrice: BigNumber }
    >;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addNextPriceForCharLength(
    parentNode: BytesLike,
    charAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  available(
    name: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commit(
    commitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getLastCharIndex(
    parentNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceDataForLength(
    parentNode: BytesLike,
    charLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeCommitment(
    name: BytesLike,
    owner: string,
    secret: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  register(
    name: BytesLike,
    owner: string,
    referrer: string,
    duration: BigNumberish,
    secret: BytesLike,
    resolver: string,
    fuses: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentPrice(
    name: BytesLike,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { weiPrice: BigNumber; usdPrice: BigNumber }
  >;

  setOfferSubnames(
    parentNode: BytesLike,
    _offerSubnames: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParams(
    name: BytesLike,
    _offerSubnames: boolean,
    _renewalController: string,
    _minRegistrationDuration: BigNumberish,
    _maxRegistrationDuration: BigNumberish,
    _minChars: BigNumberish,
    _maxChars: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricingForAllLengths(
    parentNode: BytesLike,
    _charAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceForCharLength(
    parentNode: BytesLike,
    charLength: BigNumberish,
    charAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    available(name: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    commit(commitment: BytesLike, overrides?: CallOverrides): Promise<void>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { weiPrice: BigNumber; usdPrice: BigNumber }
    >;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NameRenewed(bytes,uint256,uint256)"(
      name?: BytesLike | null,
      cost?: null,
      expires?: null
    ): NameRenewedEventFilter;
    NameRenewed(
      name?: BytesLike | null,
      cost?: null,
      expires?: null
    ): NameRenewedEventFilter;

    "SubnameRegistered(bytes,bytes32,address,uint256,uint256)"(
      name?: null,
      node?: BytesLike | null,
      owner?: string | null,
      price?: null,
      expires?: null
    ): SubnameRegisteredEventFilter;
    SubnameRegistered(
      name?: null,
      node?: BytesLike | null,
      owner?: string | null,
      price?: null,
      expires?: null
    ): SubnameRegisteredEventFilter;

    "UnruggableRegistered(string)"(
      name?: null
    ): UnruggableRegisteredEventFilter;
    UnruggableRegistered(name?: null): UnruggableRegisteredEventFilter;
  };

  estimateGas: {
    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    available(
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commit(
      commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    available(
      name: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commit(
      commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
