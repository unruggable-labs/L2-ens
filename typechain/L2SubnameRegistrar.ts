/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface L2SubnameRegistrarInterface extends utils.Interface {
  functions: {
    "MIN_REGISTRATION_DURATION()": FunctionFragment;
    "addNextPriceForCharLength(bytes32,uint256)": FunctionFragment;
    "allowList(bytes32)": FunctionFragment;
    "allowListDisabled()": FunctionFragment;
    "allowName(bytes,bool)": FunctionFragment;
    "available(bytes)": FunctionFragment;
    "balances(address)": FunctionFragment;
    "commit(bytes32)": FunctionFragment;
    "commitments(bytes32)": FunctionFragment;
    "disableAllowList()": FunctionFragment;
    "ens()": FunctionFragment;
    "getLastCharIndex(bytes32)": FunctionFragment;
    "getPriceDataForLength(bytes32,uint16)": FunctionFragment;
    "makeCommitment(bytes,address,bytes32)": FunctionFragment;
    "maxCommitmentAge()": FunctionFragment;
    "minCommitmentAge()": FunctionFragment;
    "nameWrapper()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerCut()": FunctionFragment;
    "pricingData(bytes32)": FunctionFragment;
    "recoverFunds(address,address,uint256)": FunctionFragment;
    "referrerCuts(address)": FunctionFragment;
    "register(bytes,address,address,uint256,bytes32,address,uint32)": FunctionFragment;
    "registerRandomUnruggable(address,uint256,uint8,uint256)": FunctionFragment;
    "registerUnruggable(string,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rentPrice(bytes,uint256)": FunctionFragment;
    "setOfferSubnames(bytes32,bool)": FunctionFragment;
    "setOwnerCut(uint256)": FunctionFragment;
    "setParams(bytes,bool,address,uint64,uint64,uint16,uint16)": FunctionFragment;
    "setPricingForAllLengths(bytes32,uint256[])": FunctionFragment;
    "setReferrerCut(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalBalance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePriceForCharLength(bytes32,uint16,uint256)": FunctionFragment;
    "usdOracle()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_REGISTRATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNextPriceForCharLength",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowList",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowListDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowName",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "available",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(functionFragment: "commit", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableAllowList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLastCharIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceDataForLength",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCommitment",
    values: [BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxCommitmentAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCommitmentAge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nameWrapper",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "ownerCut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricingData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFunds",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referrerCuts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BytesLike,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRandomUnruggable",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUnruggable",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rentPrice",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferSubnames",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnerCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setParams",
    values: [
      BytesLike,
      boolean,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricingForAllLengths",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferrerCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceForCharLength",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "usdOracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_REGISTRATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNextPriceForCharLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowListDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "available", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "commit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastCharIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceDataForLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxCommitmentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCommitmentAge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nameWrapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerCuts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerRandomUnruggable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUnruggable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rentPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOfferSubnames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnerCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricingForAllLengths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferrerCut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceForCharLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdOracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddressWithdrew(address,uint256)": EventFragment;
    "NameRenewed(bytes,uint256,uint256)": EventFragment;
    "OwnerCutSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReferrerCutSet(uint256)": EventFragment;
    "SubnameRegistered(bytes,bytes32,address,uint256,uint256)": EventFragment;
    "UnruggableRegistered(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressWithdrew"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameRenewed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerCutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferrerCutSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubnameRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnruggableRegistered"): EventFragment;
}

export type AddressWithdrewEvent = TypedEvent<
  [string, BigNumber],
  { _address: string; amount: BigNumber }
>;

export type AddressWithdrewEventFilter = TypedEventFilter<AddressWithdrewEvent>;

export type NameRenewedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { name: string; cost: BigNumber; expires: BigNumber }
>;

export type NameRenewedEventFilter = TypedEventFilter<NameRenewedEvent>;

export type OwnerCutSetEvent = TypedEvent<[BigNumber], { ownerCut: BigNumber }>;

export type OwnerCutSetEventFilter = TypedEventFilter<OwnerCutSetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReferrerCutSetEvent = TypedEvent<
  [BigNumber],
  { referrerCut: BigNumber }
>;

export type ReferrerCutSetEventFilter = TypedEventFilter<ReferrerCutSetEvent>;

export type SubnameRegisteredEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    name: string;
    node: string;
    owner: string;
    price: BigNumber;
    expires: BigNumber;
  }
>;

export type SubnameRegisteredEventFilter =
  TypedEventFilter<SubnameRegisteredEvent>;

export type UnruggableRegisteredEvent = TypedEvent<[string], { name: string }>;

export type UnruggableRegisteredEventFilter =
  TypedEventFilter<UnruggableRegisteredEvent>;

export interface L2SubnameRegistrar extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2SubnameRegistrarInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowList(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    allowListDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    allowName(
      _name: BytesLike,
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    available(name: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    commit(
      commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    disableAllowList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    maxCommitmentAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    minCommitmentAge(overrides?: CallOverrides): Promise<[BigNumber]>;

    nameWrapper(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerCut(overrides?: CallOverrides): Promise<[BigNumber]>;

    pricingData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, number, number] & {
        offerSubnames: boolean;
        renewalController: string;
        minRegistrationDuration: BigNumber;
        maxRegistrationDuration: BigNumber;
        minChars: number;
        maxChars: number;
      }
    >;

    recoverFunds(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    referrerCuts(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerRandomUnruggable(
      owner: string,
      maxLoops: BigNumberish,
      numChars: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerUnruggable(
      label: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { weiPrice: BigNumber; usdPrice: BigNumber }
    >;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwnerCut(
      _ownerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setReferrerCut(
      _referrerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usdOracle(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  addNextPriceForCharLength(
    parentNode: BytesLike,
    charAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowList(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  allowListDisabled(overrides?: CallOverrides): Promise<boolean>;

  allowName(
    _name: BytesLike,
    _allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  available(name: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  commit(
    commitment: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  disableAllowList(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ens(overrides?: CallOverrides): Promise<string>;

  getLastCharIndex(
    parentNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceDataForLength(
    parentNode: BytesLike,
    charLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  makeCommitment(
    name: BytesLike,
    owner: string,
    secret: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  maxCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

  minCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

  nameWrapper(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

  pricingData(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, number, number] & {
      offerSubnames: boolean;
      renewalController: string;
      minRegistrationDuration: BigNumber;
      maxRegistrationDuration: BigNumber;
      minChars: number;
      maxChars: number;
    }
  >;

  recoverFunds(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  referrerCuts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  register(
    name: BytesLike,
    owner: string,
    referrer: string,
    duration: BigNumberish,
    secret: BytesLike,
    resolver: string,
    fuses: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerRandomUnruggable(
    owner: string,
    maxLoops: BigNumberish,
    numChars: BigNumberish,
    salt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerUnruggable(
    label: string,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rentPrice(
    name: BytesLike,
    duration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { weiPrice: BigNumber; usdPrice: BigNumber }
  >;

  setOfferSubnames(
    parentNode: BytesLike,
    _offerSubnames: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwnerCut(
    _ownerCut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParams(
    name: BytesLike,
    _offerSubnames: boolean,
    _renewalController: string,
    _minRegistrationDuration: BigNumberish,
    _maxRegistrationDuration: BigNumberish,
    _minChars: BigNumberish,
    _maxChars: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPricingForAllLengths(
    parentNode: BytesLike,
    _charAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setReferrerCut(
    _referrerCut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePriceForCharLength(
    parentNode: BytesLike,
    charLength: BigNumberish,
    charAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usdOracle(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowList(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    allowListDisabled(overrides?: CallOverrides): Promise<boolean>;

    allowName(
      _name: BytesLike,
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    available(name: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    commit(commitment: BytesLike, overrides?: CallOverrides): Promise<void>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    disableAllowList(overrides?: CallOverrides): Promise<void>;

    ens(overrides?: CallOverrides): Promise<string>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    maxCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

    minCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

    nameWrapper(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

    pricingData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, number, number] & {
        offerSubnames: boolean;
        renewalController: string;
        minRegistrationDuration: BigNumber;
        maxRegistrationDuration: BigNumber;
        minChars: number;
        maxChars: number;
      }
    >;

    recoverFunds(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    referrerCuts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRandomUnruggable(
      owner: string,
      maxLoops: BigNumberish,
      numChars: BigNumberish,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    registerUnruggable(
      label: string,
      owner: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { weiPrice: BigNumber; usdPrice: BigNumber }
    >;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwnerCut(
      _ownerCut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setReferrerCut(
      _referrerCut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    usdOracle(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddressWithdrew(address,uint256)"(
      _address?: string | null,
      amount?: BigNumberish | null
    ): AddressWithdrewEventFilter;
    AddressWithdrew(
      _address?: string | null,
      amount?: BigNumberish | null
    ): AddressWithdrewEventFilter;

    "NameRenewed(bytes,uint256,uint256)"(
      name?: BytesLike | null,
      cost?: null,
      expires?: null
    ): NameRenewedEventFilter;
    NameRenewed(
      name?: BytesLike | null,
      cost?: null,
      expires?: null
    ): NameRenewedEventFilter;

    "OwnerCutSet(uint256)"(
      ownerCut?: BigNumberish | null
    ): OwnerCutSetEventFilter;
    OwnerCutSet(ownerCut?: BigNumberish | null): OwnerCutSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ReferrerCutSet(uint256)"(
      referrerCut?: BigNumberish | null
    ): ReferrerCutSetEventFilter;
    ReferrerCutSet(
      referrerCut?: BigNumberish | null
    ): ReferrerCutSetEventFilter;

    "SubnameRegistered(bytes,bytes32,address,uint256,uint256)"(
      name?: null,
      node?: BytesLike | null,
      owner?: string | null,
      price?: null,
      expires?: null
    ): SubnameRegisteredEventFilter;
    SubnameRegistered(
      name?: null,
      node?: BytesLike | null,
      owner?: string | null,
      price?: null,
      expires?: null
    ): SubnameRegisteredEventFilter;

    "UnruggableRegistered(string)"(
      name?: null
    ): UnruggableRegisteredEventFilter;
    UnruggableRegistered(name?: null): UnruggableRegisteredEventFilter;
  };

  estimateGas: {
    MIN_REGISTRATION_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowList(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    allowListDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    allowName(
      _name: BytesLike,
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    available(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    commit(
      commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    disableAllowList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

    minCommitmentAge(overrides?: CallOverrides): Promise<BigNumber>;

    nameWrapper(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerCut(overrides?: CallOverrides): Promise<BigNumber>;

    pricingData(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    recoverFunds(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    referrerCuts(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerRandomUnruggable(
      owner: string,
      maxLoops: BigNumberish,
      numChars: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerUnruggable(
      label: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwnerCut(
      _ownerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setReferrerCut(
      _referrerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usdOracle(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_REGISTRATION_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addNextPriceForCharLength(
      parentNode: BytesLike,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowList(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowListDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowName(
      _name: BytesLike,
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    available(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commit(
      commitment: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableAllowList(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastCharIndex(
      parentNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceDataForLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeCommitment(
      name: BytesLike,
      owner: string,
      secret: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxCommitmentAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minCommitmentAge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nameWrapper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricingData(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverFunds(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    referrerCuts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      name: BytesLike,
      owner: string,
      referrer: string,
      duration: BigNumberish,
      secret: BytesLike,
      resolver: string,
      fuses: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerRandomUnruggable(
      owner: string,
      maxLoops: BigNumberish,
      numChars: BigNumberish,
      salt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerUnruggable(
      label: string,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rentPrice(
      name: BytesLike,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOfferSubnames(
      parentNode: BytesLike,
      _offerSubnames: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwnerCut(
      _ownerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParams(
      name: BytesLike,
      _offerSubnames: boolean,
      _renewalController: string,
      _minRegistrationDuration: BigNumberish,
      _maxRegistrationDuration: BigNumberish,
      _minChars: BigNumberish,
      _maxChars: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPricingForAllLengths(
      parentNode: BytesLike,
      _charAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setReferrerCut(
      _referrerCut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePriceForCharLength(
      parentNode: BytesLike,
      charLength: BigNumberish,
      charAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usdOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
