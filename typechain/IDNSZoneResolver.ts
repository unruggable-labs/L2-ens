/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IDNSZoneResolverInterface extends utils.Interface {
  functions: {
    "zonehash(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "zonehash", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "zonehash", data: BytesLike): Result;

  events: {
    "DNSZonehashChanged(bytes32,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DNSZonehashChanged"): EventFragment;
}

export type DNSZonehashChangedEvent = TypedEvent<
  [string, string, string],
  { node: string; lastzonehash: string; zonehash: string }
>;

export type DNSZonehashChangedEventFilter =
  TypedEventFilter<DNSZonehashChangedEvent>;

export interface IDNSZoneResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDNSZoneResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    zonehash(node: BytesLike, overrides?: CallOverrides): Promise<[string]>;
  };

  zonehash(node: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    zonehash(node: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DNSZonehashChanged(bytes32,bytes,bytes)"(
      node?: BytesLike | null,
      lastzonehash?: null,
      zonehash?: null
    ): DNSZonehashChangedEventFilter;
    DNSZonehashChanged(
      node?: BytesLike | null,
      lastzonehash?: null,
      zonehash?: null
    ): DNSZonehashChangedEventFilter;
  };

  estimateGas: {
    zonehash(node: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    zonehash(
      node: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
