/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface L2UpgradedNameWrapperMockInterface extends utils.Interface {
  functions: {
    "ens()": FunctionFragment;
    "wrapFromUpgrade(bytes,address,uint32,uint64,address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrapFromUpgrade",
    values: [BytesLike, string, BigNumberish, BigNumberish, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapFromUpgrade",
    data: BytesLike
  ): Result;

  events: {
    "NameUpgraded(bytes,address,uint32,uint64,address,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameUpgraded"): EventFragment;
}

export type NameUpgradedEvent = TypedEvent<
  [string, string, number, BigNumber, string, string],
  {
    name: string;
    wrappedOwner: string;
    fuses: number;
    expiry: BigNumber;
    approved: string;
    extraData: string;
  }
>;

export type NameUpgradedEventFilter = TypedEventFilter<NameUpgradedEvent>;

export interface L2UpgradedNameWrapperMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L2UpgradedNameWrapperMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ens(overrides?: CallOverrides): Promise<[string]>;

    wrapFromUpgrade(
      name: BytesLike,
      wrappedOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      approved: string,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ens(overrides?: CallOverrides): Promise<string>;

  wrapFromUpgrade(
    name: BytesLike,
    wrappedOwner: string,
    fuses: BigNumberish,
    expiry: BigNumberish,
    approved: string,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ens(overrides?: CallOverrides): Promise<string>;

    wrapFromUpgrade(
      name: BytesLike,
      wrappedOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      approved: string,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NameUpgraded(bytes,address,uint32,uint64,address,bytes)"(
      name?: BytesLike | null,
      wrappedOwner?: string | null,
      fuses?: BigNumberish | null,
      expiry?: null,
      approved?: null,
      extraData?: null
    ): NameUpgradedEventFilter;
    NameUpgraded(
      name?: BytesLike | null,
      wrappedOwner?: string | null,
      fuses?: BigNumberish | null,
      expiry?: null,
      approved?: null,
      extraData?: null
    ): NameUpgradedEventFilter;
  };

  estimateGas: {
    ens(overrides?: CallOverrides): Promise<BigNumber>;

    wrapFromUpgrade(
      name: BytesLike,
      wrappedOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      approved: string,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrapFromUpgrade(
      name: BytesLike,
      wrappedOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      approved: string,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
