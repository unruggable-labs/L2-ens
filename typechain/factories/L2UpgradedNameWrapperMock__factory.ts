/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  L2UpgradedNameWrapperMock,
  L2UpgradedNameWrapperMockInterface,
} from "../L2UpgradedNameWrapperMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ENS",
        name: "_ens",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        indexed: true,
        internalType: "address",
        name: "wrappedOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint32",
        name: "fuses",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "NameUpgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "ens",
    outputs: [
      {
        internalType: "contract ENS",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "wrappedOwner",
        type: "address",
      },
      {
        internalType: "uint32",
        name: "fuses",
        type: "uint32",
      },
      {
        internalType: "uint64",
        name: "expiry",
        type: "uint64",
      },
      {
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "wrapFromUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161077c38038061077c83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516106e461009860003960008181604001528181610175015261022001526106e46000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633f15457f1461003b5780639198c2761461007e575b600080fd5b6100627f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b61009161008c36600461050a565b610093565b005b6000806100da60008b8b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506102f99050565b915091506000610123828c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506103b59050565b604080516020808201849052818301879052825180830384018152606090920190925280519101209091506000906040516302571be360e01b8152600481018290529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156101bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e091906105d7565b90506001600160a01b03811630146101f757600080fd5b60405163cf40882360e01b815260048101839052306024820181905260448201526064808201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cf40882390608401600060405180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b505050508963ffffffff168b6001600160a01b03168e8e6040516102a59291906105fb565b60405180910390207f6e636de646f102095de8bb2bf86c20097becf93303a00c722607805b6bc6e2458c8c8c8c6040516102e2949392919061060b565b60405180910390a450505050505050505050505050565b600080835183106103515760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064015b60405180910390fd5b60008484815181106103655761036561065c565b016020015160f81c905080156103915761038a85610384866001610688565b83610475565b9250610396565b600092505b6103a08185610688565b6103ab906001610688565b9150509250929050565b60008060006103c485856102f9565b90925090508161043657600185516103dc919061069b565b841461042a5760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d650000006044820152606401610348565b506000915061046f9050565b61044085826103b5565b604080516020810192909252810183905260600160405160208183030381529060405280519060200120925050505b92915050565b82516000906104848385610688565b111561048f57600080fd5b5091016020012090565b60008083601f8401126104ab57600080fd5b50813567ffffffffffffffff8111156104c357600080fd5b6020830191508360208285010111156104db57600080fd5b9250929050565b6001600160a01b03811681146104f757600080fd5b50565b8035610505816104e2565b919050565b60008060008060008060008060c0898b03121561052657600080fd5b883567ffffffffffffffff8082111561053e57600080fd5b61054a8c838d01610499565b909a50985060208b0135915061055f826104e2565b90965060408a01359063ffffffff8216821461057a57600080fd5b90955060608a013590808216821461059157600080fd5b8195506105a060808c016104fa565b945060a08b01359150808211156105b657600080fd5b506105c38b828c01610499565b999c989b5096995094979396929594505050565b6000602082840312156105e957600080fd5b81516105f4816104e2565b9392505050565b8183823760009101908152919050565b67ffffffffffffffff851681526001600160a01b03841660208201526060604082018190528101829052818360808301376000818301608090810191909152601f909201601f191601019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561046f5761046f610672565b8181038181111561046f5761046f61067256fea26469706673582212202d33b9442ab619f1dc684398fdb1702469feccd46a66a71aad79ac480818581764736f6c63430008130033";

type L2UpgradedNameWrapperMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L2UpgradedNameWrapperMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L2UpgradedNameWrapperMock__factory extends ContractFactory {
  constructor(...args: L2UpgradedNameWrapperMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _ens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<L2UpgradedNameWrapperMock> {
    return super.deploy(
      _ens,
      overrides || {}
    ) as Promise<L2UpgradedNameWrapperMock>;
  }
  getDeployTransaction(
    _ens: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_ens, overrides || {});
  }
  attach(address: string): L2UpgradedNameWrapperMock {
    return super.attach(address) as L2UpgradedNameWrapperMock;
  }
  connect(signer: Signer): L2UpgradedNameWrapperMock__factory {
    return super.connect(signer) as L2UpgradedNameWrapperMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L2UpgradedNameWrapperMockInterface {
    return new utils.Interface(_abi) as L2UpgradedNameWrapperMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L2UpgradedNameWrapperMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as L2UpgradedNameWrapperMock;
  }
}
