/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface INameWrapperInterface extends utils.Interface {
  functions: {
    "allFusesBurned(bytes32,uint32)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "canModifyName(bytes32,address)": FunctionFragment;
    "ens()": FunctionFragment;
    "extendExpiry(bytes32,bytes32,uint64)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getData(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "isWrapped(bytes32,bytes32)": FunctionFragment;
    "metadataService()": FunctionFragment;
    "name()": FunctionFragment;
    "names(bytes32)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "registerAndWrapETH2LD(string,address,uint256,address,uint16)": FunctionFragment;
    "registrar()": FunctionFragment;
    "renew(uint256,uint256)": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setChildFuses(bytes32,bytes32,uint32,uint64)": FunctionFragment;
    "setFuses(bytes32,uint16)": FunctionFragment;
    "setMetadataService(address)": FunctionFragment;
    "setRecord(bytes32,address,address,uint64)": FunctionFragment;
    "setResolver(bytes32,address)": FunctionFragment;
    "setSubnodeOwner(bytes32,string,address,uint32,uint64)": FunctionFragment;
    "setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)": FunctionFragment;
    "setTTL(bytes32,uint64)": FunctionFragment;
    "setUpgradeContract(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unwrap(bytes32,bytes32,address)": FunctionFragment;
    "unwrapETH2LD(bytes32,address,address)": FunctionFragment;
    "upgrade(bytes,bytes)": FunctionFragment;
    "upgradeContract()": FunctionFragment;
    "uri(uint256)": FunctionFragment;
    "wrap(bytes,address,address)": FunctionFragment;
    "wrapETH2LD(string,address,uint16,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allFusesBurned",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canModifyName",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extendExpiry",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWrapped",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataService",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "names", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAndWrapETH2LD",
    values: [string, string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registrar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renew",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setChildFuses",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFuses",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataService",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [BytesLike, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setResolver",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnodeOwner",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSubnodeRecord",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTTL",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpgradeContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrap",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unwrapETH2LD",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "wrapETH2LD",
    values: [string, string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "allFusesBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canModifyName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extendExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isWrapped", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metadataService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "names", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAndWrapETH2LD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registrar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renew", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChildFuses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFuses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSubnodeRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTTL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUpgradeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapETH2LD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrapETH2LD", data: BytesLike): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ExpiryExtended(bytes32,uint64)": EventFragment;
    "FusesSet(bytes32,uint32)": EventFragment;
    "NameUnwrapped(bytes32,address)": EventFragment;
    "NameWrapped(bytes32,bytes,address,uint32,uint64)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
    "URI(string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiryExtended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FusesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameUnwrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameWrapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "URI"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { account: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type ExpiryExtendedEvent = TypedEvent<
  [string, BigNumber],
  { node: string; expiry: BigNumber }
>;

export type ExpiryExtendedEventFilter = TypedEventFilter<ExpiryExtendedEvent>;

export type FusesSetEvent = TypedEvent<
  [string, number],
  { node: string; fuses: number }
>;

export type FusesSetEventFilter = TypedEventFilter<FusesSetEvent>;

export type NameUnwrappedEvent = TypedEvent<
  [string, string],
  { node: string; owner: string }
>;

export type NameUnwrappedEventFilter = TypedEventFilter<NameUnwrappedEvent>;

export type NameWrappedEvent = TypedEvent<
  [string, string, string, number, BigNumber],
  {
    node: string;
    name: string;
    owner: string;
    fuses: number;
    expiry: BigNumber;
  }
>;

export type NameWrappedEventFilter = TypedEventFilter<NameWrappedEvent>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]],
  {
    operator: string;
    from: string;
    to: string;
    ids: BigNumber[];
    values: BigNumber[];
  }
>;

export type TransferBatchEventFilter = TypedEventFilter<TransferBatchEvent>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  {
    operator: string;
    from: string;
    to: string;
    id: BigNumber;
    value: BigNumber;
  }
>;

export type TransferSingleEventFilter = TypedEventFilter<TransferSingleEvent>;

export type URIEvent = TypedEvent<
  [string, BigNumber],
  { value: string; id: BigNumber }
>;

export type URIEventFilter = TypedEventFilter<URIEvent>;

export interface INameWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INameWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allFusesBurned(
      node: BytesLike,
      fuseMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    canModifyName(
      node: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    extendExpiry(
      node: BytesLike,
      labelhash: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWrapped(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWrapped(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    metadataService(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    names(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    registerAndWrapETH2LD(
      label: string,
      wrappedOwner: string,
      duration: BigNumberish,
      resolver: string,
      ownerControlledFuses: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registrar(overrides?: CallOverrides): Promise<[string]>;

    renew(
      labelHash: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChildFuses(
      parentNode: BytesLike,
      labelhash: BytesLike,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFuses(
      node: BytesLike,
      ownerControlledFuses: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMetadataService(
      _metadataService: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRecord(
      node: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setResolver(
      node: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSubnodeOwner(
      node: BytesLike,
      label: string,
      newOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSubnodeRecord(
      node: BytesLike,
      label: string,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTTL(
      node: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpgradeContract(
      _upgradeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unwrap(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapETH2LD(
      label: BytesLike,
      newRegistrant: string,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      name: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeContract(overrides?: CallOverrides): Promise<[string]>;

    uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    wrap(
      name: BytesLike,
      wrappedOwner: string,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapETH2LD(
      label: string,
      wrappedOwner: string,
      ownerControlledFuses: BigNumberish,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allFusesBurned(
    node: BytesLike,
    fuseMask: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    account: string,
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    accounts: string[],
    ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  canModifyName(
    node: BytesLike,
    addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ens(overrides?: CallOverrides): Promise<string>;

  extendExpiry(
    node: BytesLike,
    labelhash: BytesLike,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getData(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, number, BigNumber]>;

  isApprovedForAll(
    account: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWrapped(bytes32,bytes32)"(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isWrapped(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  metadataService(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  names(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  registerAndWrapETH2LD(
    label: string,
    wrappedOwner: string,
    duration: BigNumberish,
    resolver: string,
    ownerControlledFuses: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registrar(overrides?: CallOverrides): Promise<string>;

  renew(
    labelHash: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeBatchTransferFrom(
    from: string,
    to: string,
    ids: BigNumberish[],
    amounts: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    from: string,
    to: string,
    id: BigNumberish,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChildFuses(
    parentNode: BytesLike,
    labelhash: BytesLike,
    fuses: BigNumberish,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFuses(
    node: BytesLike,
    ownerControlledFuses: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMetadataService(
    _metadataService: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRecord(
    node: BytesLike,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setResolver(
    node: BytesLike,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSubnodeOwner(
    node: BytesLike,
    label: string,
    newOwner: string,
    fuses: BigNumberish,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSubnodeRecord(
    node: BytesLike,
    label: string,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    fuses: BigNumberish,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTTL(
    node: BytesLike,
    ttl: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpgradeContract(
    _upgradeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unwrap(
    node: BytesLike,
    label: BytesLike,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapETH2LD(
    label: BytesLike,
    newRegistrant: string,
    newController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    name: BytesLike,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeContract(overrides?: CallOverrides): Promise<string>;

  uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  wrap(
    name: BytesLike,
    wrappedOwner: string,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapETH2LD(
    label: string,
    wrappedOwner: string,
    ownerControlledFuses: BigNumberish,
    resolver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allFusesBurned(
      node: BytesLike,
      fuseMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    canModifyName(
      node: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ens(overrides?: CallOverrides): Promise<string>;

    extendExpiry(
      node: BytesLike,
      labelhash: BytesLike,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber]>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWrapped(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isWrapped(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    metadataService(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    names(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    registerAndWrapETH2LD(
      label: string,
      wrappedOwner: string,
      duration: BigNumberish,
      resolver: string,
      ownerControlledFuses: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<string>;

    renew(
      labelHash: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setChildFuses(
      parentNode: BytesLike,
      labelhash: BytesLike,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFuses(
      node: BytesLike,
      ownerControlledFuses: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    setMetadataService(
      _metadataService: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecord(
      node: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setResolver(
      node: BytesLike,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSubnodeOwner(
      node: BytesLike,
      label: string,
      newOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setSubnodeRecord(
      node: BytesLike,
      label: string,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setTTL(
      node: BytesLike,
      ttl: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpgradeContract(
      _upgradeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unwrap(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unwrapETH2LD(
      label: BytesLike,
      newRegistrant: string,
      newController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      name: BytesLike,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeContract(overrides?: CallOverrides): Promise<string>;

    uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    wrap(
      name: BytesLike,
      wrappedOwner: string,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    wrapETH2LD(
      label: string,
      wrappedOwner: string,
      ownerControlledFuses: BigNumberish,
      resolver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      account?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ExpiryExtended(bytes32,uint64)"(
      node?: BytesLike | null,
      expiry?: null
    ): ExpiryExtendedEventFilter;
    ExpiryExtended(
      node?: BytesLike | null,
      expiry?: null
    ): ExpiryExtendedEventFilter;

    "FusesSet(bytes32,uint32)"(
      node?: BytesLike | null,
      fuses?: null
    ): FusesSetEventFilter;
    FusesSet(node?: BytesLike | null, fuses?: null): FusesSetEventFilter;

    "NameUnwrapped(bytes32,address)"(
      node?: BytesLike | null,
      owner?: null
    ): NameUnwrappedEventFilter;
    NameUnwrapped(
      node?: BytesLike | null,
      owner?: null
    ): NameUnwrappedEventFilter;

    "NameWrapped(bytes32,bytes,address,uint32,uint64)"(
      node?: BytesLike | null,
      name?: null,
      owner?: null,
      fuses?: null,
      expiry?: null
    ): NameWrappedEventFilter;
    NameWrapped(
      node?: BytesLike | null,
      name?: null,
      owner?: null,
      fuses?: null,
      expiry?: null
    ): NameWrappedEventFilter;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;
    TransferBatch(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      values?: null
    ): TransferBatchEventFilter;

    "TransferSingle(address,address,address,uint256,uint256)"(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;
    TransferSingle(
      operator?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      value?: null
    ): TransferSingleEventFilter;

    "URI(string,uint256)"(
      value?: null,
      id?: BigNumberish | null
    ): URIEventFilter;
    URI(value?: null, id?: BigNumberish | null): URIEventFilter;
  };

  estimateGas: {
    allFusesBurned(
      node: BytesLike,
      fuseMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canModifyName(
      node: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    extendExpiry(
      node: BytesLike,
      labelhash: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getData(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWrapped(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWrapped(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    metadataService(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    names(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerAndWrapETH2LD(
      label: string,
      wrappedOwner: string,
      duration: BigNumberish,
      resolver: string,
      ownerControlledFuses: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registrar(overrides?: CallOverrides): Promise<BigNumber>;

    renew(
      labelHash: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChildFuses(
      parentNode: BytesLike,
      labelhash: BytesLike,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFuses(
      node: BytesLike,
      ownerControlledFuses: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMetadataService(
      _metadataService: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRecord(
      node: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setResolver(
      node: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSubnodeOwner(
      node: BytesLike,
      label: string,
      newOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSubnodeRecord(
      node: BytesLike,
      label: string,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTTL(
      node: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpgradeContract(
      _upgradeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unwrap(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapETH2LD(
      label: BytesLike,
      newRegistrant: string,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgrade(
      name: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeContract(overrides?: CallOverrides): Promise<BigNumber>;

    uri(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    wrap(
      name: BytesLike,
      wrappedOwner: string,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapETH2LD(
      label: string,
      wrappedOwner: string,
      ownerControlledFuses: BigNumberish,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allFusesBurned(
      node: BytesLike,
      fuseMask: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      accounts: string[],
      ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canModifyName(
      node: BytesLike,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extendExpiry(
      node: BytesLike,
      labelhash: BytesLike,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getData(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWrapped(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWrapped(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    metadataService(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    names(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerAndWrapETH2LD(
      label: string,
      wrappedOwner: string,
      duration: BigNumberish,
      resolver: string,
      ownerControlledFuses: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registrar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renew(
      labelHash: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      from: string,
      to: string,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      from: string,
      to: string,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChildFuses(
      parentNode: BytesLike,
      labelhash: BytesLike,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFuses(
      node: BytesLike,
      ownerControlledFuses: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataService(
      _metadataService: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRecord(
      node: BytesLike,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setResolver(
      node: BytesLike,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSubnodeOwner(
      node: BytesLike,
      label: string,
      newOwner: string,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSubnodeRecord(
      node: BytesLike,
      label: string,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      fuses: BigNumberish,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTTL(
      node: BytesLike,
      ttl: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpgradeContract(
      _upgradeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unwrap(
      node: BytesLike,
      label: BytesLike,
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapETH2LD(
      label: BytesLike,
      newRegistrant: string,
      newController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      name: BytesLike,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uri(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    wrap(
      name: BytesLike,
      wrappedOwner: string,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapETH2LD(
      label: string,
      wrappedOwner: string,
      ownerControlledFuses: BigNumberish,
      resolver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
