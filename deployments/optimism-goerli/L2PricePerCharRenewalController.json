{
  "address": "0x46Abb10E2A30F16DFFB7702b99F6BDd42fE6f471",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract INameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "contract IAggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSetNewCharLengthAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "UnauthorizedAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddressWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256[]",
          "name": "charAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "CharPricesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "NameRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "NameWrapperVersionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ownerCut",
          "type": "uint256"
        }
      ],
      "name": "OwnerCutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceForCharLengthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "referrerCut",
          "type": "uint256"
        }
      ],
      "name": "ReferrerCutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SubnameWrapperVersionUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract INameWrapperUpgrade",
          "name": "_nameWrapper",
          "type": "address"
        }
      ],
      "name": "addNextNameWrapperVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addNextPriceForCharLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "charAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastCharIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nameWrappers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerCuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "renew",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nameWrapperV",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "renewWithVersions",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "rentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ownerCut",
          "type": "uint256"
        }
      ],
      "name": "setOwnerCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_charAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "setPricingForAllLengths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_referrerCut",
          "type": "uint256"
        }
      ],
      "name": "setReferrerCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "charLength",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "charAmount",
          "type": "uint256"
        }
      ],
      "name": "updatePriceForCharLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract IAggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaa66e01ad5b0e90e5c4848e16c6f01e929a6faccb5d29684c7918a0f524b4269",
  "receipt": {
    "to": null,
    "from": "0xFC04D70bea992Da2C67995BbddC3500767394513",
    "contractAddress": "0x46Abb10E2A30F16DFFB7702b99F6BDd42fE6f471",
    "transactionIndex": 1,
    "gasUsed": "1826269",
    "logsBloom": "0x
    "blockHash": "0x7d639cc1ecf9de0b00677a1bcbf96e26f7f2735e1ea43291371a45e720835c47",
    "transactionHash": "0xaa66e01ad5b0e90e5c4848e16c6f01e929a6faccb5d29684c7918a0f524b4269",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13988226,
        "transactionHash": "0xaa66e01ad5b0e90e5c4848e16c6f01e929a6faccb5d29684c7918a0f524b4269",
        "address": "0x46Abb10E2A30F16DFFB7702b99F6BDd42fE6f471",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc04d70bea992da2c67995bbddc3500767394513"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7d639cc1ecf9de0b00677a1bcbf96e26f7f2735e1ea43291371a45e720835c47"
      }
    ],
    "blockNumber": 13988226,
    "cumulativeGasUsed": "1873134",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x690c1680b0843Ea9Bdb04cA5f9239A92d9dEb493",
    "0x1CF25555Eb74b587b4b3d9019d6Bf279E9920d25"
  ],
  "numDeployments": 1,
  "solcInputHash": "b86e30d631bb1ffefb1acbd2076dc5cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract INameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IAggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSetNewCharLengthAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"UnauthorizedAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddressWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"charAmounts\",\"type\":\"uint256[]\"}],\"name\":\"CharPricesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NameWrapperVersionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ownerCut\",\"type\":\"uint256\"}],\"name\":\"OwnerCutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceForCharLengthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrerCut\",\"type\":\"uint256\"}],\"name\":\"ReferrerCutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SubnameWrapperVersionUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"_nameWrapper\",\"type\":\"address\"}],\"name\":\"addNextNameWrapperVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addNextPriceForCharLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"charAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastCharIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameWrappers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerCuts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nameWrapperV\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewWithVersions\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_charAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setPricingForAllLengths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerCut\",\"type\":\"uint256\"}],\"name\":\"setReferrerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"charLength\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"charAmount\",\"type\":\"uint256\"}],\"name\":\"updatePriceForCharLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract IAggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addNextNameWrapperVersion(address)\":{\"params\":{\"_nameWrapper\":\"The next version of the NameWrapper\"}},\"addNextPriceForCharLength(uint256)\":{\"params\":{\"amount\":\"The amount in USD/sec. (with 18 digits of precision)  for a character count, e.g. amount for three characters.\"}},\"getLastCharIndex()\":{\"returns\":{\"_0\":\"The length of the last character length that was set.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverFunds(address,address,uint256)\":{\"details\":\"The contract is Ownable and only the owner can call the recover function.\",\"params\":{\"_amount\":\"The amount of tokens to recover.\",\"_to\":\"The address to send the tokens to.\",\"_token\":\"The address of the ERC20 token to recover\"}},\"renew(bytes,address,uint256)\":{\"details\":\"Function to renew a name for a specified duration. \",\"params\":{\"duration\":\"The duration for which the name should be renewed in years.\",\"name\":\"The name to be renewed in DNS format.\"}},\"renewWithVersions(uint256,bytes,address,uint256)\":{\"details\":\"This function is allows for the upgradeing of the NameWrapper and SubnameWrapper contracts. It is not possible to know what the interface of the upgarded contracts will be, so we assume that they will be compatible with the current version of the contracts.\",\"params\":{\"duration\":\"The duration for which the name should be renewed in years.\",\"name\":\"The name to be renewed in DNS format.\",\"nameWrapperV\":\"The version of the NameWrapper.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rentPrice(bytes,uint256)\":{\"params\":{\"duration\":\"The amount of time the name will be rented for/extended in years. \",\"name\":\"The name in DNS format, e.g. vault.vitalik.eth\"},\"returns\":{\"_0\":\"The rent price for the duration in Wei, and USD. \"}},\"setOwnerCut(uint256)\":{\"params\":{\"_ownerCut\":\"The cut for the owner of the contract.\"}},\"setPricingForAllLengths(uint256[])\":{\"params\":{\"_charAmounts\":\"An array of amounst for each characer length.\"}},\"setReferrerCut(uint256)\":{\"params\":{\"_referrerCut\":\"The percentage cut given to the referrer (0-10%).\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID`\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOracle(address)\":{\"params\":{\"_usdOracle\":\"The oracle address.\"}},\"updatePriceForCharLength(uint16,uint256)\":{\"params\":{\"charAmount\":\"The amount in USD/year for a character count, e.g. amount for three characters.\",\"charLength\":\"The character length, e.g. 3 would be for three characters. Use 0 for the default amount.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNextNameWrapperVersion(address)\":{\"notice\":\"If the NameWrapper smart contract is upgraded, add the new version.\"},\"addNextPriceForCharLength(uint256)\":{\"notice\":\"Adds a price for the next character length, e.g. three characters.\"},\"getLastCharIndex()\":{\"notice\":\"Get the last length for a character length that has a price (can be 0), e.g. three characters.\"},\"recoverFunds(address,address,uint256)\":{\"notice\":\"Recover ERC20 tokens sent to the contract by mistake.\"},\"renewWithVersions(uint256,bytes,address,uint256)\":{\"notice\":\"Function to renew a name for a specified duration. \"},\"rentPrice(bytes,uint256)\":{\"notice\":\"Gets the total cost of rent in wei, from the unitPrice, i.e. USD, and duration.\"},\"setOwnerCut(uint256)\":{\"notice\":\"A function to set the cut for the owner of the contract.\"},\"setPricingForAllLengths(uint256[])\":{\"notice\":\"Set the pricing for subname lengths.\"},\"setReferrerCut(uint256)\":{\"notice\":\"A function to set the referrer cut percentage for a specific referrer.\"},\"updateOracle(address)\":{\"notice\":\"Sets the oracle address.\"},\"updatePriceForCharLength(uint16,uint256)\":{\"notice\":\"Set a price for a single character length, e.g. three characters.\"},\"withdraw()\":{\"notice\":\"A function to allow referrers, name owners, or the contract owner to withdraw.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol\":\"L2PricePerCharRenewalController\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":buffer/=lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":optimism/=contracts/layertwo/optimism/\",\":unruggable-protocol/=lib/unruggable-protocol/\",\":xap-contracts/=lib/xap/contracts/\"]},\"sources\":{\"contracts/layertwo/optimism/wrapper/Balances.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\n\\nabstract contract Balances is Ownable {\\n\\n    using Address for address payable;\\n\\n    event OwnerCutSet(uint256 indexed ownerCut);\\n    event ReferrerCutSet(uint256 indexed referrerCut);\\n    event AddressWithdrew(address indexed _address, uint256 indexed amount);\\n\\n    // A mapping to store the balance of each referrer.\\n    mapping (address => uint256) public balances;\\n\\n    // A mapping to store the referrer cut percentage for each referrer.\\n    mapping (address => uint256) public referrerCuts;\\n\\n    // A variable to store the total balance of all referrers.\\n    uint256 public totalBalance;\\n\\n    // The cut taken by the owner of the contract.\\n    uint256 public ownerCut;\\n\\n    constructor() {\\n        // Default cut is 2% (200/10000).\\n        ownerCut = 200;  \\n    }\\n        \\n    /**\\n     * @notice A function to allow referrers, name owners, or the contract owner to withdraw.\\n     */\\n\\n    function withdraw() public {\\n\\n        //get the address of the sender\\n        address payable sender = payable(msg.sender);\\n        \\n        // Withdraw the owner's balance if the sender is the contract owner.\\n        if(sender == owner()) { \\n\\n            // Calculate the amount that can be withdrawn.\\n            uint256 ownerAmount = address(this).balance - totalBalance;\\n\\n            require(ownerAmount > 0, \\\"Owner balance is 0\\\");\\n            \\n            emit AddressWithdrew(sender, ownerAmount);\\n\\n            // Send the amount to the contract owner's address.\\n            sender.sendValue(ownerAmount);\\n\\n        } else { \\n\\n            // Require that the senders balance is greater than 0.\\n            require(balances[sender] > 0, \\\"Address's balance is 0\\\");\\n\\n            // Calculate the amount that the sender can withdraw\\n            uint256 amount = balances[sender];\\n\\n            // Set the sender balance to 0.\\n            balances[sender] = 0;\\n\\n            // Decrease the total referrer balance.\\n            totalBalance -= amount;\\n\\n            emit AddressWithdrew(sender, amount);\\n\\n            // Send the amount to the address.\\n            sender.sendValue(amount);\\n        }\\n    }\\n\\n    /**\\n    * @notice A function to set the cut for the owner of the contract.\\n    * @param _ownerCut The cut for the owner of the contract.\\n    */\\n\\n    function setOwnerCut(uint256 _ownerCut) public {\\n        require(msg.sender == owner(), \\\"Only the owner can set the cut\\\");\\n        require(_ownerCut <= 500, \\\"Owner cut cannot be more than 5%\\\");\\n        ownerCut = _ownerCut;\\n        emit OwnerCutSet(_ownerCut);\\n    }\\n\\n    /**\\n     * @notice A function to set the referrer cut percentage for a specific referrer.\\n     * @param _referrerCut The percentage cut given to the referrer (0-10%).\\n     */\\n\\n    function setReferrerCut(uint _referrerCut) public {\\n        require(_referrerCut <= 1000, \\\"Referrer cut cannot be more than 10%\\\");\\n        referrerCuts[msg.sender] = _referrerCut;\\n        emit ReferrerCutSet(_referrerCut);\\n    } \\n}\",\"keccak256\":\"0xca44837231ac89c333241f532cf4836a1100277bbd037a9b684441275ed86abc\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/BytesUtilsSub.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BytesUtilsSub {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(bytes memory self, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (bytes32 labelhash, uint256 newIdx)\\n    {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n\\n    /**\\n     * @dev This function takes a bytes input which represents the DNS name and\\n     * returns the first label of a domain name in DNS format.\\n     * @param domain The domain in DNS format wherein the length precedes each label\\n     * and is terminted with a 0x0 byte, e.g. \\\"cb.id\\\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].\\n     * @return string memory the first label.\\n     */\\n\\n    function getFirstLabel(bytes memory domain) internal pure returns (string memory, uint256) {\\n\\n        // Get the first byte of the domain which represents the length of the first label\\n        uint256 labelLength = uint256(uint8(domain[0]));\\n\\n        // Check to make sure the label length is less than the domain length and greater than zero. \\n        require(labelLength < domain.length && labelLength > 0);\\n\\n        // Create a new byte array to hold the first label\\n        bytes memory firstLabel = new bytes(labelLength);\\n\\n        // Iterate through the domain bytes to copy the first label to the new byte array\\n        // skipping the first byte which represents the length of the first label.\\n        for (uint256 i = 0; i < labelLength; ++i) {\\n            firstLabel[i] = domain[i+1];\\n        }\\n\\n        // Convert the first label to string and return, with the length of the first label.\\n        return (string(firstLabel), labelLength);\\n    }\\n\\n    /**\\n     * @dev This function takes a bytes input which represents the DNS name and\\n     * returns the TLD (last label) of a domain name. A domain can have a maximum of 10 labels.\\n     * @param domain bytes memory.\\n     * @return string memory the TLD.\\n     */\\n\\n    function getTLD(bytes memory domain) internal pure returns (string memory) {\\n        // Variable used to keep track of the level count.\\n\\n        uint levels = 0;\\n        // Variable used to keep track of the index of each length byte.\\n\\n        // Iterate through the domain bytes. \\n        for (uint i = 0; i < domain.length; i++) {\\n\\n            // If level count exceed 10, break the loop.\\n            if (levels > 10) {\\n                break;\\n            }\\n\\n            // Get the label length from the current byte.\\n            uint labelLength = uint(uint8(domain[i]));\\n\\n            // Check to make sure we have found the terminal byte and it is equal to zero.\\n            if(i + labelLength + 2 == domain.length && domain[labelLength + i + 1] == 0) {\\n\\n                // Create a new byte array to hold the TLD.\\n                bytes memory lastLabel = new bytes(labelLength);\\n\\n                // Copy the TLD from the domain array to the new byte array.\\n                for (uint j = 0; j < labelLength; j++) {\\n                    lastLabel[j] = domain[i + 1 + j];\\n                }\\n\\n                // Convert the TLD to string and return.\\n                return string(lastLabel);\\n            }\\n\\n            // Move to the next label\\n            i += labelLength;\\n\\n            // Increment the level count.\\n            levels++;\\n        }\\n\\n        // Revert if TLD not found.\\n        revert(\\\"TLD not found\\\");\\n    }\\n}\",\"keccak256\":\"0xbd70dd8fe5f4c96b82049267f5a332c6c97bff8c2c8c014ceaa7f52f80a16aa2\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/L2RenewalControllerBase.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {INameWrapper} from \\\"ens-contracts/wrapper/INameWrapper.sol\\\";\\nimport {INameWrapperUpgrade} from \\\"ens-contracts/wrapper/INameWrapperUpgrade.sol\\\";\\nimport {StringUtils} from \\\"ens-contracts/ethregistrar/StringUtils.sol\\\";\\nimport {Balances} from \\\"optimism/wrapper/Balances.sol\\\";\\nimport {BytesUtilsSub} from \\\"./BytesUtilsSub.sol\\\";\\nimport {ERC165} from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport {IRenewalController} from \\\"optimism/wrapper/interfaces/IRenewalController.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {ERC20Recoverable} from \\\"ens-contracts/utils/ERC20Recoverable.sol\\\";\\nimport {Address} from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\n\\nerror InsufficientValue();\\nerror UnauthorizedAddress(bytes32 node);\\n\\nabstract contract L2RenewalControllerBase is \\n    IRenewalController,\\n    ERC165,\\n    Ownable,\\n    Balances,\\n    ERC20Recoverable\\n    {\\n\\n    using Address for address payable;\\n\\n    event NameWrapperVersionUpdated();\\n    event SubnameWrapperVersionUpdated();\\n\\n    using StringUtils for *;\\n    using BytesUtilsSub for bytes;\\n\\n    // The NameWrapper and SubnameWrapper can be upgraded. \\n    address[] public nameWrappers = new address[](1);\\n\\n    constructor(\\n        INameWrapper _nameWrapper\\n    ) {\\n\\n        nameWrappers[0] = address(_nameWrapper);\\n\\n    }\\n\\n    /**\\n     * @notice If the NameWrapper smart contract is upgraded, add the new version.\\n     * @param _nameWrapper The next version of the NameWrapper\\n     */\\n\\n    function addNextNameWrapperVersion(\\n        INameWrapperUpgrade _nameWrapper\\n    ) public onlyOwner {\\n\\n        nameWrappers.push(address(_nameWrapper));\\n\\n        emit NameWrapperVersionUpdated();\\n    }\\n\\n    /**\\n    * @dev Function to renew a name for a specified duration. \\n    * @param name The name to be renewed in DNS format.\\n    * @param duration The duration for which the name should be renewed in years.\\n    */\\n\\n    function renew(bytes calldata name, address referrer, uint256 duration)\\n        external\\n        payable\\n    {        \\n\\n        // Renew with the latest version of the NameWrapper and SubnameWrapper contracts.\\n        renewWithVersions(\\n            nameWrappers.length-1,    \\n            name,\\n            referrer,\\n            duration);\\n    }\\n\\n    /**\\n    * @notice Function to renew a name for a specified duration. \\n    * @dev This function is allows for the upgradeing of the NameWrapper and SubnameWrapper contracts.\\n    * It is not possible to know what the interface of the upgarded contracts will be, so we assume that\\n    * they will be compatible with the current version of the contracts.\\n    * @param nameWrapperV The version of the NameWrapper.\\n    * @param name The name to be renewed in DNS format.\\n    * @param duration The duration for which the name should be renewed in years.\\n    */\\n\\n    function renewWithVersions(\\n        uint256 nameWrapperV,\\n        bytes calldata name, \\n        address referrer, \\n        uint256 duration\\n        )\\n        public\\n        payable\\n    {        \\n        \\n        bytes32 parentNode;\\n        bytes32 node;\\n        bytes32 labelhash;\\n\\n        // Create a block to solve a stack too deep error.\\n        { \\n            uint256 offset;\\n            (labelhash, offset) = name.readLabel(0);\\n            parentNode = name.namehash(offset);\\n            node = _makeNode(parentNode, labelhash);\\n        }\\n\\n        // Get the owners of the name and the parent name.\\n        address parentOwner = INameWrapper(nameWrappers[nameWrapperV]).ownerOf(uint256(parentNode));\\n        address nodeOwner = INameWrapper(nameWrappers[nameWrapperV]).ownerOf(uint256(node));\\n\\n        // Check to make sure the caller (msg.sender) is authorised to renew the name.\\n        if( msg.sender != nodeOwner && !INameWrapper(nameWrappers[nameWrapperV]).isApprovedForAll(nodeOwner, msg.sender)){\\n            revert UnauthorizedAddress(node);\\n        }\\n\\n        uint64 expiry;\\n\\n        // Create a block to solve a stack too deep error.\\n        {\\n            // Get the previous expiry. \\n            (,, uint64 nodeExpiry) = INameWrapper(nameWrappers[nameWrapperV]).getData(uint256(node));\\n\\n            // Check to see if the duration is too long and\\n            // if it is set the duration.\\n            (,, uint64 parentExpiry) = INameWrapper(nameWrappers[nameWrapperV]).getData(uint256(parentNode));\\n            if (nodeExpiry + duration > parentExpiry) {\\n                duration = parentExpiry - nodeExpiry;\\n            }\\n\\n            // Set the expiry\\n            expiry =  uint64(nodeExpiry + duration);\\n        }\\n\\n        // Get the price for the duration.\\n        (uint256 priceEth,) = rentPrice(name, duration);\\n        if (msg.value < priceEth) {\\n            revert InsufficientValue();\\n        }\\n\\n        // Create a block to solve a stack too deep error.\\n        {\\n            uint256 referrerAmount;\\n\\n            // If a referrer is specified then calculate the amount to be given to the referrer.\\n            if (referrer != address(0)) {\\n\\n                // Calculate the amount to be given to the referrer.\\n                referrerAmount = priceEth * referrerCuts[referrer] / 10000;\\n\\n                // Increase the referrer's balance\\n                balances[referrer] += referrerAmount;\\n            }\\n\\n            // Calculate the amount to be given to the owner of the contract. \\n            // We don't need a balance for the owner of the contract because the owner\\n            // can withdraw any funds in the contract minus total balances. \\n            uint256 ownerAmount = priceEth * ownerCut / 10000;\\n\\n\\n            // Increase the owner of the parent name's balance minus the\\n            // referrer amount and the owner amount.\\n            balances[parentOwner] += priceEth - referrerAmount - ownerAmount;\\n\\n            // Increase the total balances\\n            totalBalance += priceEth - ownerAmount;\\n        }\\n\\n        INameWrapper(nameWrappers[nameWrapperV]).extendExpiry(\\n            parentNode,\\n            labelhash,\\n            expiry\\n        );\\n\\n        emit NameRenewed(name, priceEth, expiry);\\n\\n        // If the caller paid too much refund the amount overpaid. \\n        if (msg.value > priceEth) {\\n            payable(msg.sender).sendValue(msg.value - priceEth);\\n        }\\n\\n    }\\n\\n    /**\\n    * @notice Returns the price to rent a subdomain for a given duration.\\n    * @param name The name of the subdomain.\\n    * @param duration The duration of the rental. \\n    */ \\n\\n    function rentPrice(bytes calldata name, uint256 duration)\\n        public\\n        view\\n        virtual\\n        returns (uint256, uint256);\\n\\n    /**\\n    * @param interfaceId The interface identifier, as specified in ERC-165.\\n    * @return `true` if the contract implements `interfaceID`\\n    */ \\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IRenewalController).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns the node for a namehash and labelhash.\\n     * @param parentNode The namehash of the parent node.\\n     * @param labelhash The labelhash of the label.\\n     * @return The node for the namehash and labelhash.\\n     */\\n    function _makeNode(bytes32 parentNode, bytes32 labelhash)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(parentNode, labelhash));\\n    }\\n}\",\"keccak256\":\"0xba0907da1a8eb596b5aef1c0ebc8019043c87043eb2d424a657a12eff106a59f\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/IAggregatorInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Chainlink oracle interface\\ninterface IAggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\",\"keccak256\":\"0x39cfb36ad94daab8e3814fad5740f6ac747d11cba399812267333bc1e32ab28f\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/IRenewalController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IRenewalController {\\n\\n    event NameRenewed(\\n        bytes indexed name,\\n        uint256 indexed price,\\n        uint64 indexed expiry\\n    );\\n\\n    function renew(bytes calldata name, address referrer, uint256 duration)\\n        external\\n        payable;\\n\\n    function rentPrice(bytes calldata name, uint256 duration)\\n        external\\n        view\\n        returns (uint256 weiPrice, uint256 usdPrice);\\n}\",\"keccak256\":\"0xa93cf8ec54f505ac1b2bc84579bdd516d76442a1d50191051d09fe78281eb05d\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/rCInterfaces/IPricePerCharRenewalController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"optimism/wrapper/interfaces/IRenewalController.sol\\\";\\n\\n/** \\n * @title An interface for a renewal controller offering renewals at different prices depending on the length of the name in question\\n * @author Unruggable Labs\\n */ \\n\\ninterface IPricePerCharRenewalController is IRenewalController {\\n\\n    event CharPricesUpdated(uint256[] indexed charAmounts);\\n    event PriceForCharLengthUpdated(uint256 indexed index, uint256 indexed amount);\\n\\n    function setPricingForAllLengths(\\n        uint256[] calldata _charAmounts\\n    ) external;\\n\\n    function updatePriceForCharLength(\\n        uint16 charLength,\\n        uint256 charAmount\\n    ) external;\\n\\n    function addNextPriceForCharLength(\\n        uint256 charAmount\\n    ) external;\\n\\n    function getLastCharIndex() external view returns (uint256);\\n}\",\"keccak256\":\"0x97d6fb03545268a2d325779143b49a623f3400147114bec73265e4a03d64518c\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {INameWrapper} from \\\"ens-contracts/wrapper/INameWrapper.sol\\\";\\nimport {StringUtils} from \\\"ens-contracts/ethregistrar/StringUtils.sol\\\";\\nimport {IAggregatorInterface} from \\\"optimism/wrapper/interfaces/IAggregatorInterface.sol\\\";\\nimport {BytesUtilsSub} from \\\"optimism/wrapper/BytesUtilsSub.sol\\\";\\nimport {IRenewalController} from \\\"optimism/wrapper/interfaces/IRenewalController.sol\\\";\\nimport {IPricePerCharRenewalController} from \\\"optimism/wrapper/interfaces/rCInterfaces/IPricePerCharRenewalController.sol\\\";\\nimport {L2RenewalControllerBase} from \\\"optimism/wrapper/L2RenewalControllerBase.sol\\\";\\n\\nerror CannotSetNewCharLengthAmount();\\n\\ncontract L2PricePerCharRenewalController is \\n    L2RenewalControllerBase,\\n    IPricePerCharRenewalController\\n    {\\n\\n    using StringUtils for *;\\n    using BytesUtilsSub for bytes;\\n\\n    // The pricing data used for renewing subnames.\\n    uint256[] public charAmounts;\\n\\n    // Chainlink oracle address\\n    IAggregatorInterface public usdOracle; //@audit - is there any way to update the oracle? \\n\\n    constructor(\\n        INameWrapper _nameWrapper,\\n        IAggregatorInterface _usdOracle\\n    ) L2RenewalControllerBase(_nameWrapper){\\n\\n        // Set the oracle address.\\n        usdOracle = _usdOracle;\\n\\n        // Set charAmounts to a new array with a length of 1.\\n        charAmounts = new uint256[](1);\\n    }\\n    /**\\n     * @notice Sets the oracle address.\\n     * @param _usdOracle The oracle address.\\n     */\\n\\n    function updateOracle(IAggregatorInterface _usdOracle) public onlyOwner {\\n\\n        // Set the oracle address.\\n        usdOracle = _usdOracle;\\n    }\\n\\n    /**\\n    * @notice Set the pricing for subname lengths.\\n    * @param _charAmounts An array of amounst for each characer length.\\n    */  \\n\\n     function setPricingForAllLengths(\\n        uint256[] calldata _charAmounts\\n    ) public onlyOwner {\\n\\n        delete charAmounts;\\n        charAmounts = _charAmounts;\\n\\n        emit CharPricesUpdated(_charAmounts);\\n    }\\n\\n    /**\\n     * @notice Set a price for a single character length, e.g. three characters.\\n     * @param charLength The character length, e.g. 3 would be for three characters. Use 0 for the default amount.\\n     * @param charAmount The amount in USD/year for a character count, e.g. amount for three characters.\\n     */\\n    function updatePriceForCharLength(\\n        uint16 charLength,\\n        uint256 charAmount\\n    ) public onlyOwner {\\n\\n        // Check that the charLength is not greater than the last index of the charAmounts array.\\n        if (charLength > charAmounts.length-1){\\n            revert CannotSetNewCharLengthAmount();\\n        }\\n        charAmounts[charLength] = charAmount;\\n\\n        emit PriceForCharLengthUpdated(charLength, charAmount);\\n    }\\n\\n\\n    /**\\n     * @notice Adds a price for the next character length, e.g. three characters.\\n     * @param amount The amount in USD/sec. (with 18 digits of precision) \\n     * for a character count, e.g. amount for three characters.\\n     */\\n    function addNextPriceForCharLength(\\n        uint256 amount\\n    ) public onlyOwner {\\n\\n        charAmounts.push(amount);\\n\\n        emit PriceForCharLengthUpdated(charAmounts.length-1, amount);\\n    }\\n\\n    /**\\n     * @notice Get the last length for a character length that has a price (can be 0), e.g. three characters.\\n     * @return The length of the last character length that was set.\\n     */\\n    function getLastCharIndex() public view returns (uint256) {\\n        return charAmounts.length - 1;\\n    }\\n\\n     /**\\n     * @notice Gets the total cost of rent in wei, from the unitPrice, i.e. USD, and duration.\\n     * @param name The name in DNS format, e.g. vault.vitalik.eth\\n     * @param duration The amount of time the name will be rented for/extended in years. \\n     * @return The rent price for the duration in Wei, and USD. \\n     */\\n\\n    function rentPrice(bytes calldata name, uint256 duration)\\n        public\\n        view\\n        override (IRenewalController, L2RenewalControllerBase)\\n        returns (uint256, uint256)\\n    {\\n\\n        ( , uint256 labelLength) = name.getFirstLabel();\\n\\n        // Get the length of the charAmounts array.\\n        uint256 charAmountsLength = charAmounts.length;\\n\\n        // The price of the length of the label in USD/sec. (with 18 digits of precision).\\n        uint256 unitPrice;\\n        \\n        if (charAmountsLength > 0) {\\n            // Check to make sure the price for labelLength exists.\\n            // If not use the default price charAmounts[0].\\n            if(labelLength < charAmountsLength){\\n\\n                // Get the unit price, i.e. the price in USD/sec, for the length of\\n                // the label. If there is not a price set then use the defualt amount.  \\n                unitPrice = charAmounts[labelLength];\\n\\n                // If the unit price is 0 then use the default amount.\\n                if (unitPrice == 0){ \\n                    unitPrice = charAmounts[0];\\n                } \\n\\n            } else {\\n\\n                // Get the unit price, i.e. the price in USD/sec using the defualt amount.  \\n                unitPrice = charAmounts[0];\\n\\n            }\\n\\n            // Convert the unit price from USD to Wei.\\n            return (usdToWei(unitPrice * duration), unitPrice * duration);\\n\\n        } else {\\n            //If there is no pricing data return 0, i.e. FREE.\\n            return (0,0);\\n        }\\n\\n    }\\n\\n    /**\\n    * @param interfaceId The interface identifier, as specified in ERC-165.\\n    * @return `true` if the contract implements `interfaceID`\\n    */ \\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IPricePerCharRenewalController).interfaceId ||\\n            interfaceId == type(IRenewalController).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n    * @dev Converts USD to Wei. \\n    * @param amount The amount of USD to be converted to Wei.\\n    * @return The amount of Wei.\\n    */\\n    function usdToWei(uint256 amount) internal view returns (uint256) {\\n\\n        // Get the price of ETH in USD (with 8 digits of precision) from the oracle.\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n\\n        // Convert the amount of USD (with 18 digits of precision) to Wei. \\n        return (amount * 1e8) / ethPrice;\\n    }\\n}\",\"keccak256\":\"0x4548e9b6d5cc8f1f355e1eb918aad011d9707f9e05e8a478780487f6e4ea5d3a\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"lib/ens-contracts/contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"},\"lib/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"lib/ens-contracts/contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/INameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"../registry/ENS.sol\\\";\\nimport \\\"../ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"./IMetadataService.sol\\\";\\nimport \\\"./INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface INameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function registrar() external view returns (IBaseRegistrar);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function wrap(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        address resolver\\n    ) external;\\n\\n    function wrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint16 ownerControlledFuses,\\n        address resolver\\n    ) external returns (uint64 expires);\\n\\n    function registerAndWrapETH2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint256 registrarExpiry);\\n\\n    function renew(\\n        uint256 labelHash,\\n        uint256 duration\\n    ) external returns (uint256 expires);\\n\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\n\\n    function unwrapETH2LD(\\n        bytes32 label,\\n        address newRegistrant,\\n        address newController\\n    ) external;\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n\\n    function isWrapped(bytes32) external view returns (bool);\\n\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6001608081815260c06040529060a0602080368337505081516200002b9260059250602001906200014e565b503480156200003957600080fd5b5060405162001ff238038062001ff28339810160408190526200005c9162000226565b816200006833620000fe565b60c860048190555080600560008154811062000088576200008862000265565b600091825260209091200180546001600160a01b039283166001600160a01b0319918216179091556007805492851692909116919091179055506040805160018082528183019092529081602001602082028036833750508151620000f5926006925060200190620001b8565b5050506200027b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054828255906000526020600020908101928215620001a6579160200282015b82811115620001a657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200016f565b50620001b4929150620001f6565b5090565b828054828255906000526020600020908101928215620001a6579160200282015b82811115620001a6578251825591602001919060010190620001d9565b5b80821115620001b45760008155600101620001f7565b6001600160a01b03811681146200022357600080fd5b50565b600080604083850312156200023a57600080fd5b825162000247816200020d565b60208401519092506200025a816200020d565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b611d67806200028b6000396000f3fe60806040526004361061014b5760003560e01c806383b5ff8b116100b6578063c182dd711161006f578063c182dd71146103a7578063c48561fe146103c7578063c8a4271f146103e7578063d471743214610407578063ddc0477d1461041a578063f2fde38b1461044757600080fd5b806383b5ff8b146102f65780638da5cb5b1461030c578063a996aeef1461033e578063ad7a672f14610351578063ba8d247914610367578063bae8fc081461038757600080fd5b8063444a2d8d11610108578063444a2d8d1461022c5780635d3590d51461024c578063715018a61461026c57806371dc194f14610281578063757de573146102b657806378693000146102d657600080fd5b806301ffc9a71461015057806307213bc81461018557806312ee468a146101a75780631cb44dfc146101ca57806327e235e3146101ea5780633ccfd60b14610217575b600080fd5b34801561015c57600080fd5b5061017061016b366004611885565b610467565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b506101a56101a03660046118c4565b6104ad565b005b3480156101b357600080fd5b506101bc610529565b60405190815260200161017c565b3480156101d657600080fd5b506101a56101e53660046118c4565b610540565b3480156101f657600080fd5b506101bc6102053660046118c4565b60016020526000908152604090205481565b34801561022357600080fd5b506101a561056a565b34801561023857600080fd5b506101bc6102473660046118e1565b61071e565b34801561025857600080fd5b506101a56102673660046118fa565b61073f565b34801561027857600080fd5b506101a56107c0565b34801561028d57600080fd5b506102a161029c366004611983565b6107d4565b6040805192835260208301919091520161017c565b3480156102c257600080fd5b506101a56102d13660046118e1565b6108dc565b3480156102e257600080fd5b506101a56102f13660046119ce565b6109bb565b34801561030257600080fd5b506101bc60045481565b34801561031857600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161017c565b6101a561034c366004611a01565b610a4f565b34801561035d57600080fd5b506101bc60035481565b34801561037357600080fd5b506101a5610382366004611a5d565b610a6b565b34801561039357600080fd5b506101a56103a23660046118e1565b610ad0565b3480156103b357600080fd5b506103266103c23660046118e1565b610b6a565b3480156103d357600080fd5b506101a56103e23660046118e1565b610b94565b3480156103f357600080fd5b50600754610326906001600160a01b031681565b6101a5610415366004611ad1565b610c0c565b34801561042657600080fd5b506101bc6104353660046118c4565b60026020526000908152604090205481565b34801561045357600080fd5b506101a56104623660046118c4565b611264565b60006001600160e01b0319821663148f330d60e01b148061049857506001600160e01b031982166306c255bd60e51b145b806104a757506104a7826112da565b92915050565b6104b561130f565b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0384161790556040517fe41a14cd176f2aecc84f8e04f138a2c318414e57c932ebe3e0bfc8864b0b9b529190a150565b60065460009061053b90600190611b4d565b905090565b61054861130f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b3361057d6000546001600160a01b031690565b6001600160a01b0316816001600160a01b03160361063e576000600354476105a59190611b4d565b9050600081116105f15760405162461bcd60e51b815260206004820152601260248201527104f776e65722062616c616e636520697320360741b60448201526064015b60405180910390fd5b60405181906001600160a01b038416907fb990971c3785a76fb59cf6aa8fe8327738148e676c6d46a6dea040c4b6b2609590600090a361063a6001600160a01b03831682611369565b5050565b6001600160a01b03811660009081526001602052604090205461069c5760405162461bcd60e51b815260206004820152601660248201527504164647265737327732062616c616e636520697320360541b60448201526064016105e8565b6001600160a01b038116600090815260016020526040812080549082905560038054919283926106cd908490611b4d565b909155505060405181906001600160a01b038416907fb990971c3785a76fb59cf6aa8fe8327738148e676c6d46a6dea040c4b6b2609590600090a361063a6001600160a01b03831682611369565b50565b6006818154811061072e57600080fd5b600091825260209091200154905081565b61074761130f565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190611b60565b50505050565b6107c861130f565b6107d26000611487565b565b600080600061081886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114d792505050565b6006549092509050600081156108c9578183101561087f576006838154811061084357610843611b82565b906000526020600020015490508060000361087a57600660008154811061086c5761086c611b82565b906000526020600020015490505b6108a1565b600660008154811061089357610893611b82565b906000526020600020015490505b6108b36108ae8783611b98565b6115d1565b6108bd8783611b98565b945094505050506108d4565b600080945094505050505b935093915050565b6000546001600160a01b031633146109365760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920746865206f776e65722063616e207365742074686520637574000060448201526064016105e8565b6101f48111156109885760405162461bcd60e51b815260206004820181905260248201527f4f776e6572206375742063616e6e6f74206265206d6f7265207468616e20352560448201526064016105e8565b600481905560405181907fd0097c261070735a2812d4540f4ac501d429da168de12584fb6302c6ea3abfd990600090a250565b6109c361130f565b6006546109d290600190611b4d565b8261ffff1611156109f6576040516301ed86c560e71b815260040160405180910390fd5b8060068361ffff1681548110610a0e57610a0e611b82565b6000918252602082200191909155604051829161ffff8516917fbd063ae8df7c297bd537ffbf877dc501f28743564979c4af31e44463e8c39b929190a35050565b6005546107ba90610a6290600190611b4d565b85858585610c0c565b610a7361130f565b610a7f60066000611807565b610a8b60068383611825565b508181604051610a9c929190611baf565b604051908190038120907f3139fe6c2f1a906b2193de359fa5a1db1389152550602fef08eef911f3ab8f7e90600090a25050565b6103e8811115610b2e5760405162461bcd60e51b8152602060048201526024808201527f5265666572726572206375742063616e6e6f74206265206d6f7265207468616e6044820152632031302560e01b60648201526084016105e8565b336000908152600260205260408082208390555182917f5132aa1b4691ab49930b655c558addd21627fa35b28ff9695f3468d955c0e0a091a250565b60058181548110610b7a57600080fd5b6000918252602090912001546001600160a01b0316905081565b610b9c61130f565b600680546001818101835560008390527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910183905590548291610be091611b4d565b6040517fbd063ae8df7c297bd537ffbf877dc501f28743564979c4af31e44463e8c39b9290600090a350565b600080600080610c56600089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061166d9050565b8092508193505050610ca18189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506117249050565b60408051602080820184905281830186905282518083038401815260609092019092528051910120909450925050600060058981548110610ce457610ce4611b82565b6000918252602090912001546040516331a9108f60e11b8152600481018690526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611bd8565b9050600060058a81548110610d7157610d71611b82565b6000918252602090912001546040516331a9108f60e11b8152600481018690526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de79190611bd8565b9050336001600160a01b03821614801590610e8f575060058a81548110610e1057610e10611b82565b60009182526020909120015460405163e985e9c560e01b81526001600160a01b0383811660048301523360248301529091169063e985e9c590604401602060405180830381865afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d9190611b60565b155b15610eb057604051635c20ef6960e11b8152600481018590526024016105e8565b60008060058c81548110610ec657610ec6611b82565b600091825260209091200154604051630178fe3f60e01b8152600481018890526001600160a01b0390911690630178fe3f90602401606060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c9190611c11565b92505050600060058d81548110610f5557610f55611b82565b600091825260209091200154604051630178fe3f60e01b8152600481018a90526001600160a01b0390911690630178fe3f90602401606060405180830381865afa158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb9190611c11565b92505050806001600160401b031689836001600160401b0316610fee9190611c62565b111561100a57610ffe8282611c75565b6001600160401b031698505b61101d896001600160401b038416611c62565b92505050600061102e8b8b8a6107d4565b509050803410156110525760405163044044a560e21b815260040160405180910390fd5b60006001600160a01b038a16156110c7576001600160a01b038a166000908152600260205260409020546127109061108a9084611b98565b6110949190611c9c565b6001600160a01b038b166000908152600160205260408120805492935083929091906110c1908490611c62565b90915550505b6000612710600454846110da9190611b98565b6110e49190611c9c565b9050806110f18385611b4d565b6110fb9190611b4d565b6001600160a01b03871660009081526001602052604081208054909190611123908490611c62565b9091555061113390508184611b4d565b600360008282546111449190611c62565b92505081905550505060058c8154811061116057611160611b82565b60009182526020909120015460405163372eb56960e11b815260048101899052602481018790526001600160401b03841660448201526001600160a01b0390911690636e5d6ad2906064016020604051808303816000875af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190611cbe565b50816001600160401b0316818c8c60405161120a929190611cd9565b604051908190038120907f0ef7ed3ee7f05ff559c931645cd3d52e8630d6ae2ef04acb8c6ce1fe2469fd4490600090a4803411156112565761125661124f8234611b4d565b3390611369565b505050505050505050505050565b61126c61130f565b6001600160a01b0381166112d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e8565b61071b81611487565b60006001600160e01b031982166306c255bd60e51b14806104a757506301ffc9a760e01b6001600160e01b03198316146104a7565b6000546001600160a01b031633146107d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e8565b804710156113b95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105e8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611406576040519150601f19603f3d011682016040523d82523d6000602084013e61140b565b606091505b50509050806114825760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105e8565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600080836000815181106114ef576114ef611b82565b0160200151845160f89190911c91508110801561150c5750600081115b61151557600080fd5b6000816001600160401b0381111561152f5761152f611ce9565b6040519080825280601f01601f191660200182016040528015611559576020820181803683370190505b50905060005b828110156115c75785611573826001611c62565b8151811061158357611583611b82565b602001015160f81c60f81b8282815181106115a0576115a0611b82565b60200101906001600160f81b031916908160001a9053506115c081611cff565b905061155f565b5094909350915050565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b9190611d18565b90508061165c846305f5e100611b98565b6116669190611c9c565b9392505050565b600080835183106116c05760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016105e8565b60008484815181106116d4576116d4611b82565b016020015160f81c90508015611700576116f9856116f3866001611c62565b836117e3565b9250611705565b600092505b61170f8185611c62565b61171a906001611c62565b9150509250929050565b6000806000611733858561166d565b9092509050816117a5576001855161174b9190611b4d565b84146117995760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016105e8565b50600091506104a79050565b6117af8582611724565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b82516000906117f28385611c62565b11156117fd57600080fd5b5091016020012090565b508054600082559060005260206000209081019061071b9190611870565b828054828255906000526020600020908101928215611860579160200282015b82811115611860578235825591602001919060010190611845565b5061186c929150611870565b5090565b5b8082111561186c5760008155600101611871565b60006020828403121561189757600080fd5b81356001600160e01b03198116811461166657600080fd5b6001600160a01b038116811461071b57600080fd5b6000602082840312156118d657600080fd5b8135611666816118af565b6000602082840312156118f357600080fd5b5035919050565b60008060006060848603121561190f57600080fd5b833561191a816118af565b9250602084013561192a816118af565b929592945050506040919091013590565b60008083601f84011261194d57600080fd5b5081356001600160401b0381111561196457600080fd5b60208301915083602082850101111561197c57600080fd5b9250929050565b60008060006040848603121561199857600080fd5b83356001600160401b038111156119ae57600080fd5b6119ba8682870161193b565b909790965060209590950135949350505050565b600080604083850312156119e157600080fd5b823561ffff811681146119f357600080fd5b946020939093013593505050565b60008060008060608587031215611a1757600080fd5b84356001600160401b03811115611a2d57600080fd5b611a398782880161193b565b9095509350506020850135611a4d816118af565b9396929550929360400135925050565b60008060208385031215611a7057600080fd5b82356001600160401b0380821115611a8757600080fd5b818501915085601f830112611a9b57600080fd5b813581811115611aaa57600080fd5b8660208260051b8501011115611abf57600080fd5b60209290920196919550909350505050565b600080600080600060808688031215611ae957600080fd5b8535945060208601356001600160401b03811115611b0657600080fd5b611b128882890161193b565b9095509350506040860135611b26816118af565b949793965091946060013592915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104a7576104a7611b37565b600060208284031215611b7257600080fd5b8151801515811461166657600080fd5b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176104a7576104a7611b37565b60006001600160fb1b03831115611bc557600080fd5b8260051b80858437919091019392505050565b600060208284031215611bea57600080fd5b8151611666816118af565b80516001600160401b0381168114611c0c57600080fd5b919050565b600080600060608486031215611c2657600080fd5b8351611c31816118af565b602085015190935063ffffffff81168114611c4b57600080fd5b9150611c5960408501611bf5565b90509250925092565b808201808211156104a7576104a7611b37565b6001600160401b03828116828216039080821115611c9557611c95611b37565b5092915050565b600082611cb957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611cd057600080fd5b61166682611bf5565b8183823760009101908152919050565b634e487b7160e01b600052604160045260246000fd5b600060018201611d1157611d11611b37565b5060010190565b600060208284031215611d2a57600080fd5b505191905056fea2646970667358221220e99e987b8728d7f4414c57282d91a7a2f0b44e14c72551671502f94698b8ff5e64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c806383b5ff8b116100b6578063c182dd711161006f578063c182dd71146103a7578063c48561fe146103c7578063c8a4271f146103e7578063d471743214610407578063ddc0477d1461041a578063f2fde38b1461044757600080fd5b806383b5ff8b146102f65780638da5cb5b1461030c578063a996aeef1461033e578063ad7a672f14610351578063ba8d247914610367578063bae8fc081461038757600080fd5b8063444a2d8d11610108578063444a2d8d1461022c5780635d3590d51461024c578063715018a61461026c57806371dc194f14610281578063757de573146102b657806378693000146102d657600080fd5b806301ffc9a71461015057806307213bc81461018557806312ee468a146101a75780631cb44dfc146101ca57806327e235e3146101ea5780633ccfd60b14610217575b600080fd5b34801561015c57600080fd5b5061017061016b366004611885565b610467565b60405190151581526020015b60405180910390f35b34801561019157600080fd5b506101a56101a03660046118c4565b6104ad565b005b3480156101b357600080fd5b506101bc610529565b60405190815260200161017c565b3480156101d657600080fd5b506101a56101e53660046118c4565b610540565b3480156101f657600080fd5b506101bc6102053660046118c4565b60016020526000908152604090205481565b34801561022357600080fd5b506101a561056a565b34801561023857600080fd5b506101bc6102473660046118e1565b61071e565b34801561025857600080fd5b506101a56102673660046118fa565b61073f565b34801561027857600080fd5b506101a56107c0565b34801561028d57600080fd5b506102a161029c366004611983565b6107d4565b6040805192835260208301919091520161017c565b3480156102c257600080fd5b506101a56102d13660046118e1565b6108dc565b3480156102e257600080fd5b506101a56102f13660046119ce565b6109bb565b34801561030257600080fd5b506101bc60045481565b34801561031857600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161017c565b6101a561034c366004611a01565b610a4f565b34801561035d57600080fd5b506101bc60035481565b34801561037357600080fd5b506101a5610382366004611a5d565b610a6b565b34801561039357600080fd5b506101a56103a23660046118e1565b610ad0565b3480156103b357600080fd5b506103266103c23660046118e1565b610b6a565b3480156103d357600080fd5b506101a56103e23660046118e1565b610b94565b3480156103f357600080fd5b50600754610326906001600160a01b031681565b6101a5610415366004611ad1565b610c0c565b34801561042657600080fd5b506101bc6104353660046118c4565b60026020526000908152604090205481565b34801561045357600080fd5b506101a56104623660046118c4565b611264565b60006001600160e01b0319821663148f330d60e01b148061049857506001600160e01b031982166306c255bd60e51b145b806104a757506104a7826112da565b92915050565b6104b561130f565b6005805460018101825560009182527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0384161790556040517fe41a14cd176f2aecc84f8e04f138a2c318414e57c932ebe3e0bfc8864b0b9b529190a150565b60065460009061053b90600190611b4d565b905090565b61054861130f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b3361057d6000546001600160a01b031690565b6001600160a01b0316816001600160a01b03160361063e576000600354476105a59190611b4d565b9050600081116105f15760405162461bcd60e51b815260206004820152601260248201527104f776e65722062616c616e636520697320360741b60448201526064015b60405180910390fd5b60405181906001600160a01b038416907fb990971c3785a76fb59cf6aa8fe8327738148e676c6d46a6dea040c4b6b2609590600090a361063a6001600160a01b03831682611369565b5050565b6001600160a01b03811660009081526001602052604090205461069c5760405162461bcd60e51b815260206004820152601660248201527504164647265737327732062616c616e636520697320360541b60448201526064016105e8565b6001600160a01b038116600090815260016020526040812080549082905560038054919283926106cd908490611b4d565b909155505060405181906001600160a01b038416907fb990971c3785a76fb59cf6aa8fe8327738148e676c6d46a6dea040c4b6b2609590600090a361063a6001600160a01b03831682611369565b50565b6006818154811061072e57600080fd5b600091825260209091200154905081565b61074761130f565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ba9190611b60565b50505050565b6107c861130f565b6107d26000611487565b565b600080600061081886868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506114d792505050565b6006549092509050600081156108c9578183101561087f576006838154811061084357610843611b82565b906000526020600020015490508060000361087a57600660008154811061086c5761086c611b82565b906000526020600020015490505b6108a1565b600660008154811061089357610893611b82565b906000526020600020015490505b6108b36108ae8783611b98565b6115d1565b6108bd8783611b98565b945094505050506108d4565b600080945094505050505b935093915050565b6000546001600160a01b031633146109365760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c7920746865206f776e65722063616e207365742074686520637574000060448201526064016105e8565b6101f48111156109885760405162461bcd60e51b815260206004820181905260248201527f4f776e6572206375742063616e6e6f74206265206d6f7265207468616e20352560448201526064016105e8565b600481905560405181907fd0097c261070735a2812d4540f4ac501d429da168de12584fb6302c6ea3abfd990600090a250565b6109c361130f565b6006546109d290600190611b4d565b8261ffff1611156109f6576040516301ed86c560e71b815260040160405180910390fd5b8060068361ffff1681548110610a0e57610a0e611b82565b6000918252602082200191909155604051829161ffff8516917fbd063ae8df7c297bd537ffbf877dc501f28743564979c4af31e44463e8c39b929190a35050565b6005546107ba90610a6290600190611b4d565b85858585610c0c565b610a7361130f565b610a7f60066000611807565b610a8b60068383611825565b508181604051610a9c929190611baf565b604051908190038120907f3139fe6c2f1a906b2193de359fa5a1db1389152550602fef08eef911f3ab8f7e90600090a25050565b6103e8811115610b2e5760405162461bcd60e51b8152602060048201526024808201527f5265666572726572206375742063616e6e6f74206265206d6f7265207468616e6044820152632031302560e01b60648201526084016105e8565b336000908152600260205260408082208390555182917f5132aa1b4691ab49930b655c558addd21627fa35b28ff9695f3468d955c0e0a091a250565b60058181548110610b7a57600080fd5b6000918252602090912001546001600160a01b0316905081565b610b9c61130f565b600680546001818101835560008390527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90910183905590548291610be091611b4d565b6040517fbd063ae8df7c297bd537ffbf877dc501f28743564979c4af31e44463e8c39b9290600090a350565b600080600080610c56600089898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061166d9050565b8092508193505050610ca18189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506117249050565b60408051602080820184905281830186905282518083038401815260609092019092528051910120909450925050600060058981548110610ce457610ce4611b82565b6000918252602090912001546040516331a9108f60e11b8152600481018690526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610d36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5a9190611bd8565b9050600060058a81548110610d7157610d71611b82565b6000918252602090912001546040516331a9108f60e11b8152600481018690526001600160a01b0390911690636352211e90602401602060405180830381865afa158015610dc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de79190611bd8565b9050336001600160a01b03821614801590610e8f575060058a81548110610e1057610e10611b82565b60009182526020909120015460405163e985e9c560e01b81526001600160a01b0383811660048301523360248301529091169063e985e9c590604401602060405180830381865afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d9190611b60565b155b15610eb057604051635c20ef6960e11b8152600481018590526024016105e8565b60008060058c81548110610ec657610ec6611b82565b600091825260209091200154604051630178fe3f60e01b8152600481018890526001600160a01b0390911690630178fe3f90602401606060405180830381865afa158015610f18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3c9190611c11565b92505050600060058d81548110610f5557610f55611b82565b600091825260209091200154604051630178fe3f60e01b8152600481018a90526001600160a01b0390911690630178fe3f90602401606060405180830381865afa158015610fa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb9190611c11565b92505050806001600160401b031689836001600160401b0316610fee9190611c62565b111561100a57610ffe8282611c75565b6001600160401b031698505b61101d896001600160401b038416611c62565b92505050600061102e8b8b8a6107d4565b509050803410156110525760405163044044a560e21b815260040160405180910390fd5b60006001600160a01b038a16156110c7576001600160a01b038a166000908152600260205260409020546127109061108a9084611b98565b6110949190611c9c565b6001600160a01b038b166000908152600160205260408120805492935083929091906110c1908490611c62565b90915550505b6000612710600454846110da9190611b98565b6110e49190611c9c565b9050806110f18385611b4d565b6110fb9190611b4d565b6001600160a01b03871660009081526001602052604081208054909190611123908490611c62565b9091555061113390508184611b4d565b600360008282546111449190611c62565b92505081905550505060058c8154811061116057611160611b82565b60009182526020909120015460405163372eb56960e11b815260048101899052602481018790526001600160401b03841660448201526001600160a01b0390911690636e5d6ad2906064016020604051808303816000875af11580156111ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ee9190611cbe565b50816001600160401b0316818c8c60405161120a929190611cd9565b604051908190038120907f0ef7ed3ee7f05ff559c931645cd3d52e8630d6ae2ef04acb8c6ce1fe2469fd4490600090a4803411156112565761125661124f8234611b4d565b3390611369565b505050505050505050505050565b61126c61130f565b6001600160a01b0381166112d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105e8565b61071b81611487565b60006001600160e01b031982166306c255bd60e51b14806104a757506301ffc9a760e01b6001600160e01b03198316146104a7565b6000546001600160a01b031633146107d25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105e8565b804710156113b95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016105e8565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611406576040519150601f19603f3d011682016040523d82523d6000602084013e61140b565b606091505b50509050806114825760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016105e8565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060600080836000815181106114ef576114ef611b82565b0160200151845160f89190911c91508110801561150c5750600081115b61151557600080fd5b6000816001600160401b0381111561152f5761152f611ce9565b6040519080825280601f01601f191660200182016040528015611559576020820181803683370190505b50905060005b828110156115c75785611573826001611c62565b8151811061158357611583611b82565b602001015160f81c60f81b8282815181106115a0576115a0611b82565b60200101906001600160f81b031916908160001a9053506115c081611cff565b905061155f565b5094909350915050565b600080600760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164b9190611d18565b90508061165c846305f5e100611b98565b6116669190611c9c565b9392505050565b600080835183106116c05760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e6473000060448201526064016105e8565b60008484815181106116d4576116d4611b82565b016020015160f81c90508015611700576116f9856116f3866001611c62565b836117e3565b9250611705565b600092505b61170f8185611c62565b61171a906001611c62565b9150509250929050565b6000806000611733858561166d565b9092509050816117a5576001855161174b9190611b4d565b84146117995760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d6500000060448201526064016105e8565b50600091506104a79050565b6117af8582611724565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b82516000906117f28385611c62565b11156117fd57600080fd5b5091016020012090565b508054600082559060005260206000209081019061071b9190611870565b828054828255906000526020600020908101928215611860579160200282015b82811115611860578235825591602001919060010190611845565b5061186c929150611870565b5090565b5b8082111561186c5760008155600101611871565b60006020828403121561189757600080fd5b81356001600160e01b03198116811461166657600080fd5b6001600160a01b038116811461071b57600080fd5b6000602082840312156118d657600080fd5b8135611666816118af565b6000602082840312156118f357600080fd5b5035919050565b60008060006060848603121561190f57600080fd5b833561191a816118af565b9250602084013561192a816118af565b929592945050506040919091013590565b60008083601f84011261194d57600080fd5b5081356001600160401b0381111561196457600080fd5b60208301915083602082850101111561197c57600080fd5b9250929050565b60008060006040848603121561199857600080fd5b83356001600160401b038111156119ae57600080fd5b6119ba8682870161193b565b909790965060209590950135949350505050565b600080604083850312156119e157600080fd5b823561ffff811681146119f357600080fd5b946020939093013593505050565b60008060008060608587031215611a1757600080fd5b84356001600160401b03811115611a2d57600080fd5b611a398782880161193b565b9095509350506020850135611a4d816118af565b9396929550929360400135925050565b60008060208385031215611a7057600080fd5b82356001600160401b0380821115611a8757600080fd5b818501915085601f830112611a9b57600080fd5b813581811115611aaa57600080fd5b8660208260051b8501011115611abf57600080fd5b60209290920196919550909350505050565b600080600080600060808688031215611ae957600080fd5b8535945060208601356001600160401b03811115611b0657600080fd5b611b128882890161193b565b9095509350506040860135611b26816118af565b949793965091946060013592915050565b634e487b7160e01b600052601160045260246000fd5b818103818111156104a7576104a7611b37565b600060208284031215611b7257600080fd5b8151801515811461166657600080fd5b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176104a7576104a7611b37565b60006001600160fb1b03831115611bc557600080fd5b8260051b80858437919091019392505050565b600060208284031215611bea57600080fd5b8151611666816118af565b80516001600160401b0381168114611c0c57600080fd5b919050565b600080600060608486031215611c2657600080fd5b8351611c31816118af565b602085015190935063ffffffff81168114611c4b57600080fd5b9150611c5960408501611bf5565b90509250925092565b808201808211156104a7576104a7611b37565b6001600160401b03828116828216039080821115611c9557611c95611b37565b5092915050565b600082611cb957634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611cd057600080fd5b61166682611bf5565b8183823760009101908152919050565b634e487b7160e01b600052604160045260246000fd5b600060018201611d1157611d11611b37565b5060010190565b600060208284031215611d2a57600080fd5b505191905056fea2646970667358221220e99e987b8728d7f4414c57282d91a7a2f0b44e14c72551671502f94698b8ff5e64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addNextNameWrapperVersion(address)": {
        "params": {
          "_nameWrapper": "The next version of the NameWrapper"
        }
      },
      "addNextPriceForCharLength(uint256)": {
        "params": {
          "amount": "The amount in USD/sec. (with 18 digits of precision)  for a character count, e.g. amount for three characters."
        }
      },
      "getLastCharIndex()": {
        "returns": {
          "_0": "The length of the last character length that was set."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverFunds(address,address,uint256)": {
        "details": "The contract is Ownable and only the owner can call the recover function.",
        "params": {
          "_amount": "The amount of tokens to recover.",
          "_to": "The address to send the tokens to.",
          "_token": "The address of the ERC20 token to recover"
        }
      },
      "renew(bytes,address,uint256)": {
        "details": "Function to renew a name for a specified duration. ",
        "params": {
          "duration": "The duration for which the name should be renewed in years.",
          "name": "The name to be renewed in DNS format."
        }
      },
      "renewWithVersions(uint256,bytes,address,uint256)": {
        "details": "This function is allows for the upgradeing of the NameWrapper and SubnameWrapper contracts. It is not possible to know what the interface of the upgarded contracts will be, so we assume that they will be compatible with the current version of the contracts.",
        "params": {
          "duration": "The duration for which the name should be renewed in years.",
          "name": "The name to be renewed in DNS format.",
          "nameWrapperV": "The version of the NameWrapper."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rentPrice(bytes,uint256)": {
        "params": {
          "duration": "The amount of time the name will be rented for/extended in years. ",
          "name": "The name in DNS format, e.g. vault.vitalik.eth"
        },
        "returns": {
          "_0": "The rent price for the duration in Wei, and USD. "
        }
      },
      "setOwnerCut(uint256)": {
        "params": {
          "_ownerCut": "The cut for the owner of the contract."
        }
      },
      "setPricingForAllLengths(uint256[])": {
        "params": {
          "_charAmounts": "An array of amounst for each characer length."
        }
      },
      "setReferrerCut(uint256)": {
        "params": {
          "_referrerCut": "The percentage cut given to the referrer (0-10%)."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID`"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOracle(address)": {
        "params": {
          "_usdOracle": "The oracle address."
        }
      },
      "updatePriceForCharLength(uint16,uint256)": {
        "params": {
          "charAmount": "The amount in USD/year for a character count, e.g. amount for three characters.",
          "charLength": "The character length, e.g. 3 would be for three characters. Use 0 for the default amount."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNextNameWrapperVersion(address)": {
        "notice": "If the NameWrapper smart contract is upgraded, add the new version."
      },
      "addNextPriceForCharLength(uint256)": {
        "notice": "Adds a price for the next character length, e.g. three characters."
      },
      "getLastCharIndex()": {
        "notice": "Get the last length for a character length that has a price (can be 0), e.g. three characters."
      },
      "recoverFunds(address,address,uint256)": {
        "notice": "Recover ERC20 tokens sent to the contract by mistake."
      },
      "renewWithVersions(uint256,bytes,address,uint256)": {
        "notice": "Function to renew a name for a specified duration. "
      },
      "rentPrice(bytes,uint256)": {
        "notice": "Gets the total cost of rent in wei, from the unitPrice, i.e. USD, and duration."
      },
      "setOwnerCut(uint256)": {
        "notice": "A function to set the cut for the owner of the contract."
      },
      "setPricingForAllLengths(uint256[])": {
        "notice": "Set the pricing for subname lengths."
      },
      "setReferrerCut(uint256)": {
        "notice": "A function to set the referrer cut percentage for a specific referrer."
      },
      "updateOracle(address)": {
        "notice": "Sets the oracle address."
      },
      "updatePriceForCharLength(uint16,uint256)": {
        "notice": "Set a price for a single character length, e.g. three characters."
      },
      "withdraw()": {
        "notice": "A function to allow referrers, name owners, or the contract owner to withdraw."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56450,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 320,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 324,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "referrerCuts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 326,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "totalBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 328,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "ownerCut",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4379,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "nameWrappers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7180,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "charAmounts",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7183,
        "contract": "contracts/layertwo/optimism/wrapper/renewalControllers/L2PricePerCharRenewalController.sol:L2PricePerCharRenewalController",
        "label": "usdOracle",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IAggregatorInterface)6144"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(IAggregatorInterface)6144": {
        "encoding": "inplace",
        "label": "contract IAggregatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}