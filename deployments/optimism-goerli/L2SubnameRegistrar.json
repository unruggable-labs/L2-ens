{
  "address": "0xa393f704Abc042764b604e239Ab787aB7c599a8e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxCommitmentAge",
          "type": "uint256"
        },
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract IL2NameWrapper",
          "name": "_nameWrapper",
          "type": "address"
        },
        {
          "internalType": "contract IAggregatorInterface",
          "name": "_usdOracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotSetNewCharLengthAmounts",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "CommitmentTooNew",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "CommitmentTooOld",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "DurationTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "InvalidDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxCommitmentAgeTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxCommitmentAgeTooLow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "NameNotAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "UnauthorizedAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "UnexpiredCommitmentExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "WrongNumberOfChars",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AddressWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ownerCut",
          "type": "uint256"
        }
      ],
      "name": "OwnerCutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "referrerCut",
          "type": "uint256"
        }
      ],
      "name": "ReferrerCutSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "SubnameRegistered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_REGISTRATION_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "charAmount",
          "type": "uint256"
        }
      ],
      "name": "addNextPriceForCharLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "allowList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowListDisabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_name",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "allowName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        }
      ],
      "name": "commit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "commitments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableAllowList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        }
      ],
      "name": "getLastCharIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "charLength",
          "type": "uint16"
        }
      ],
      "name": "getPriceDataForLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        }
      ],
      "name": "makeCommitment",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCommitmentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minCommitmentAge",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nameWrapper",
      "outputs": [
        {
          "internalType": "contract IL2NameWrapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerCut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pricingData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "offerSubnames",
          "type": "bool"
        },
        {
          "internalType": "contract IRenewalController",
          "name": "renewalController",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "minRegistrationDuration",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxRegistrationDuration",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "minChars",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "maxChars",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerCuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "secret",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "rentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weiPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "usdPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_offerSubnames",
          "type": "bool"
        }
      ],
      "name": "setOfferSubnames",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ownerCut",
          "type": "uint256"
        }
      ],
      "name": "setOwnerCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_offerSubnames",
          "type": "bool"
        },
        {
          "internalType": "contract IRenewalController",
          "name": "_renewalController",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_minRegistrationDuration",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_maxRegistrationDuration",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minChars",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_maxChars",
          "type": "uint16"
        }
      ],
      "name": "setParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "_charAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "setPricingForAllLengths",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_referrerCut",
          "type": "uint256"
        }
      ],
      "name": "setReferrerCut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "charLength",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "charAmount",
          "type": "uint256"
        }
      ],
      "name": "updatePriceForCharLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdOracle",
      "outputs": [
        {
          "internalType": "contract IAggregatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe3bb93357d9e87961adfcabe0968c08e4ecd43e26813aa9b48417d913e89061b",
  "receipt": {
    "to": null,
    "from": "0xFC04D70bea992Da2C67995BbddC3500767394513",
    "contractAddress": "0xa393f704Abc042764b604e239Ab787aB7c599a8e",
    "transactionIndex": 1,
    "gasUsed": "2700206",
    "logsBloom": "0x
    "blockHash": "0x8cd708a76b5e187859269179b542f281dbc5656e06ea1082e3ea041841bdb47f",
    "transactionHash": "0xe3bb93357d9e87961adfcabe0968c08e4ecd43e26813aa9b48417d913e89061b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13374784,
        "transactionHash": "0xe3bb93357d9e87961adfcabe0968c08e4ecd43e26813aa9b48417d913e89061b",
        "address": "0xa393f704Abc042764b604e239Ab787aB7c599a8e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc04d70bea992da2c67995bbddc3500767394513"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8cd708a76b5e187859269179b542f281dbc5656e06ea1082e3ea041841bdb47f"
      }
    ],
    "blockNumber": 13374784,
    "cumulativeGasUsed": "2747071",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5,
    604800,
    "0xffED83BDBd2F9906Ac12467288946cf7d8F6f599",
    "0x650E2705c595Ddb5f8e0B76fC3295F252f8aabB8",
    "0x1CF25555Eb74b587b4b3d9019d6Bf279E9920d25"
  ],
  "numDeployments": 2,
  "solcInputHash": "09411f6041dce78a34f63327b23de149",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxCommitmentAge\",\"type\":\"uint256\"},{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract IL2NameWrapper\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"contract IAggregatorInterface\",\"name\":\"_usdOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotSetNewCharLengthAmounts\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"CommitmentTooNew\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"CommitmentTooOld\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"DurationTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitmentAgeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxCommitmentAgeTooLow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"NameNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"UnauthorizedAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"UnexpiredCommitmentExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"WrongNumberOfChars\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AddressWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ownerCut\",\"type\":\"uint256\"}],\"name\":\"OwnerCutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"referrerCut\",\"type\":\"uint256\"}],\"name\":\"ReferrerCutSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"SubnameRegistered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_REGISTRATION_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"charAmount\",\"type\":\"uint256\"}],\"name\":\"addNextPriceForCharLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"allowList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowListDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_name\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"allowName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"commitments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllowList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"}],\"name\":\"getLastCharIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"charLength\",\"type\":\"uint16\"}],\"name\":\"getPriceDataForLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"}],\"name\":\"makeCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minCommitmentAge\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nameWrapper\",\"outputs\":[{\"internalType\":\"contract IL2NameWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerCut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pricingData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"offerSubnames\",\"type\":\"bool\"},{\"internalType\":\"contract IRenewalController\",\"name\":\"renewalController\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minRegistrationDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxRegistrationDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minChars\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxChars\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerCuts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"rentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weiPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_offerSubnames\",\"type\":\"bool\"}],\"name\":\"setOfferSubnames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerCut\",\"type\":\"uint256\"}],\"name\":\"setOwnerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_offerSubnames\",\"type\":\"bool\"},{\"internalType\":\"contract IRenewalController\",\"name\":\"_renewalController\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minRegistrationDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_maxRegistrationDuration\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minChars\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_maxChars\",\"type\":\"uint16\"}],\"name\":\"setParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"_charAmounts\",\"type\":\"uint256[]\"}],\"name\":\"setPricingForAllLengths\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_referrerCut\",\"type\":\"uint256\"}],\"name\":\"setReferrerCut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"charLength\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"charAmount\",\"type\":\"uint256\"}],\"name\":\"updatePriceForCharLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdOracle\",\"outputs\":[{\"internalType\":\"contract IAggregatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A registrar controller for registering and renewing names at fixed cost.\",\"kind\":\"dev\",\"methods\":{\"addNextPriceForCharLength(bytes32,uint256)\":{\"params\":{\"charAmount\":\"The amount in USD/sec. (with 18 digits of precision)  for a character count, e.g. amount for three characters.\",\"parentNode\":\"The namehash of the parent name.\"}},\"allowName(bytes,bool)\":{\"params\":{\"_allow\":\"A bool indicating if the name is allowed to be listed.\",\"_name\":\"The name in DNS format, e.g. vitalik.eth\"}},\"available(bytes)\":{\"params\":{\"name\":\"The full name, in DNS format wherein the length precedes each label and is terminted with a 0x0 byte, e.g. \\\"cb.id\\\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].\"}},\"getLastCharIndex(bytes32)\":{\"returns\":{\"_0\":\"The length of the last character length that was set.\"}},\"getPriceDataForLength(bytes32,uint16)\":{\"params\":{\"charLength\":\"The character length, e.g. 3 would be for three characters. Use 0 for the default amount.\",\"parentNode\":\"The namehash of the parent name.\"}},\"makeCommitment(bytes,address,bytes32)\":{\"params\":{\"name\":\"The full name, in DNS format wherein the length precedes each label and is terminted with a 0x0 byte, e.g. \\\"cb.id\\\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].\",\"owner\":\"The address that will own the name.\",\"secret\":\"The secret to be used for the commitment.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverFunds(address,address,uint256)\":{\"details\":\"The contract is Ownable and only the owner can call the recover function.\",\"params\":{\"_amount\":\"The amount of tokens to recover.\",\"_to\":\"The address to send the tokens to.\",\"_token\":\"The address of the ERC20 token to recover\"}},\"register(bytes,address,address,uint256,bytes32,address,uint32)\":{\"params\":{\"duration\":\"The duration in seconds of the registration.\",\"fuses\":\"The fuses to be set on the name.\",\"name\":\"The full name, in DNS format.\",\"owner\":\"The address that will own the name.\",\"referrer\":\"The address that referred the owner to the registrar.\",\"resolver\":\"The address of the resolver to use.\",\"secret\":\"The secret to be used for the commitment.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"rentPrice(bytes,uint256)\":{\"params\":{\"duration\":\"The amount of time the name will be rented for/extended in years. \",\"name\":\"The name in DNS format, e.g. vault.vitalik.eth\"},\"returns\":{\"usdPrice\":\"The rent price for the duration in USD \",\"weiPrice\":\"The rent price for the duration in Wei \"}},\"setOfferSubnames(bytes32,bool)\":{\"params\":{\"_offerSubnames\":\"A bool indicating the parent name owner is offering subnames.\",\"parentNode\":\"The namehash of the parent name.\"}},\"setOwnerCut(uint256)\":{\"params\":{\"_ownerCut\":\"The cut for the owner of the contract.\"}},\"setParams(bytes32,bool,address,uint64,uint64,uint16,uint16)\":{\"params\":{\"_maxChars\":\"The maximum length a name can be.\",\"_maxRegistrationDuration\":\"The maximum duration a name can be registered for.\",\"_minChars\":\"The minimum length a name can be.\",\"_minRegistrationDuration\":\"The minimum duration a name can be registered for.\",\"_offerSubnames\":\"A bool indicating the parent name owner is offering subnames.\",\"_renewalController\":\"The address of the renewal controller.\",\"parentNode\":\"The namehash of the parent name.\"}},\"setPricingForAllLengths(bytes32,uint256[])\":{\"params\":{\"_charAmounts\":\"An array of amounst for each characer length.\",\"parentNode\":\"The namehash of the parent name.\"}},\"setReferrerCut(uint256)\":{\"params\":{\"_referrerCut\":\"The percentage cut given to the referrer (0-10%).\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePriceForCharLength(bytes32,uint16,uint256)\":{\"params\":{\"charAmount\":\"The amount in USD/year for a character count, e.g. amount for three characters.\",\"charLength\":\"The character length, e.g. 3 would be for three characters. Use 0 for the default amount.\",\"parentNode\":\"The namehash of the parent name.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addNextPriceForCharLength(bytes32,uint256)\":{\"notice\":\"Adds a price for the next character length, e.g. three characters.\"},\"allowName(bytes,bool)\":{\"notice\":\"Add a name to the allow list.\"},\"available(bytes)\":{\"notice\":\"Check to see if the name is available for registration. \"},\"disableAllowList()\":{\"notice\":\"Disable the allow list permanenty.\"},\"getLastCharIndex(bytes32)\":{\"notice\":\"Get the last length for a character length that has a price (can be 0), e.g. three characters.\"},\"getPriceDataForLength(bytes32,uint16)\":{\"notice\":\"Get the price for a single character length, e.g. three characters.\"},\"makeCommitment(bytes,address,bytes32)\":{\"notice\":\"Check to see if the name is available for registration. \"},\"recoverFunds(address,address,uint256)\":{\"notice\":\"Recover ERC20 tokens sent to the contract by mistake.\"},\"register(bytes,address,address,uint256,bytes32,address,uint32)\":{\"notice\":\"Register a name.\"},\"rentPrice(bytes,uint256)\":{\"notice\":\"Gets the total cost of rent in wei, from the unitPrice, i.e. USD, and duration.\"},\"setOfferSubnames(bytes32,bool)\":{\"notice\":\"Allows for chaning the offer status of subnames to true or false.\"},\"setOwnerCut(uint256)\":{\"notice\":\"A function to set the cut for the owner of the contract.\"},\"setParams(bytes32,bool,address,uint64,uint64,uint16,uint16)\":{\"notice\":\"Set the pricing for subnames of the parent name.\"},\"setPricingForAllLengths(bytes32,uint256[])\":{\"notice\":\"Set the pricing for subname lengths.\"},\"setReferrerCut(uint256)\":{\"notice\":\"A function to set the referrer cut percentage for a specific referrer.\"},\"updatePriceForCharLength(bytes32,uint16,uint256)\":{\"notice\":\"Set a price for a single character length, e.g. three characters.\"},\"withdraw()\":{\"notice\":\"A function to allow referrers, name owners, or the contract owner to withdraw.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol\":\"L2SubnameRegistrar\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":buffer/=lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":optimism/=contracts/layertwo/optimism/\",\":unruggable-protocol/=lib/unruggable-protocol/\",\":xap-contracts/=lib/xap/contracts/\"]},\"sources\":{\"contracts/layertwo/optimism/wrapper/Balances.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {Address} from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\n\\nabstract contract Balances is Ownable {\\n\\n    using Address for address payable;\\n\\n    event OwnerCutSet(uint256 indexed ownerCut);\\n    event ReferrerCutSet(uint256 indexed referrerCut);\\n    event AddressWithdrew(address indexed _address, uint256 indexed amount);\\n\\n    // A mapping to store the balance of each referrer.\\n    mapping (address => uint256) public balances;\\n\\n    // A mapping to store the referrer cut percentage for each referrer.\\n    mapping (address => uint256) public referrerCuts;\\n\\n    // A variable to store the total balance of all referrers.\\n    uint256 public totalBalance;\\n\\n    // The cut taken by the owner of the contract.\\n    uint256 public ownerCut;\\n\\n    constructor() {\\n        // Default cut is 2% (200/10000).\\n        ownerCut = 200;  \\n    }\\n        \\n    /**\\n     * @notice A function to allow referrers, name owners, or the contract owner to withdraw.\\n     */\\n\\n    function withdraw() public {\\n\\n        //get the address of the sender\\n        address payable sender = payable(msg.sender);\\n        \\n        // Withdraw the owner's balance if the sender is the contract owner.\\n        if(sender == owner()) { \\n\\n            // Calculate the amount that can be withdrawn.\\n            uint256 ownerAmount = address(this).balance - totalBalance;\\n\\n            require(ownerAmount > 0, \\\"Owner balance is 0\\\");\\n            \\n            emit AddressWithdrew(sender, ownerAmount);\\n\\n            // Send the amount to the contract owner's address.\\n            sender.sendValue(ownerAmount);\\n\\n        } else { \\n\\n            // Require that the senders balance is greater than 0.\\n            require(balances[sender] > 0, \\\"Address's balance is 0\\\");\\n\\n            // Calculate the amount that the sender can withdraw\\n            uint256 amount = balances[sender];\\n\\n            // Set the sender balance to 0.\\n            balances[sender] = 0;\\n\\n            // Decrease the total referrer balance.\\n            totalBalance -= amount;\\n\\n            emit AddressWithdrew(sender, amount);\\n\\n            // Send the amount to the address.\\n            sender.sendValue(amount);\\n        }\\n    }\\n\\n    /**\\n    * @notice A function to set the cut for the owner of the contract.\\n    * @param _ownerCut The cut for the owner of the contract.\\n    */\\n\\n    function setOwnerCut(uint256 _ownerCut) public {\\n        require(msg.sender == owner(), \\\"Only the owner can set the cut\\\");\\n        require(_ownerCut <= 500, \\\"Owner cut cannot be more than 5%\\\");\\n        ownerCut = _ownerCut;\\n        emit OwnerCutSet(_ownerCut);\\n    }\\n\\n    /**\\n     * @notice A function to set the referrer cut percentage for a specific referrer.\\n     * @param _referrerCut The percentage cut given to the referrer (0-10%).\\n     */\\n\\n    function setReferrerCut(uint _referrerCut) public {\\n        require(_referrerCut <= 1000, \\\"Referrer cut cannot be more than 10%\\\");\\n        referrerCuts[msg.sender] = _referrerCut;\\n        emit ReferrerCutSet(_referrerCut);\\n    } \\n}\",\"keccak256\":\"0xca44837231ac89c333241f532cf4836a1100277bbd037a9b684441275ed86abc\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/BytesUtilsSub.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nlibrary BytesUtilsSub {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(bytes memory self, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(bytes memory self, uint256 idx)\\n        internal\\n        pure\\n        returns (bytes32 labelhash, uint256 newIdx)\\n    {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n\\n    /**\\n     * @dev This function takes a bytes input which represents the DNS name and\\n     * returns the first label of a domain name in DNS format.\\n     * @param domain The domain in DNS format wherein the length precedes each label\\n     * and is terminted with a 0x0 byte, e.g. \\\"cb.id\\\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].\\n     * @return string memory the first label.\\n     */\\n\\n    function getFirstLabel(bytes memory domain) internal pure returns (string memory, uint256) {\\n\\n        // Get the first byte of the domain which represents the length of the first label\\n        uint256 labelLength = uint256(uint8(domain[0]));\\n\\n        // Check to make sure the label length is less than the domain length and greater than zero. \\n        require(labelLength < domain.length && labelLength > 0);\\n\\n        // Create a new byte array to hold the first label\\n        bytes memory firstLabel = new bytes(labelLength);\\n\\n        // Iterate through the domain bytes to copy the first label to the new byte array\\n        // skipping the first byte which represents the length of the first label.\\n        for (uint256 i = 0; i < labelLength; ++i) {\\n            firstLabel[i] = domain[i+1];\\n        }\\n\\n        // Convert the first label to string and return, with the length of the first label.\\n        return (string(firstLabel), labelLength);\\n    }\\n\\n    /**\\n     * @dev This function takes a bytes input which represents the DNS name and\\n     * returns the TLD (last label) of a domain name. A domain can have a maximum of 10 labels.\\n     * @param domain bytes memory.\\n     * @return string memory the TLD.\\n     */\\n\\n    function getTLD(bytes memory domain) internal pure returns (string memory) {\\n        // Variable used to keep track of the level count.\\n\\n        uint levels = 0;\\n        // Variable used to keep track of the index of each length byte.\\n\\n        // Iterate through the domain bytes. \\n        for (uint i = 0; i < domain.length; i++) {\\n\\n            // If level count exceed 10, break the loop.\\n            if (levels > 10) {\\n                break;\\n            }\\n\\n            // Get the label length from the current byte.\\n            uint labelLength = uint(uint8(domain[i]));\\n\\n            // Check to make sure we have found the terminal byte and it is equal to zero.\\n            if(i + labelLength + 2 == domain.length && domain[labelLength + i + 1] == 0) {\\n\\n                // Create a new byte array to hold the TLD.\\n                bytes memory lastLabel = new bytes(labelLength);\\n\\n                // Copy the TLD from the domain array to the new byte array.\\n                for (uint j = 0; j < labelLength; j++) {\\n                    lastLabel[j] = domain[i + 1 + j];\\n                }\\n\\n                // Convert the TLD to string and return.\\n                return string(lastLabel);\\n            }\\n\\n            // Move to the next label\\n            i += labelLength;\\n\\n            // Increment the level count.\\n            levels++;\\n        }\\n\\n        // Revert if TLD not found.\\n        revert(\\\"TLD not found\\\");\\n    }\\n}\",\"keccak256\":\"0xbd70dd8fe5f4c96b82049267f5a332c6c97bff8c2c8c014ceaa7f52f80a16aa2\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {StringUtils} from \\\"ens-contracts/ethregistrar/StringUtils.sol\\\";\\nimport {ISubnameRegistrar} from \\\"optimism/wrapper/interfaces/ISubnameRegistrar.sol\\\";\\nimport {ENS} from \\\"ens-contracts/registry/ENS.sol\\\";\\nimport {Ownable} from \\\"openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {ERC165} from \\\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\nimport {Address} from \\\"openzeppelin-contracts/contracts/utils/Address.sol\\\";\\nimport {IL2NameWrapper, CANNOT_UNWRAP, PARENT_CANNOT_CONTROL, CAN_EXTEND_EXPIRY} from \\\"optimism/wrapper/interfaces/IL2NameWrapper.sol\\\";\\nimport {ERC20Recoverable} from \\\"ens-contracts/utils/ERC20Recoverable.sol\\\";\\nimport {BytesUtilsSub} from \\\"optimism/wrapper/BytesUtilsSub.sol\\\";\\nimport {IAggregatorInterface} from \\\"optimism/wrapper/interfaces/IAggregatorInterface.sol\\\";\\nimport {Balances} from \\\"optimism/wrapper/Balances.sol\\\";\\nimport {IRenewalController} from \\\"optimism/wrapper/interfaces/IRenewalController.sol\\\";\\n\\nerror CommitmentTooNew(bytes32 commitment);\\nerror CommitmentTooOld(bytes32 commitment);\\nerror NameNotAvailable(bytes name);\\nerror DurationTooShort(uint256 duration);\\nerror ResolverRequiredWhenDataSupplied();\\nerror UnexpiredCommitmentExists(bytes32 commitment);\\nerror InsufficientValue();\\nerror UnauthorizedAddress(bytes32 node);\\nerror MaxCommitmentAgeTooLow();\\nerror MaxCommitmentAgeTooHigh();\\nerror WrongNumberOfChars(string label);\\nerror NoPricingData();\\nerror CannotSetNewCharLengthAmounts();\\nerror InvalidDuration(uint256 duration);\\n\\n/**\\n * @dev A registrar controller for registering and renewing names at fixed cost.\\n */\\ncontract L2SubnameRegistrar is\\n    Ownable,\\n    ISubnameRegistrar,\\n    ERC165,\\n    ERC20Recoverable,\\n    Balances\\n{\\n    using StringUtils for *;\\n\\n    using Address for address payable;\\n    using BytesUtilsSub for bytes;\\n\\n    uint256 public constant MIN_REGISTRATION_DURATION = 28 days;\\n    bytes32 private constant ETH_NODE =\\n        0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\n    uint256 public immutable minCommitmentAge;\\n    uint256 public immutable maxCommitmentAge;\\n    IL2NameWrapper public immutable nameWrapper;\\n    ENS public immutable ens;\\n\\n    // Chainlink oracle address\\n    IAggregatorInterface public immutable usdOracle;\\n\\n    // A struct holding the pricing for renewals.\\n    // This allows for different pricing for different lengths names. \\n    struct Pricing {\\n        bool offerSubnames; \\n        IRenewalController renewalController;\\n        uint64 minRegistrationDuration;\\n        uint64 maxRegistrationDuration;\\n        uint16 minChars;\\n        uint16 maxChars;\\n        uint256[] charAmounts;\\n    }\\n    \\n    mapping(bytes32 => uint256) public commitments;\\n\\n    // The pricing data for each parent node.\\n    mapping(bytes32=>Pricing) public pricingData;\\n\\n    // An allow list of parent nodes that can register subnames.\\n    mapping(bytes32 => bool) public allowList;\\n\\n    // Permanently disable the allow list.\\n    bool public allowListDisabled; \\n\\n    constructor(\\n        uint256 _minCommitmentAge,\\n        uint256 _maxCommitmentAge,\\n        ENS _ens,\\n        IL2NameWrapper _nameWrapper,\\n        IAggregatorInterface _usdOracle\\n    ) {\\n        if (_maxCommitmentAge <= _minCommitmentAge) {\\n            revert MaxCommitmentAgeTooLow();\\n        }\\n\\n        if (_maxCommitmentAge > block.timestamp) {\\n            revert MaxCommitmentAgeTooHigh();\\n        }\\n\\n        minCommitmentAge = _minCommitmentAge;\\n        maxCommitmentAge = _maxCommitmentAge;\\n        ens = _ens;\\n        nameWrapper = _nameWrapper;\\n\\n        // Default cut is 2% (200/10000).\\n        ownerCut = 200;  \\n\\n        // Set the oracle address.\\n        usdOracle = _usdOracle;\\n\\n    }\\n\\n    /**\\n     * @notice Gets the total cost of rent in wei, from the unitPrice, i.e. USD, and duration.\\n     * @param name The name in DNS format, e.g. vault.vitalik.eth\\n     * @param duration The amount of time the name will be rented for/extended in years. \\n     * @return weiPrice The rent price for the duration in Wei \\n     * @return usdPrice The rent price for the duration in USD \\n     */\\n\\n    function rentPrice(bytes calldata name, uint256 duration)\\n        public\\n        view\\n        returns (uint256 weiPrice, uint256 usdPrice) \\n    {\\n\\n        ( , uint256 labelLength) = name.getFirstLabel();\\n        bytes32 parentNode = name.namehash(labelLength+1);\\n\\n        // Get the length of the charAmounts array.\\n        uint256 charAmountsLength = pricingData[parentNode].charAmounts.length;\\n\\n        // The price of the length of the label in USD/sec. (with 18 digits of precision).\\n        uint256 unitPrice;\\n        \\n        if (charAmountsLength > 0) {\\n            // Check to make sure the price for labelLength exists.\\n            // If not use the default price charAmounts[0].\\n            if(labelLength < charAmountsLength){\\n\\n                // Get the unit price, i.e. the price in USD/sec, for the length of\\n                // the label. If there is not a price set then use the defualt amount.  \\n                unitPrice = pricingData[parentNode].charAmounts[labelLength];\\n\\n                // If the unit price is 0 then use the default amount.\\n                if (unitPrice == 0){ \\n                    unitPrice = pricingData[parentNode].charAmounts[0];\\n                } \\n\\n            } else {\\n\\n                // Get the unit price, i.e. the price in USD/sec using the defualt amount.  \\n                unitPrice = pricingData[parentNode].charAmounts[0];\\n\\n            }\\n        } else {\\n            //If there is no pricing data, set the price to 0.\\n            unitPrice = 0;\\n        }\\n\\n        // Convert the unit price from USD to Wei.\\n        return (usdToWei(unitPrice * duration), unitPrice * duration);\\n    }\\n\\n    /**\\n     * @notice Add a name to the allow list.\\n     * @param _name The name in DNS format, e.g. vitalik.eth\\n     * @param _allow A bool indicating if the name is allowed to be listed.\\n    */\\n\\n    function allowName(bytes calldata _name, bool _allow) public onlyOwner {\\n\\n        // Get the namehash of the label.\\n        bytes32 node = _name.namehash(0);\\n\\n        // Add the name to the allow list.\\n        allowList[node] = _allow;\\n    } \\n\\n    /**\\n     * @notice Disable the allow list permanenty.\\n     */\\n\\n    function disableAllowList() public onlyOwner {\\n        allowListDisabled = true;\\n    }\\n\\n    /**\\n     * @notice checkes to see if the length of the name is greater than the min. and less than the max.\\n     * @param node Namehash of the name\\n     * @param label Label as a string, e.g. \\\"vault\\\" or vault.vitalik.eth.\\n     */\\n\\n    function validLength(bytes32 node, string memory label) internal view returns (bool){\\n\\n        //NTS: Make sure to check what happens when string label is missing or zero length\\n\\n        // The name is valid if the number of characters of the label is greater than the \\n        // minimum and the less than the maximum or the maximum is 0, return true.  \\n        if (label.strlen() >= pricingData[node].minChars){\\n\\n            // If the maximum characters is set then check to make sure the label is \\n            // shorter or equal to it.  \\n            if (pricingData[node].maxChars != 0 && label.strlen() > pricingData[node].maxChars){\\n                return false; \\n            } else {\\n                return true;\\n            }\\n        } else {\\n            return false; \\n        }\\n    }\\n\\n    /**\\n     * @notice Set the pricing for subnames of the parent name.\\n     * @param parentNode The namehash of the parent name.\\n     * @param _offerSubnames A bool indicating the parent name owner is offering subnames.\\n     * @param _renewalController The address of the renewal controller.\\n     * @param _minRegistrationDuration The minimum duration a name can be registered for.\\n     * @param _maxRegistrationDuration The maximum duration a name can be registered for.\\n     * @param _minChars The minimum length a name can be.\\n     * @param _maxChars The maximum length a name can be.\\n     */\\n     \\n     function setParams(\\n        bytes32 parentNode,\\n        bool _offerSubnames,\\n        IRenewalController _renewalController,\\n        uint64 _minRegistrationDuration, \\n        uint64 _maxRegistrationDuration,\\n        uint16 _minChars,\\n        uint16 _maxChars\\n    ) public{\\n\\n        // If the allow list is being used then check to make sure the caller is on the allow list.\\n        if (!allowListDisabled && !allowList[parentNode]){\\n            revert UnauthorizedAddress(parentNode);\\n        }\\n\\n        // Check to make sure the caller is authorised and the parentNode is wrapped in the \\n        // Name Wrapper contract and the CANNOT_UNWRAP and PARENT_CANNOT_CONTROL fuses are burned. \\n        if (!nameWrapper.canModifyName(parentNode, msg.sender) ||\\n            !nameWrapper.allFusesBurned(parentNode, CANNOT_UNWRAP | PARENT_CANNOT_CONTROL)){\\n            revert UnauthorizedAddress(parentNode);\\n        }\\n\\n        // Set the pricing for subnames of the parent node.\\n        pricingData[parentNode].offerSubnames = _offerSubnames;\\n        pricingData[parentNode].renewalController = _renewalController;\\n        pricingData[parentNode].minRegistrationDuration = _minRegistrationDuration;\\n        pricingData[parentNode].maxRegistrationDuration = _maxRegistrationDuration;\\n        pricingData[parentNode].minChars = _minChars;\\n        pricingData[parentNode].maxChars = _maxChars;\\n    }\\n\\n    /**\\n    * @notice Set the pricing for subname lengths.\\n    * @param parentNode The namehash of the parent name.\\n    * @param _charAmounts An array of amounst for each characer length.\\n    */  \\n\\n     function setPricingForAllLengths(\\n        bytes32 parentNode,\\n        uint256[] calldata _charAmounts\\n    ) public {\\n\\n        // Check to make sure the caller is authorised and the parentNode is wrapped in the \\n        // Name Wrapper contract and the CANNOT_UNWRAP and PARENT_CANNOT_CONTROL fuses are burned. \\n        if (!nameWrapper.canModifyName(parentNode, msg.sender) ||\\n            !nameWrapper.allFusesBurned(parentNode, CANNOT_UNWRAP | PARENT_CANNOT_CONTROL)){\\n            revert UnauthorizedAddress(parentNode);\\n        }\\n\\n        // Clear the old dynamic array out\\n        delete pricingData[parentNode].charAmounts;\\n\\n        // Set the pricing for subnames of the parent node.\\n        pricingData[parentNode].charAmounts = _charAmounts;\\n        \\n    }\\n\\n    /**\\n     * @notice Get the price for a single character length, e.g. three characters.\\n     * @param parentNode The namehash of the parent name.\\n     * @param charLength The character length, e.g. 3 would be for three characters. Use 0 for the default amount.\\n     */\\n    function getPriceDataForLength(bytes32 parentNode, uint16 charLength) public view returns (uint256){\\n        return pricingData[parentNode].charAmounts[charLength];\\n    }\\n\\n    /**\\n     * @notice Set a price for a single character length, e.g. three characters.\\n     * @param parentNode The namehash of the parent name.\\n     * @param charLength The character length, e.g. 3 would be for three characters. Use 0 for the default amount.\\n     * @param charAmount The amount in USD/year for a character count, e.g. amount for three characters.\\n     */\\n    function updatePriceForCharLength(\\n        bytes32 parentNode,\\n        uint16 charLength,\\n        uint256 charAmount\\n    ) public {\\n\\n        // Check to make sure the caller is authorised and the parentNode is wrapped in the \\n        // Name Wrapper contract and the CANNOT_UNWRAP and PARENT_CANNOT_CONTROL fuses are burned. \\n        if (!nameWrapper.canModifyName(parentNode, msg.sender) ||\\n            !nameWrapper.allFusesBurned(parentNode, CANNOT_UNWRAP | PARENT_CANNOT_CONTROL)){\\n            revert UnauthorizedAddress(parentNode);\\n        }\\n\\n        // Check that the charLength is not greater than the last index of the charAmounts array.\\n        if (charLength > pricingData[parentNode].charAmounts.length-1){\\n            revert CannotSetNewCharLengthAmounts();\\n        }\\n        pricingData[parentNode].charAmounts[charLength] = charAmount;\\n    }\\n\\n\\n    /**\\n     * @notice Adds a price for the next character length, e.g. three characters.\\n     * @param parentNode The namehash of the parent name.\\n     * @param charAmount The amount in USD/sec. (with 18 digits of precision) \\n     * for a character count, e.g. amount for three characters.\\n     */\\n    function addNextPriceForCharLength(\\n        bytes32 parentNode,\\n        uint256 charAmount\\n    ) public {\\n\\n        // Name Wrapper contract and the CANNOT_UNWRAP and PARENT_CANNOT_CONTROL fuses are burned. \\n        if (!nameWrapper.canModifyName(parentNode, msg.sender) ||\\n            !nameWrapper.allFusesBurned(parentNode, CANNOT_UNWRAP | PARENT_CANNOT_CONTROL)){\\n            revert UnauthorizedAddress(parentNode);\\n        }\\n\\n        pricingData[parentNode].charAmounts.push(charAmount);\\n    }\\n\\n    /**\\n     * @notice Get the last length for a character length that has a price (can be 0), e.g. three characters.\\n     * @return The length of the last character length that was set.\\n     */\\n    function getLastCharIndex(bytes32 parentNode) public view returns (uint256) {\\n        return pricingData[parentNode].charAmounts.length - 1;\\n    }\\n\\n    /**\\n     * @notice Allows for chaning the offer status of subnames to true or false.\\n     * @param parentNode The namehash of the parent name.\\n     * @param _offerSubnames A bool indicating the parent name owner is offering subnames.\\n     */\\n    function setOfferSubnames(\\n        bytes32 parentNode,\\n        bool _offerSubnames\\n    ) public {\\n\\n        // Check to make sure the caller is authorised and the parentNode is wrapped in the \\n        // Name Wrapper contract and the CANNOT_UNWRAP and PARENT_CANNOT_CONTROL fuses are burned. \\n        if (!nameWrapper.canModifyName(parentNode, msg.sender) ||\\n            !nameWrapper.allFusesBurned(parentNode, CANNOT_UNWRAP | PARENT_CANNOT_CONTROL)){\\n            revert UnauthorizedAddress(parentNode);\\n        }\\n\\n        pricingData[parentNode].offerSubnames = _offerSubnames;\\n    }\\n\\n    /**\\n     * @notice Check to see if the name is available for registration. \\n     * @param name The full name, in DNS format wherein the length precedes each label\\n     * and is terminted with a 0x0 byte, e.g. \\\"cb.id\\\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].\\n     */\\n\\n    function available(bytes memory name) public view returns (bool) {\\n\\n        (bytes32 labelhash, uint256 offset) = name.readLabel(0);\\n        bytes32 parentNode = name.namehash(offset);\\n        bytes32 node = _makeNode(parentNode, labelhash);\\n\\n        // Get the label from the _name. \\n        (string memory label, ) = name.getFirstLabel();\\n\\n        // The name is presumed to be available if it has not been registered\\n        // in the ENS registry and the parent is offering subnames. If the parent owner revokes\\n        // the authorization of this contract, then this function will still return true, but\\n        // registration will not be possible. \\n\\n        return validLength(node, label) && \\n            ens.owner(node) == address(0) &&\\n            pricingData[parentNode].offerSubnames;\\n\\n    }\\n\\n    /**\\n     * @notice Check to see if the name is available for registration. \\n     * @param name The full name, in DNS format wherein the length precedes each label\\n     * and is terminted with a 0x0 byte, e.g. \\\"cb.id\\\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].\\n     * @param owner The address that will own the name.\\n     * @param secret The secret to be used for the commitment.\\n     */\\n    function makeCommitment(\\n        bytes memory name,\\n        address owner,\\n        bytes32 secret\\n    ) public pure returns (bytes32) {\\n\\n        return\\n            keccak256(\\n                abi.encode(\\n                    name,\\n                    owner,\\n                    secret\\n                )\\n            );\\n    }\\n\\n    function commit(bytes32 commitment) public {\\n        if (commitments[commitment] + maxCommitmentAge >= block.timestamp) {\\n            revert UnexpiredCommitmentExists(commitment);\\n        }\\n        commitments[commitment] = block.timestamp;\\n    }\\n\\n    /**\\n     * @notice Register a name.\\n     * @param name The full name, in DNS format.\\n     * @param owner The address that will own the name.\\n     * @param referrer The address that referred the owner to the registrar.\\n     * @param duration The duration in seconds of the registration.\\n     * @param secret The secret to be used for the commitment.\\n     * @param resolver The address of the resolver to use.\\n     * @param fuses The fuses to be set on the name.\\n     */\\n\\n    function register(\\n        bytes calldata name,\\n        address owner,\\n        address referrer,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        uint32 fuses\\n    ) public payable {\\n\\n        bytes32 parentNode;\\n        bytes32 node;\\n\\n        // Create a block to solve a stack too deep error.\\n        {\\n            (bytes32 labelhash, uint256 offset) = name.readLabel(0);\\n            parentNode = name.namehash(offset);\\n            node = _makeNode(parentNode, labelhash);\\n        }\\n\\n        // Check to make sure the duration is between the min and max. \\n        if (duration < pricingData[parentNode].minRegistrationDuration ||\\n            duration > pricingData[parentNode].maxRegistrationDuration){\\n            revert InvalidDuration(duration); \\n        }\\n\\n\\n        // Create a block to solve a stack too deep error.\\n        {\\n            // Get the label from the _name. \\n            (string memory label, ) = name.getFirstLabel();\\n\\n            // Check to make sure the label is a valid length.\\n            if(!validLength(node, label)){\\n                revert WrongNumberOfChars(label);\\n            }\\n        }\\n\\n        // Check to make sure the owner is offering names.\\n        if (!pricingData[parentNode].offerSubnames){\\n            revert NameNotAvailable(name);\\n        }\\n\\n        uint64 expiry =  uint64(block.timestamp + duration);\\n\\n        // Create a block to solve a stack too deep error.\\n        {\\n            // Get the expiry of the parent. \\n            (,, uint64 maxExpiry) = nameWrapper.getData(uint256(parentNode));\\n\\n            // Set the expiry to the max expiry if the duration is too long.\\n            if (expiry > maxExpiry) {\\n                duration = maxExpiry - block.timestamp;\\n                expiry = maxExpiry;\\n            }\\n        }\\n\\n        // Get the price for the duration.\\n        (uint256 price,) = rentPrice(name, duration);\\n\\n        // Check to make sure the caller sent enough Eth.\\n        if (msg.value < price) {\\n            revert InsufficientValue();\\n        }\\n\\n        // Create a block to solve a stack too deep error.\\n        {\\n\\n            address parentOwner = nameWrapper.ownerOf(uint256(parentNode));\\n\\n            // Calculate the amount to be given to the owner of the contract. \\n            // We don't need a balance for the owner of the contract because the owner\\n            // can withdraw any funds in the contract minus total balances. \\n            uint256 ownerAmount = price * ownerCut / 10000;\\n\\n            uint256 referrerAmount;\\n\\n            // If a referrer is specified then calculate the amount to be given to the referrer.\\n            if (referrer != address(0)) {\\n\\n                // Calculate the amount to be given to the referrer.\\n                referrerAmount = price * referrerCuts[referrer] / 10000;\\n\\n                //Increase the referrer's balance.\\n                balances[referrer] += referrerAmount;\\n            }\\n\\n            // Increase the owner of the parent name's balance minus the\\n            // referrer amount and the owner amount.\\n            balances[parentOwner] += price - referrerAmount - ownerAmount;\\n\\n            //increment the total balances\\n            totalBalance += price - ownerAmount;        \\n        }\\n\\n        _burnCommitment(\\n            duration,\\n            makeCommitment(\\n                name,\\n                owner,\\n                secret\\n            )\\n        );\\n\\n        {\\n            // Get the label from the _name. \\n            (string memory label, ) = name.getFirstLabel();\\n\\n            // Create the subname in the L2 Name Wrapper.\\n            nameWrapper.setSubnodeRecord(\\n                parentNode,\\n                label,\\n                owner,\\n                address(pricingData[parentNode].renewalController), \\n                resolver,\\n                0, // TTL\\n                fuses | CANNOT_UNWRAP | PARENT_CANNOT_CONTROL,\\n                expiry\\n            );\\n        }\\n        emit SubnameRegistered(\\n            name,\\n            node,\\n            owner,\\n            price,\\n            expiry\\n        );\\n\\n        // Because the oracle can return a slightly different value then what was estimated\\n        // we overestimate the price and then return any difference. \\n        if (msg.value > price) {\\n            payable(msg.sender).sendValue(\\n                msg.value - price\\n            );\\n        }\\n    }\\n\\n\\n    /**\\n    * @dev Converts USD to Wei. \\n    * @param amount The amount of USD to be converted to Wei.\\n    * @return The amount of Wei.\\n    */\\n    function usdToWei(uint256 amount) internal view returns (uint256) {\\n\\n        // Get the price of ETH in USD (with 8 digits of precision) from the oracle.\\n        uint256 ethPrice = uint256(usdOracle.latestAnswer());\\n\\n        // Convert the amount of USD (with 18 digits of precision) to Wei.\\n        return (amount * 1e8) / ethPrice;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISubnameRegistrar).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /* Internal functions */\\n\\n    function _burnCommitment(\\n        uint256 duration,\\n        bytes32 commitment\\n    ) internal {\\n\\n        // Require an old enough commitment.\\n        if (commitments[commitment] + minCommitmentAge > block.timestamp) {\\n            revert CommitmentTooNew(commitment);\\n        }\\n\\n        // If the commitment is too old, or the name is registered, stop\\n        if (commitments[commitment] + maxCommitmentAge <= block.timestamp) {\\n            revert CommitmentTooOld(commitment);\\n        }\\n\\n        delete (commitments[commitment]);\\n\\n        if (duration < MIN_REGISTRATION_DURATION) {\\n            revert DurationTooShort(duration);\\n        }\\n    }\\n\\n    function _makeNode(bytes32 node, bytes32 labelhash)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(node, labelhash));\\n    }\\n}\",\"keccak256\":\"0xce6ec2f2ce8225b57ef36fb85a9e730459b07c14e383dcfe6daaed10626abce1\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/IAggregatorInterface.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// Chainlink oracle interface\\ninterface IAggregatorInterface {\\n    function latestAnswer() external view returns (int256);\\n}\",\"keccak256\":\"0x39cfb36ad94daab8e3814fad5740f6ac747d11cba399812267333bc1e32ab28f\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/IL2NameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"ens-contracts/registry/ENS.sol\\\";\\nimport \\\"ens-contracts/ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"ens-contracts/wrapper/IMetadataService.sol\\\";\\nimport \\\"ens-contracts/wrapper/INameWrapperUpgrade.sol\\\";\\n\\nuint32 constant CANNOT_UNWRAP = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant IS_DOT_ETH = 1 << 17;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\n// all fuses apart from IS_DOT_ETH\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\n\\ninterface IL2NameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function registerAndWrapEth2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        address approved,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint64 expiry);\\n\\n    function renewEth2LD(\\n        bytes32 labelhash,\\n        uint256 duration\\n    ) external returns (uint64 expiry);\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address approved,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        address approved,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n    // just deleting this temporarily\\n\\n}\\n\",\"keccak256\":\"0xa9f3195071ebbbee89380f6795ea224c2a1a1679b5bb6ede3848a973d4d8d25a\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/IRenewalController.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IRenewalController {\\n\\n    event NameRenewed(\\n        bytes indexed name,\\n        uint256 indexed price,\\n        uint64 indexed expiry\\n    );\\n\\n    function renew(bytes calldata name, address referrer, uint256 duration)\\n        external\\n        payable;\\n\\n    function rentPrice(bytes calldata name, uint256 duration)\\n        external\\n        view\\n        returns (uint256 weiPrice, uint256 usdPrice);\\n}\",\"keccak256\":\"0xa93cf8ec54f505ac1b2bc84579bdd516d76442a1d50191051d09fe78281eb05d\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/ISubnameRegistrar.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport {IRenewalController} from \\\"./IRenewalController.sol\\\";\\n\\n/**\\n * @title Interface for a registrar for registering subnames.\\n * @author Unruggable Labs\\n */\\n\\ninterface ISubnameRegistrar {\\n\\n    event SubnameRegistered(\\n        bytes name,\\n        bytes32 indexed node,\\n        address indexed owner,\\n        uint256 price,\\n        uint256 expires\\n    );\\n\\n    event NameRenewed(\\n        bytes indexed name,\\n        uint256 cost,\\n        uint256 expires\\n    );\\n\\n    function rentPrice(\\n        bytes memory name, \\n        uint256 duration\\n    )\\n        external\\n        view\\n        returns (uint256 weiPrice, uint256 usdPrice);\\n\\n    function setParams(\\n        bytes32 parentNode,\\n        bool _offerSubnames,\\n        IRenewalController _renewalController,\\n        uint64 _minRegistrationDuration,\\n        uint64 _maxRegistrationDuration,\\n        uint16 _minChars,\\n        uint16 _maxChars\\n    ) external;\\n\\n    function setPricingForAllLengths(\\n        bytes32 parentNode,\\n        uint256[] calldata _charAmounts\\n    ) external;\\n\\n    function getPriceDataForLength(\\n        bytes32 parentNode, \\n        uint16 charLength\\n    ) external view returns (uint256);\\n\\n    function updatePriceForCharLength(\\n        bytes32 parentNode,\\n        uint16 charLength,\\n        uint256 charAmount\\n    ) external;\\n\\n    function addNextPriceForCharLength(\\n        bytes32 parentNode,\\n        uint256 charAmount\\n    ) external;\\n\\n    function getLastCharIndex(bytes32 parentNode) external view returns (uint256);\\n\\n    function setOfferSubnames(\\n        bytes32 parentNode,\\n        bool _offerSubnames\\n    ) external;\\n\\n    function available(bytes memory name) external returns (bool);\\n\\n    function makeCommitment(\\n        bytes memory name,\\n        address owner,\\n        bytes32 secret\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32 commitment) external;\\n\\n    function register(\\n        bytes calldata name,\\n        address owner,\\n        address referrer,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        uint32 fuses\\n    ) external payable;\\n}\",\"keccak256\":\"0xe7bedc3c38a7e7d7e6c0082200c1bf9626f1977afec5676cb30610327626ead5\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"lib/ens-contracts/contracts/ethregistrar/StringUtils.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\nlibrary StringUtils {\\n    /**\\n     * @dev Returns the length of a given string\\n     *\\n     * @param s The string to measure the length of\\n     * @return The length of the input string\\n     */\\n    function strlen(string memory s) internal pure returns (uint256) {\\n        uint256 len;\\n        uint256 i = 0;\\n        uint256 bytelength = bytes(s).length;\\n        for (len = 0; i < bytelength; len++) {\\n            bytes1 b = bytes(s)[i];\\n            if (b < 0x80) {\\n                i += 1;\\n            } else if (b < 0xE0) {\\n                i += 2;\\n            } else if (b < 0xF0) {\\n                i += 3;\\n            } else if (b < 0xF8) {\\n                i += 4;\\n            } else if (b < 0xFC) {\\n                i += 5;\\n            } else {\\n                i += 6;\\n            }\\n        }\\n        return len;\\n    }\\n}\\n\",\"keccak256\":\"0x4cc8363a850dc9130c433ee50e7c97e29a45ae5d9bd0808205ac7134b34f24e4\"},\"lib/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"lib/ens-contracts/contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A registrar controller for registering and renewing names at fixed cost.",
    "kind": "dev",
    "methods": {
      "addNextPriceForCharLength(bytes32,uint256)": {
        "params": {
          "charAmount": "The amount in USD/sec. (with 18 digits of precision)  for a character count, e.g. amount for three characters.",
          "parentNode": "The namehash of the parent name."
        }
      },
      "allowName(bytes,bool)": {
        "params": {
          "_allow": "A bool indicating if the name is allowed to be listed.",
          "_name": "The name in DNS format, e.g. vitalik.eth"
        }
      },
      "available(bytes)": {
        "params": {
          "name": "The full name, in DNS format wherein the length precedes each label and is terminted with a 0x0 byte, e.g. \"cb.id\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00]."
        }
      },
      "getLastCharIndex(bytes32)": {
        "returns": {
          "_0": "The length of the last character length that was set."
        }
      },
      "getPriceDataForLength(bytes32,uint16)": {
        "params": {
          "charLength": "The character length, e.g. 3 would be for three characters. Use 0 for the default amount.",
          "parentNode": "The namehash of the parent name."
        }
      },
      "makeCommitment(bytes,address,bytes32)": {
        "params": {
          "name": "The full name, in DNS format wherein the length precedes each label and is terminted with a 0x0 byte, e.g. \"cb.id\" => [0x02,0x63,0x62,0x02,0x69,0x64,0x00].",
          "owner": "The address that will own the name.",
          "secret": "The secret to be used for the commitment."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverFunds(address,address,uint256)": {
        "details": "The contract is Ownable and only the owner can call the recover function.",
        "params": {
          "_amount": "The amount of tokens to recover.",
          "_to": "The address to send the tokens to.",
          "_token": "The address of the ERC20 token to recover"
        }
      },
      "register(bytes,address,address,uint256,bytes32,address,uint32)": {
        "params": {
          "duration": "The duration in seconds of the registration.",
          "fuses": "The fuses to be set on the name.",
          "name": "The full name, in DNS format.",
          "owner": "The address that will own the name.",
          "referrer": "The address that referred the owner to the registrar.",
          "resolver": "The address of the resolver to use.",
          "secret": "The secret to be used for the commitment."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "rentPrice(bytes,uint256)": {
        "params": {
          "duration": "The amount of time the name will be rented for/extended in years. ",
          "name": "The name in DNS format, e.g. vault.vitalik.eth"
        },
        "returns": {
          "usdPrice": "The rent price for the duration in USD ",
          "weiPrice": "The rent price for the duration in Wei "
        }
      },
      "setOfferSubnames(bytes32,bool)": {
        "params": {
          "_offerSubnames": "A bool indicating the parent name owner is offering subnames.",
          "parentNode": "The namehash of the parent name."
        }
      },
      "setOwnerCut(uint256)": {
        "params": {
          "_ownerCut": "The cut for the owner of the contract."
        }
      },
      "setParams(bytes32,bool,address,uint64,uint64,uint16,uint16)": {
        "params": {
          "_maxChars": "The maximum length a name can be.",
          "_maxRegistrationDuration": "The maximum duration a name can be registered for.",
          "_minChars": "The minimum length a name can be.",
          "_minRegistrationDuration": "The minimum duration a name can be registered for.",
          "_offerSubnames": "A bool indicating the parent name owner is offering subnames.",
          "_renewalController": "The address of the renewal controller.",
          "parentNode": "The namehash of the parent name."
        }
      },
      "setPricingForAllLengths(bytes32,uint256[])": {
        "params": {
          "_charAmounts": "An array of amounst for each characer length.",
          "parentNode": "The namehash of the parent name."
        }
      },
      "setReferrerCut(uint256)": {
        "params": {
          "_referrerCut": "The percentage cut given to the referrer (0-10%)."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePriceForCharLength(bytes32,uint16,uint256)": {
        "params": {
          "charAmount": "The amount in USD/year for a character count, e.g. amount for three characters.",
          "charLength": "The character length, e.g. 3 would be for three characters. Use 0 for the default amount.",
          "parentNode": "The namehash of the parent name."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addNextPriceForCharLength(bytes32,uint256)": {
        "notice": "Adds a price for the next character length, e.g. three characters."
      },
      "allowName(bytes,bool)": {
        "notice": "Add a name to the allow list."
      },
      "available(bytes)": {
        "notice": "Check to see if the name is available for registration. "
      },
      "disableAllowList()": {
        "notice": "Disable the allow list permanenty."
      },
      "getLastCharIndex(bytes32)": {
        "notice": "Get the last length for a character length that has a price (can be 0), e.g. three characters."
      },
      "getPriceDataForLength(bytes32,uint16)": {
        "notice": "Get the price for a single character length, e.g. three characters."
      },
      "makeCommitment(bytes,address,bytes32)": {
        "notice": "Check to see if the name is available for registration. "
      },
      "recoverFunds(address,address,uint256)": {
        "notice": "Recover ERC20 tokens sent to the contract by mistake."
      },
      "register(bytes,address,address,uint256,bytes32,address,uint32)": {
        "notice": "Register a name."
      },
      "rentPrice(bytes,uint256)": {
        "notice": "Gets the total cost of rent in wei, from the unitPrice, i.e. USD, and duration."
      },
      "setOfferSubnames(bytes32,bool)": {
        "notice": "Allows for chaning the offer status of subnames to true or false."
      },
      "setOwnerCut(uint256)": {
        "notice": "A function to set the cut for the owner of the contract."
      },
      "setParams(bytes32,bool,address,uint64,uint64,uint16,uint16)": {
        "notice": "Set the pricing for subnames of the parent name."
      },
      "setPricingForAllLengths(bytes32,uint256[])": {
        "notice": "Set the pricing for subname lengths."
      },
      "setReferrerCut(uint256)": {
        "notice": "A function to set the referrer cut percentage for a specific referrer."
      },
      "updatePriceForCharLength(bytes32,uint16,uint256)": {
        "notice": "Set a price for a single character length, e.g. three characters."
      },
      "withdraw()": {
        "notice": "A function to allow referrers, name owners, or the contract owner to withdraw."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19865,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 320,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 324,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "referrerCuts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 326,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "totalBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 328,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "ownerCut",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4354,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "commitments",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4359,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "pricingData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(Pricing)4350_storage)"
      },
      {
        "astId": 4363,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "allowList",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 4365,
        "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
        "label": "allowListDisabled",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRenewalController)5881": {
        "encoding": "inplace",
        "label": "contract IRenewalController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Pricing)4350_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct L2SubnameRegistrar.Pricing)",
        "numberOfBytes": "32",
        "value": "t_struct(Pricing)4350_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pricing)4350_storage": {
        "encoding": "inplace",
        "label": "struct L2SubnameRegistrar.Pricing",
        "members": [
          {
            "astId": 4335,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "offerSubnames",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4338,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "renewalController",
            "offset": 1,
            "slot": "0",
            "type": "t_contract(IRenewalController)5881"
          },
          {
            "astId": 4340,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "minRegistrationDuration",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 4342,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "maxRegistrationDuration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 4344,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "minChars",
            "offset": 8,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 4346,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "maxChars",
            "offset": 10,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 4349,
            "contract": "contracts/layertwo/optimism/wrapper/L2SubnameRegistrar.sol:L2SubnameRegistrar",
            "label": "charAmounts",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}