{
  "address": "0x690c1680b0843Ea9Bdb04cA5f9239A92d9dEb493",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "contract IMetadataService",
          "name": "_metadataService",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CannotUpgrade",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "LabelTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LabelTooShort",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NameIsNotWrapped",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "OperationProhibited",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "ExpiryExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        }
      ],
      "name": "FusesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NameUnwrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "NameWrapped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "fuseMask",
          "type": "uint32"
        }
      ],
      "name": "allFusesBurned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "canModifyName",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "labelhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "extendExpiry",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getData",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metadataService",
      "outputs": [
        {
          "internalType": "contract IMetadataService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "names",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "wrappedOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "ownerControlledFuses",
          "type": "uint16"
        }
      ],
      "name": "registerAndWrapEth2LD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "labelhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "renewEth2LD",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "labelhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "setChildFuses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint16",
          "name": "ownerControlledFuses",
          "type": "uint16"
        }
      ],
      "name": "setFuses",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMetadataService",
          "name": "_metadataService",
          "type": "address"
        }
      ],
      "name": "setMetadataService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "setRecord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "setSubnodeOwner",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "parentNode",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "setSubnodeRecord",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "ttl",
          "type": "uint64"
        }
      ],
      "name": "setTTL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INameWrapperUpgrade",
          "name": "_upgradeAddress",
          "type": "address"
        }
      ],
      "name": "setUpgradeContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "extraData",
          "type": "bytes"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgradeContract",
      "outputs": [
        {
          "internalType": "contract INameWrapperUpgrade",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "name",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "wrappedOwner",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "fuses",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "expiry",
          "type": "uint64"
        }
      ],
      "name": "wrapTLD",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xadace8171d11cf042a3a1093902e2839979928ddc17d9b9515c5dfe2419b42ba",
  "receipt": {
    "to": null,
    "from": "0xFC04D70bea992Da2C67995BbddC3500767394513",
    "contractAddress": "0x690c1680b0843Ea9Bdb04cA5f9239A92d9dEb493",
    "transactionIndex": 1,
    "gasUsed": "4135446",
    "logsBloom": "0x
    "blockHash": "0x8c45a04e830f02a9c362f975cf76edc971c459b96b7d747671578ebe59488eee",
    "transactionHash": "0xadace8171d11cf042a3a1093902e2839979928ddc17d9b9515c5dfe2419b42ba",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13944312,
        "transactionHash": "0xadace8171d11cf042a3a1093902e2839979928ddc17d9b9515c5dfe2419b42ba",
        "address": "0x690c1680b0843Ea9Bdb04cA5f9239A92d9dEb493",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fc04d70bea992da2c67995bbddc3500767394513"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8c45a04e830f02a9c362f975cf76edc971c459b96b7d747671578ebe59488eee"
      }
    ],
    "blockNumber": 13944312,
    "cumulativeGasUsed": "4182311",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xffED83BDBd2F9906Ac12467288946cf7d8F6f599",
    "0x5fee95A0794bc172a1f716888CA4016bE3511026"
  ],
  "numDeployments": 3,
  "solcInputHash": "3dc7455bfb2dc1cb3bc79e98ee84422c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"contract IMetadataService\",\"name\":\"_metadataService\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CannotUpgrade\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"LabelTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LabelTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NameIsNotWrapped\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"OperationProhibited\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"ExpiryExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"}],\"name\":\"FusesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameUnwrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"NameWrapped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fuseMask\",\"type\":\"uint32\"}],\"name\":\"allFusesBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"canModifyName\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"extendExpiry\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataService\",\"outputs\":[{\"internalType\":\"contract IMetadataService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"names\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"registerAndWrapEth2LD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renewEth2LD\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"labelhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setChildFuses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint16\",\"name\":\"ownerControlledFuses\",\"type\":\"uint16\"}],\"name\":\"setFuses\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMetadataService\",\"name\":\"_metadataService\",\"type\":\"address\"}],\"name\":\"setMetadataService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setRecord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeOwner\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"parentNode\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"setSubnodeRecord\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"ttl\",\"type\":\"uint64\"}],\"name\":\"setTTL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"_upgradeAddress\",\"type\":\"address\"}],\"name\":\"setUpgradeContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradeContract\",\"outputs\":[{\"internalType\":\"contract INameWrapperUpgrade\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"name\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"wrappedOwner\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"fuses\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"}],\"name\":\"wrapTLD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"allFusesBurned(bytes32,uint32)\":{\"params\":{\"fuseMask\":\"The fuses you want to check\",\"node\":\"Namehash of the name\"},\"returns\":{\"_0\":\"Boolean of whether or not all the selected fuses are burned\"}},\"approve(address,uint256)\":{\"details\":\"Approved addresses are restricted to being able to renew the name or subnames of the name.      This is particularly useful for creating renewal controllers, contracts tasked with renewing      names for example for a fee.\",\"params\":{\"to\":\"address to approve\",\"tokenId\":\"name to approve\"}},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"canModifyName(bytes32,address)\":{\"params\":{\"addr\":\"The address to check for permissions.\",\"node\":\"The namehash of the name to check.\"},\"returns\":{\"_0\":\"Whether or not the address is the owner or an operator of the name.\"}},\"extendExpiry(bytes32,bytes32,uint64)\":{\"params\":{\"expiry\":\"The time when the name will expire in seconds since the Unix epoch.\",\"labelhash\":\"The labelhash of the name, e.g. vitalik.xyz would be keccak256('vitalik').\",\"parentNode\":\"The parent namehash of the name, e.g. vitalik.xyz would be namehash('xyz').\"},\"returns\":{\"_0\":\"The new expiry.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"Namehash of the name\"},\"returns\":{\"operator\":\"Approved operator of a name\"}},\"getData(uint256)\":{\"details\":\"If the name is expired, the fuses are set to 0. If the name is emancipated and       expired, both the fuses and the owner are set to 0.\",\"params\":{\"id\":\"Namehash of the name\"},\"returns\":{\"expiry\":\"The expiry of the name. \",\"fuses\":\"The fuses of the name.\",\"owner\":\"The owner of the name.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"params\":{\"id\":\"Label as a string of the .eth domain to wrap\"},\"returns\":{\"owner\":\"The owner of the name\"}},\"recoverFunds(address,address,uint256)\":{\"details\":\"The contract is Ownable and only the owner can call the recover function.\",\"params\":{\"_amount\":\"The amount of tokens to recover.\",\"_to\":\"The address to send the tokens to.\",\"_token\":\"The address of the ERC20 token to recover\"}},\"registerAndWrapEth2LD(string,address,address,uint256,address,uint16)\":{\"details\":\"Registers a new .eth second-level domain and wraps it.      Only callable by authorized controllers.\",\"params\":{\"approved\":\"The address to approve for the name.\",\"duration\":\"The duration, in seconds, to register the name for.\",\"label\":\"The label to register (Eg, 'foo' for 'foo.eth').\",\"ownerControlledFuses\":\"Initial owner-controlled fuses to set\",\"resolver\":\"The resolver address to set on the ENS registry (optional).\",\"wrappedOwner\":\"The owner of the wrapped name.\"},\"returns\":{\"expiry\":\"The expiry date of the new name, in seconds since the Unix epoch.\"}},\"renewEth2LD(bytes32,uint256)\":{\"details\":\"Only callable by authorized controllers.\",\"params\":{\"duration\":\"The number of seconds to renew the name for.\",\"labelhash\":\"The hash of the label to register (eg, `keccak256('foo')`, for 'foo.eth').\"},\"returns\":{\"expiry\":\"The expiry date of the name, in seconds since the Unix epoch.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setChildFuses(bytes32,bytes32,uint32,uint64)\":{\"params\":{\"expiry\":\"When the name will expire in seconds since the Unix epoch\",\"fuses\":\"Fuses to burn\",\"labelhash\":\"Labelhash of the name, e.g. vitalik.xyz would be keccak256('vitalik')\",\"parentNode\":\"Parent namehash of the name e.g. vitalik.xyz would be namehash('xyz')\"}},\"setFuses(bytes32,uint16)\":{\"params\":{\"node\":\"Namehash of the name\",\"ownerControlledFuses\":\"Owner-controlled fuses to burn\"},\"returns\":{\"_0\":\"Old fuses\"}},\"setMetadataService(address)\":{\"params\":{\"_metadataService\":\"The new metadata service\"}},\"setRecord(bytes32,address,address,uint64)\":{\"params\":{\"node\":\"Namehash of the name to set a record for\",\"owner\":\"New owner in the registry\",\"resolver\":\"Resolver contract\",\"ttl\":\"Time to live in the registry\"}},\"setResolver(bytes32,address)\":{\"params\":{\"node\":\"namehash of the name\",\"resolver\":\"the resolver contract\"}},\"setSubnodeOwner(bytes32,string,address,address,uint32,uint64)\":{\"params\":{\"approved\":\"Address to approve for the name\",\"expiry\":\"When the name will expire in seconds since the Unix epoch\",\"fuses\":\"Initial fuses for the wrapped subdomain\",\"label\":\"Label of the subdomain as a string\",\"owner\":\"New owner in the wrapper\",\"parentNode\":\"Parent namehash of the subdomain\"},\"returns\":{\"node\":\"Namehash of the subdomain\"}},\"setSubnodeRecord(bytes32,string,address,address,address,uint64,uint32,uint64)\":{\"params\":{\"approved\":\"address to approve for the name\",\"expiry\":\"When the name will expire in seconds since the Unix epoch\",\"fuses\":\"initial fuses for the wrapped subdomain\",\"label\":\"label of the subdomain as a string\",\"owner\":\"new owner in the wrapper\",\"parentNode\":\"parent namehash of the subdomain\",\"resolver\":\"resolver contract in the registry\",\"ttl\":\"ttl in the registry\"},\"returns\":{\"node\":\"Namehash of the subdomain\"}},\"setTTL(bytes32,uint64)\":{\"params\":{\"node\":\"Namehash of the name\",\"ttl\":\"TTL in the registry\"}},\"setUpgradeContract(address)\":{\"details\":\"The default value of upgradeContract is the 0 address. Use the 0 address at any time to make the contract not upgradable.\",\"params\":{\"_upgradeAddress\":\"address of an upgraded contract\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface id of the name.\"},\"returns\":{\"_0\":\"The interface id. \"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgrade(bytes,bytes)\":{\"details\":\"Can be called by the owner or an authorized caller\",\"params\":{\"extraData\":\"Extra data to pass to the upgrade contract\",\"name\":\"The name to upgrade, in DNS format\"}},\"uri(uint256)\":{\"params\":{\"tokenId\":\"The id of the token.\"},\"returns\":{\"_0\":\"string The uri of the metadata service.\"}},\"wrapTLD(bytes,address,uint32,uint64)\":{\"details\":\"Only callable by authorized controllers.\",\"params\":{\"expiry\":\"The expiry date of the name, in seconds since the Unix epoch.\",\"fuses\":\"Initial fuses to set on the name.\",\"name\":\"The name of the TLD, e.g. vitalik.xyz would be \\\"xyz\\\".\",\"wrappedOwner\":\"The owner of the name.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allFusesBurned(bytes32,uint32)\":{\"notice\":\"Checks all Fuses in the mask are burned for the node\"},\"approve(address,uint256)\":{\"notice\":\"Approves an address for a name\"},\"canModifyName(bytes32,address)\":{\"notice\":\"Checks if the address is the owner or operator of the name.\"},\"extendExpiry(bytes32,bytes32,uint64)\":{\"notice\":\"A function to extend the expiry of a name.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the owner of a name\"},\"getData(uint256)\":{\"notice\":\"Gets the data for a name\"},\"names(bytes32)\":{\"notice\":\"In the ENS registry only the namehash of each name is stored and not the actual name. To make it easier to retrieve the human readable name, saved in bytes using the DNS format, we store it here. \"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a name\"},\"recoverFunds(address,address,uint256)\":{\"notice\":\"Recover ERC20 tokens sent to the contract by mistake.\"},\"renewEth2LD(bytes32,uint256)\":{\"notice\":\"Renews a .eth second-level domain.\"},\"setChildFuses(bytes32,bytes32,uint32,uint64)\":{\"notice\":\"Sets fuses of a name that you own the parent of\"},\"setFuses(bytes32,uint16)\":{\"notice\":\"Sets fuses of a name\"},\"setMetadataService(address)\":{\"notice\":\"Set the metadata service. Only the owner can do this\"},\"setRecord(bytes32,address,address,uint64)\":{\"notice\":\"Sets records for the name in the ENS Registry\"},\"setResolver(bytes32,address)\":{\"notice\":\"Sets resolver contract in the registry\"},\"setSubnodeOwner(bytes32,string,address,address,uint32,uint64)\":{\"notice\":\"Sets the subdomain owner in the registry and then wraps the subdomain\"},\"setSubnodeRecord(bytes32,string,address,address,address,uint64,uint32,uint64)\":{\"notice\":\"Sets the subdomain owner in the registry with records and then wraps the subdomain\"},\"setTTL(bytes32,uint64)\":{\"notice\":\"Sets TTL in the registry\"},\"setUpgradeContract(address)\":{\"notice\":\"Set the address of the upgradeContract of the contract. only admin can do this\"},\"supportsInterface(bytes4)\":{\"notice\":\"Provides support for ERC-165, allowing checking for interfaces. \"},\"upgrade(bytes,bytes)\":{\"notice\":\"Upgrades a domain of any kind. Could be a .eth name vitalik.eth,          a DNSSEC name vitalik.xyz, or a subdomain.\"},\"uri(uint256)\":{\"notice\":\"Get the metadata uri.\"},\"wrapTLD(bytes,address,uint32,uint64)\":{\"notice\":\"Wrap a new TLD, e.g. .xyz \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/layertwo/optimism/wrapper/L2NameWrapper.sol\":\"L2NameWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@ensdomains/buffer/=lib/buffer/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":buffer/=lib/buffer/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":ens-contracts/=lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":optimism/=contracts/layertwo/optimism/\",\":unruggable-protocol/=lib/unruggable-protocol/\",\":xap-contracts/=lib/xap/contracts/\"]},\"sources\":{\"contracts/layertwo/optimism/wrapper/L2NameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport {ERC1155Fuse, IERC1155MetadataURI} from \\\"ens-contracts/wrapper/ERC1155Fuse.sol\\\";\\nimport {Controllable} from \\\"ens-contracts/wrapper/Controllable.sol\\\";\\nimport {IL2NameWrapper, CANNOT_BURN_NAME, CANNOT_BURN_FUSES, CANNOT_TRANSFER, CANNOT_SET_RESOLVER, CANNOT_SET_TTL, CANNOT_CREATE_SUBDOMAIN, CANNOT_APPROVE, PARENT_CANNOT_CONTROL, CAN_DO_EVERYTHING, IS_DOT_ETH, CAN_EXTEND_EXPIRY, PARENT_CONTROLLED_FUSES, USER_SETTABLE_FUSES} from \\\"optimism/wrapper/interfaces/IL2NameWrapper.sol\\\";\\nimport {INameWrapperUpgrade} from \\\"ens-contracts/wrapper/INameWrapperUpgrade.sol\\\";\\nimport {IMetadataService} from \\\"ens-contracts/wrapper/IMetadataService.sol\\\";\\nimport {ENS} from \\\"ens-contracts/registry/ENS.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {BytesUtils} from \\\"ens-contracts/wrapper/BytesUtils.sol\\\";\\nimport {ERC20Recoverable} from \\\"ens-contracts/utils/ERC20Recoverable.sol\\\";\\n//import foundry console logging.\\nimport \\\"forge-std/console.sol\\\";\\n\\nerror Unauthorized(bytes32 node, address addr);\\nerror LabelTooShort();\\nerror LabelTooLong(string label);\\nerror CannotUpgrade();\\nerror OperationProhibited(bytes32 node);\\nerror NameIsNotWrapped();\\n\\ncontract L2NameWrapper is\\n    Ownable,\\n    ERC1155Fuse,\\n    IL2NameWrapper,\\n    Controllable,\\n    ERC20Recoverable\\n{\\n    \\n    // Use the BytesUtils library for bytes, e.g. name.namehash(0). \\n    using BytesUtils for bytes;\\n\\n    // The ENS registry\\n    ENS public immutable ens;\\n\\n    // The metadata service used to get the metadata uri of each name. \\n    IMetadataService public metadataService;\\n\\n    //The L2NameWrapper is upgradable. If an upgrade contract is specified, name owners can choose to upgrade.\\n    INameWrapperUpgrade public upgradeContract;\\n\\n    /** \\n     * In the ENS registry only the namehash of each name is stored and not the actual name.\\n     * To make it easier to retrieve the human readable name, saved in bytes using the DNS format,\\n     * we store it here. \\n     */\\n\\n    mapping(bytes32 => bytes) public names;\\n\\n    // Make a struct to hold node data. We need this to avoid a stack too deep error.\\n    struct NodeData {\\n        string label;\\n        address owner;\\n        address nodeOwner;\\n        uint32 nodeFuses;\\n        uint64 nodeExpiry;\\n        address parentOwner;\\n        uint32 parentFuses;\\n        uint64 parentExpiry;\\n    }\\n\\n    /* Constants */\\n\\n    uint64 private constant GRACE_PERIOD = 90 days;\\n    bytes32 private constant ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 private constant ETH_LABELHASH = 0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;\\n    bytes32 private constant ROOT_NODE = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\n\\n    constructor(\\n        ENS _ens,\\n        IMetadataService _metadataService\\n    ) {\\n\\n        // Set the registry.\\n        ens = _ens;\\n\\n        // Set the metadata service.\\n        metadataService = _metadataService;\\n\\n        // Add the root node to the wrapper.\\n        _setData(\\n            uint256(ROOT_NODE),\\n            address(0),\\n            uint32(PARENT_CANNOT_CONTROL | CANNOT_BURN_NAME),\\n            MAX_EXPIRY\\n        );\\n\\n        /**\\n         * Add the ETH node to the wrapper. The ETH node is owned by address 0, however, \\n         * it is still possible to register second level names, i.e. Vitalik.eth, \\n         * because the L2NameWrapper is controllable and registerAndWrapEth2LD and renewEth2LD\\n         * are special functions used for registering and renewing .eth 2LDs. \\n         */\\n\\n        _setData(\\n            uint256(ETH_NODE),\\n            address(0),\\n            uint32(PARENT_CANNOT_CONTROL | CANNOT_BURN_NAME),\\n            MAX_EXPIRY\\n        );\\n\\n        // Set the name of the root node.\\n        names[ROOT_NODE] = \\\"\\\\x00\\\";\\n\\n        // Set the name of the ETH node.\\n        names[ETH_NODE] = \\\"\\\\x03eth\\\\x00\\\";\\n    }\\n\\n    /**\\n     * @notice Provides support for ERC-165, allowing checking for interfaces. \\n     * @param interfaceId The interface id of the name.\\n     * @return The interface id. \\n     */\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC1155Fuse, IL2NameWrapper) returns (bool) {\\n        return\\n            interfaceId == type(IL2NameWrapper).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ERC1155 Fuse */\\n\\n    /**\\n     * @notice Gets the owner of a name\\n     * @param id Label as a string of the .eth domain to wrap\\n     * @return owner The owner of the name\\n     */\\n\\n    function ownerOf(\\n        uint256 id\\n    ) public view override(ERC1155Fuse, IL2NameWrapper) returns (address owner) {\\n        return super.ownerOf(id);\\n    }\\n\\n    /**\\n     * @notice Gets the owner of a name\\n     * @param id Namehash of the name\\n     * @return operator Approved operator of a name\\n     */\\n\\n    function getApproved(\\n        uint256 id\\n    )\\n        public\\n        view\\n        override(ERC1155Fuse, IL2NameWrapper)\\n        returns (address operator)\\n    {\\n        address owner = ownerOf(id);\\n\\n        // Check to see if the owner is the 0 address.\\n        if (owner == address(0)) {\\n            return address(0);\\n        }\\n\\n        // Return the approved address.\\n        return super.getApproved(id);\\n    }\\n\\n    /**\\n     * @notice Approves an address for a name\\n     * @dev Approved addresses are restricted to being able to renew the name or subnames of the name.\\n     *      This is particularly useful for creating renewal controllers, contracts tasked with renewing\\n     *      names for example for a fee.\\n     * @param to address to approve\\n     * @param tokenId name to approve\\n     */\\n\\n    function approve(\\n        address to,\\n        uint256 tokenId\\n    ) public override(ERC1155Fuse, IL2NameWrapper) {\\n\\n        // Get the data from the name. \\n        (, uint32 fuses, ) = getData(tokenId);\\n\\n        // Make sure CANNOT_APPROVE is not burned.\\n        if (fuses & CANNOT_APPROVE == CANNOT_APPROVE) {\\n            revert OperationProhibited(bytes32(tokenId));\\n        }\\n\\n        // Approve the address.\\n        super.approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Gets the data for a name\\n     * @dev If the name is expired, the fuses are set to 0. If the name is emancipated and \\n     *      expired, both the fuses and the owner are set to 0.\\n     * @param id Namehash of the name\\n     * @return owner The owner of the name.\\n     * @return fuses The fuses of the name.\\n     * @return expiry The expiry of the name. \\n     */\\n\\n    function getData(\\n        uint256 id\\n    )\\n        public\\n        view\\n        override(ERC1155Fuse, IL2NameWrapper)\\n        returns (address owner, uint32 fuses, uint64 expiry)\\n    {\\n\\n        // Get the data from the name.\\n        (owner, fuses, expiry) = super.getData(id);\\n\\n        // Check to see if the name is expired.\\n        if (expiry < block.timestamp) {\\n\\n            // The name is expired. \\n\\n            /** \\n             * If the name is emancipated, set the owner to 0.\\n             * This is necessary so that expired emancipated names cannot be transferred,\\n             * which could include selling an expired name in a marketplace.\\n             */\\n\\n            if (fuses & PARENT_CANNOT_CONTROL == PARENT_CANNOT_CONTROL) {\\n                owner = address(0);\\n            }\\n\\n            // Set the fuses to 0.\\n            fuses = 0;\\n        }\\n    }\\n\\n    /* Metadata Service */\\n\\n    /**\\n     * @notice Set the metadata service. Only the owner can do this\\n     * @param _metadataService The new metadata service\\n     */\\n\\n    function setMetadataService(\\n        IMetadataService _metadataService\\n    ) public onlyOwner {\\n        metadataService = _metadataService;\\n    }\\n\\n    /**\\n     * @notice Get the metadata uri.\\n     * @param tokenId The id of the token.\\n     * @return string The uri of the metadata service.\\n     */\\n\\n    function uri(\\n        uint256 tokenId\\n    )\\n        public\\n        view\\n        override(IL2NameWrapper, IERC1155MetadataURI)\\n        returns (string memory)\\n    {\\n        return metadataService.uri(tokenId);\\n    }\\n\\n    /* Name Wrapper */\\n\\n    /**\\n     * @notice Set the address of the upgradeContract of the contract. only admin can do this\\n     * @dev The default value of upgradeContract is the 0 address. Use the 0 address at any time\\n     * to make the contract not upgradable.\\n     * @param _upgradeAddress address of an upgraded contract\\n     */\\n\\n    function setUpgradeContract(\\n        INameWrapperUpgrade _upgradeAddress\\n    ) public onlyOwner {\\n        upgradeContract = _upgradeAddress;\\n    }\\n\\n    /**\\n     * @notice Checks if msg.sender is the owner or operator of the owner of a name.\\n     * @param node The namehash of the name to check.\\n     */\\n\\n    modifier onlyTokenOwner(bytes32 node) {\\n        if (!canModifyName(node, msg.sender)) {\\n            revert Unauthorized(node, msg.sender);\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if the address is the owner or operator of the name.\\n     * @param node The namehash of the name to check.\\n     * @param addr The address to check for permissions.\\n     * @return Whether or not the address is the owner or an operator of the name.\\n     */\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) public view returns (bool) {\\n\\n        // Get the data from the node.\\n        (address owner, uint32 fuses, uint64 expiry) = getData(uint256(node));\\n\\n        return\\n            // Check if the address is the owner or an approved-for-all address.\\n            (owner == addr || isApprovedForAll(owner, addr)) &&\\n\\n            // Also if the name is a .eth 2LD, e.g, vitalik.eth, make sure that it is not in the grace period.\\n            !_isETH2LDInGracePeriod(fuses, expiry);\\n    }\\n\\n    /**\\n     * @notice Wrap a new TLD, e.g. .xyz \\n     * @dev Only callable by authorized controllers.\\n     * @param name The name of the TLD, e.g. vitalik.xyz would be \\\"xyz\\\".\\n     * @param wrappedOwner The owner of the name.\\n     * @param fuses Initial fuses to set on the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function wrapTLD(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) public returns (bytes32 /* node */) {\\n        (bytes32 labelhash,) = name.readLabel(0);\\n        bytes32 node = _makeNode(ROOT_NODE, labelhash);\\n\\n        names[node] = name;\\n            \\n        // Get the owner in the ens registry.\\n        address owner = ens.owner(node);\\n\\n        // Check to make sure the caller is the owner or an authorized caller.\\n        if (owner != msg.sender && !ens.isApprovedForAll(owner, msg.sender)) {\\n            revert Unauthorized(node, msg.sender);\\n        }\\n\\n        // Set the owner of the name in the registry to the wrapper.\\n        ens.setOwner(node, address(this));\\n        \\n        // Set the data in the wrapper.\\n        _wrap(node, name, wrappedOwner, fuses, expiry);\\n\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Registers a new .eth second-level domain and wraps it.\\n     *      Only callable by authorized controllers.\\n     * @param label The label to register (Eg, 'foo' for 'foo.eth').\\n     * @param wrappedOwner The owner of the wrapped name.\\n     * @param approved The address to approve for the name.\\n     * @param duration The duration, in seconds, to register the name for.\\n     * @param resolver The resolver address to set on the ENS registry (optional).\\n     * @param ownerControlledFuses Initial owner-controlled fuses to set\\n     * @return expiry The expiry date of the new name, in seconds since the Unix epoch.\\n     */\\n\\n    function registerAndWrapEth2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        address approved,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external onlyController returns (uint64 expiry) {\\n\\n        // Create a labelhash from the label.\\n        bytes32 labelhash = keccak256(bytes(label));\\n        bytes32 node = _makeNode(ETH_NODE, labelhash);\\n\\n        // Make sure the .eth 2LD is available for registration.\\n        if (ownerOf(uint256(node)) != address(0)) {\\n            revert OperationProhibited(node);\\n        }\\n\\n        // Save the subname in the registry.\\n        ens.setSubnodeRecord(ETH_NODE, labelhash, address(this), address(0), 0);\\n\\n        // Set the expiry to the duration plus the current time plus the grace period.\\n        expiry = uint64(block.timestamp) + uint64(duration) + GRACE_PERIOD;\\n\\n        // Wrap the name.\\n        _wrapETH2LD(\\n            label,\\n            wrappedOwner,\\n            approved,\\n            ownerControlledFuses,\\n            expiry,\\n            resolver\\n        );\\n    }\\n\\n    /**\\n     * @notice Renews a .eth second-level domain.\\n     * @dev Only callable by authorized controllers.\\n     * @param labelhash The hash of the label to register (eg, `keccak256('foo')`, for 'foo.eth').\\n     * @param duration The number of seconds to renew the name for.\\n     * @return expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function renewEth2LD(\\n        bytes32 labelhash,\\n        uint256 duration\\n    ) external onlyController returns (uint64 expiry) {\\n\\n        // Make the node from the labelhash.\\n        bytes32 node = _makeNode(ETH_NODE, labelhash);\\n\\n        // Make sure the name is wrapped before renewing it.\\n        if (ownerOf(uint256(node)) == address(0)) {\\n            revert NameIsNotWrapped();\\n        }\\n\\n        // Get the owner fuses and expiry of the node.\\n        (address owner, uint32 fuses, uint64 oldExpiry) = getData(uint256(node));\\n\\n        // Set expiry in Wrapper\\n        expiry = uint64(oldExpiry + duration);\\n\\n        // Set the data in the wrapper.\\n        _setData(node, owner, fuses, expiry);\\n\\n        return expiry;\\n    }\\n    \\n    /**\\n     * @notice Sets fuses of a name\\n     * @param node Namehash of the name\\n     * @param ownerControlledFuses Owner-controlled fuses to burn\\n     * @return Old fuses\\n     */\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    )\\n        public\\n        onlyTokenOwner(node)\\n        operationAllowed(node, CANNOT_BURN_FUSES)\\n        returns (uint32)\\n    {\\n        // Get the data from the node.\\n        (address owner, uint32 oldFuses, uint64 expiry) = getData(uint256(node));\\n\\n        // Burn the new fuses into the old fuses. Keep the owner and expiry the same. \\n        _setFuses(node, owner, ownerControlledFuses | oldFuses, expiry, expiry);\\n\\n        return oldFuses;\\n    }\\n\\n    /**\\n     * @notice A function to extend the expiry of a name.\\n     * @param parentNode The parent namehash of the name, e.g. vitalik.xyz would be namehash('xyz').\\n     * @param labelhash The labelhash of the name, e.g. vitalik.xyz would be keccak256('vitalik').\\n     * @param expiry The time when the name will expire in seconds since the Unix epoch.\\n     * @return The new expiry.\\n     */\\n\\n    function extendExpiry(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) public returns (uint64) {\\n\\n        // Make the node from the parent node and labelhash.\\n        bytes32 node = _makeNode(parentNode, labelhash);\\n\\n        // Make sure the name is wrapped.\\n        if (ownerOf(uint256(node)) == address(0)) {\\n            revert NameIsNotWrapped();\\n        }\\n\\n        // Get the data from the node and parent node. \\n        (address owner, uint32 fuses, uint64 oldExpiry) = getData(uint256(node));\\n        (address parentOwner, uint32 parentFuses, uint64 parentExpiry) = getData(uint256(parentNode));\\n\\n        /**\\n         * Only allow the owner of the parent name, owner of the name with CAN_EXTEND_EXPIRY,\\n         * or the approved contract on the node or parent node to extend the expiry of the name. \\n         */\\n\\n        // If the caller is the parent name make sure it has the permissions to extend the expiry.\\n        if (!_canModifyName_WithData(msg.sender, parentOwner, parentFuses, parentExpiry) && \\n\\n            /** \\n             * If the caller is the approved address of the parent name, allow it to extend the expiry.   \\n             * This allows for parent level renewal controllers to be assigned to renew names on behalf\\n             * of parent name owners. Parent level renewal controllers can be used in combination with \\n             * a registrar to create a system for renting subnames. A single parent level renewal controller\\n             * can be for situations where the policies for subname rentals are mostly uniform, for example in\\n             * the case of a domain registration system where subnames are all subnames can be renewed for a \\n             * flat fee, such as $5 per year. Also we check to make sure the parent level name is not in the\\n             * in the grace period. \\n             */\\n\\n            !(msg.sender == getApproved(uint256(parentNode)) && !_isETH2LDInGracePeriod(parentFuses, parentExpiry)) &&\\n\\n            // If the caller is the owner of the name make sure CAN_EXTEND_EXPIRY has been burned.\\n            !(_canModifyName_WithData(msg.sender, owner, fuses, oldExpiry) && fuses & CAN_EXTEND_EXPIRY != 0) &&\\n\\n            /** \\n             * If the caller is the approved address of the name, allow it to extend the expiry.\\n             * This ability was introduced into this contract in order to allow for subname level\\n             * renewal controllers. Previously it was only possible to allow for parent level renewal\\n             * controllers. Subname level renewal controllers are more flexible, allowing a different \\n             * renewal controller to be used for each subname. Another significan advantage is that\\n             * it is not necessary to buren CANNOT_APPROVE on the parent level name, and instead\\n             * CANNOT_APPROVE can be burned on the subname level name. This is important because \\n             * burning a permanent fuse on the parent level name cannot be undone, and is likely to\\n             * reduce the utility and value of the parent level name, as well as potentially lock the\\n             * parent level name into a particular technology, which can't be upgraded in the future.  \\n             */\\n\\n            !(msg.sender == getApproved(uint256(node)))) {\\n\\n            //If the caller is none of these then revert.\\n            revert Unauthorized(node, msg.sender);\\n        }\\n\\n        // The max expiry is set to the expiry of the parent.\\n        (, , uint64 maxExpiry) = getData(uint256(parentNode));\\n\\n        // Make sure the expiry is between the old expiry and the parent expiry.\\n        expiry = _normaliseExpiry(expiry, oldExpiry, maxExpiry);\\n\\n        // Set the owner, fuses and expiry of the name.\\n        _setData(node, owner, fuses, expiry);\\n\\n        emit ExpiryExtended(node, expiry);\\n\\n        // Return the new expiry.\\n        return expiry;\\n    }\\n\\n    /**\\n     * @notice Upgrades a domain of any kind. Could be a .eth name vitalik.eth, \\n     *         a DNSSEC name vitalik.xyz, or a subdomain.\\n     * @dev Can be called by the owner or an authorized caller\\n     * @param name The name to upgrade, in DNS format\\n     * @param extraData Extra data to pass to the upgrade contract\\n     */\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) public {\\n\\n        // Make the node from the name.\\n        bytes32 node = name.namehash(0);\\n\\n        // Get the data from the node. \\n        (address owner, uint32 fuses, uint64 expiry) = getData(uint256(node));\\n\\n        // Make sure the upgrade contract is set.\\n        if (address(upgradeContract) == address(0)) {\\n            revert CannotUpgrade();\\n        }\\n\\n        /**\\n         * Make sure the caller is the owner or an authorized caller, \\n         * and not a 2LD, e.g. vitalik.eth., in the grace period.\\n         */\\n\\n        if (!_canModifyName_WithData(msg.sender, owner, fuses, expiry)){\\n            revert Unauthorized(node, msg.sender);\\n        }\\n\\n        // Get the approved address.\\n        address approved = getApproved(uint256(node));\\n\\n        // Change the owner in the registry to the upgrade contract.\\n        ens.setOwner(node, address(upgradeContract));\\n\\n        // Burn the name in the wrapper.\\n        _burn(uint256(node));\\n\\n        // Call the upgrade contract to wrap the name.\\n        upgradeContract.wrapFromUpgrade(\\n            name,\\n            owner,\\n            fuses,\\n            expiry,\\n            approved,\\n            extraData\\n        );\\n    }\\n\\n    /** \\n    /* @notice Sets fuses of a name that you own the parent of\\n     * @param parentNode Parent namehash of the name e.g. vitalik.xyz would be namehash('xyz')\\n     * @param labelhash Labelhash of the name, e.g. vitalik.xyz would be keccak256('vitalik')\\n     * @param fuses Fuses to burn\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\n     */\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) public {\\n\\n        // Make the node.\\n        bytes32 node = _makeNode(parentNode, labelhash);\\n\\n        // Make sure the fuses being set do NOT include IS_DOT_ETH.\\n        _fusesAreSettable(node, fuses);\\n\\n        // Get the data from the node.\\n        (address nodeOwner, uint32 nodeFuses, uint64 nodeExpiry) = getData(uint256(node));\\n\\n        // Get the data from the parent node.\\n        (address parentOwner, uint32 parentFuses, uint64 parentExpiry) = getData(uint256(parentNode));\\n\\n        // Make sure the name is wrapped.\\n        if (ownerOf(uint256(node)) == address(0)) {\\n            revert NameIsNotWrapped();\\n        }\\n\\n        // If setting fuses on a TLD, e.g. xyz, make sure the caller is the owner or an authorized caller.\\n        if (parentNode == ROOT_NODE) {\\n\\n            // The name is a TLD. \\n\\n            // Make sure the caller is the owner or an authorized caller.\\n            if (!_canModifyName_WithData(msg.sender, nodeOwner, nodeFuses, nodeExpiry)) {\\n                revert Unauthorized(node, msg.sender);\\n            }\\n        } else {\\n\\n            // The name is NOT a TLD.\\n\\n            /** \\n             * If setting fuses on a subdomain, make sure the caller is the \\n             * owner or an authorized caller of the parent.\\n             */\\n\\n            if (!_canModifyName_WithData(msg.sender, parentOwner, parentFuses, parentExpiry)) {\\n                revert Unauthorized(parentNode, msg.sender);\\n            }\\n        }\\n\\n        // Make sure the expiry is between the old expiry and the parent expiry.\\n        expiry = _normaliseExpiry(expiry, nodeExpiry, parentExpiry);\\n\\n        // If we are setting fuses on the name make sure PARENT_CANNOT_CONTROL has not been burned.\\n        if (fuses != 0 && nodeFuses & PARENT_CANNOT_CONTROL != 0) {\\n\\n            revert OperationProhibited(node);\\n        }\\n\\n        // Burn the new fuses into the old fuses. Keep the owner and expiry the same.\\n        fuses |= nodeFuses;\\n\\n        // Set the fuses. \\n        _setFuses(node, nodeOwner, fuses, nodeExpiry, expiry);\\n\\n    }\\n\\n    /**\\n     * @notice Sets the subdomain owner in the registry and then wraps the subdomain\\n     * @param parentNode Parent namehash of the subdomain\\n     * @param label Label of the subdomain as a string\\n     * @param owner New owner in the wrapper\\n     * @param approved Address to approve for the name\\n     * @param fuses Initial fuses for the wrapped subdomain\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\n     * @return node Namehash of the subdomain\\n     */\\n\\n    function setSubnodeOwner(\\n        bytes32 parentNode,\\n        string calldata label,\\n        address owner,\\n        address approved,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) public onlyTokenOwner(parentNode) returns (bytes32 node) {\\n\\n        // Make the node from the label.\\n        bytes32 labelhash = keccak256(bytes(label));\\n        node = _makeNode(parentNode, labelhash);\\n\\n        // Make an instance of the struct to hold the data of the node and parent node.\\n        NodeData memory nodeData;\\n\\n        // Store the input parameters in the struct, we do this to solve a stack too deep issue. \\n        nodeData.label = label;\\n        nodeData.owner = owner;\\n\\n        // Get the node and parent node data. \\n        (nodeData.nodeOwner, nodeData.nodeFuses, nodeData.nodeExpiry) = getData(uint256(node));\\n        (, nodeData.parentFuses, nodeData.parentExpiry) = getData(uint256(parentNode));\\n\\n        // Checks the parent to make sure it has the permissions it needs to create or update a subdomain. \\n        _canCallSetSubnode(nodeData.parentFuses, node, nodeData.nodeOwner, nodeData.nodeFuses, nodeData.nodeExpiry);\\n\\n        // Make sure the expiry is between the old expiry and the parent expiry.\\n        expiry = _normaliseExpiry(expiry, nodeData.nodeExpiry, nodeData.parentExpiry);\\n\\n        // Checks to make sure the IS_DOT_ETH fuse is not burned in the fuses. \\n        _fusesAreSettable(node, fuses);\\n\\n        // If the name has not been set before, save the label.\\n        bytes memory name = _saveLabel(parentNode, node, label);\\n\\n        // Check to see if the name is wrapped.\\n         if (ownerOf(uint256(node)) == address(0)) {\\n\\n            // The name is NOT wrapped.\\n\\n            // Set the subnode owner in the registry.\\n            ens.setSubnodeOwner(parentNode, labelhash, address(this));\\n\\n            // Wrap the name in the wrapper.\\n            _wrap(node, name, owner, fuses, expiry);\\n\\n        } else {\\n\\n            // The name is wrapped, so update it.\\n            _updateName(parentNode, node, nodeData.nodeOwner, nodeData.nodeFuses, nodeData.nodeExpiry, nodeData.label, nodeData.owner, fuses, expiry);\\n        }\\n\\n        // Add an approved address\\n        if (approved != address(0)) {\\n            super._approve(approved, uint256(node));\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the subdomain owner in the registry with records and then wraps the subdomain\\n     * @param parentNode parent namehash of the subdomain\\n     * @param label label of the subdomain as a string\\n     * @param owner new owner in the wrapper\\n     * @param approved address to approve for the name\\n     * @param resolver resolver contract in the registry\\n     * @param ttl ttl in the registry\\n     * @param fuses initial fuses for the wrapped subdomain\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\n     * @return node Namehash of the subdomain\\n     */\\n\\n    function setSubnodeRecord(\\n        bytes32 parentNode,\\n        string memory label,\\n        address owner,\\n        address approved,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) public onlyTokenOwner(parentNode) returns (bytes32 node) {\\n\\n        // Make the node. \\n        bytes32 labelhash = keccak256(bytes(label));\\n        node = _makeNode(parentNode, labelhash);\\n\\n        // Make an instance of the struct to hold input parameters, the data of the node and parent node.\\n        NodeData memory nodeData;\\n\\n        // Store the input parameters in the struct, we do this to solve a stack too deep issue. \\n        nodeData.label = label;\\n        nodeData.owner = owner;\\n\\n        // Get the data from the node and the parent node and save it in the struct. \\n        (nodeData.nodeOwner, nodeData.nodeFuses, nodeData.nodeExpiry) = getData(uint256(node));\\n        (nodeData.parentOwner, nodeData.parentFuses, nodeData.parentExpiry) = getData(uint256(parentNode));\\n\\n        // Checks the parent to make sure it has the permissions it needs to create or update a subdomain. \\n        _canCallSetSubnode(nodeData.parentFuses, node, nodeData.nodeOwner, nodeData.nodeFuses, nodeData.nodeExpiry);\\n\\n        // Make sure the expiry is between the old expiry and the parent expiry.\\n        expiry = _normaliseExpiry(expiry, nodeData.nodeExpiry, nodeData.parentExpiry);\\n\\n        // Checks to make sure the IS_DOT_ETH fuse is not burned in the fuses. \\n        _fusesAreSettable(node, fuses);\\n\\n        // If the name has not been set before, save the label.\\n        bytes memory name = _saveLabel(parentNode, node, label);\\n\\n        // Check to see if the name is wrapped.\\n        if (ownerOf(uint256(node)) == address(0)) {\\n            \\n            // The name is NOT wrapped. \\n\\n            // Set the subnode record in the registry.\\n            ens.setSubnodeRecord(\\n                parentNode,\\n                labelhash,\\n                address(this),\\n                resolver,\\n                ttl\\n            );\\n\\n            // Wrap the name in the wrapper.\\n            _wrap(node, name, owner, fuses, expiry);\\n\\n        } else {\\n\\n            // The name is wrapped. \\n            \\n            //Update the name in the registry.\\n            ens.setSubnodeRecord(\\n                parentNode,\\n                labelhash,\\n                address(this),\\n                resolver,\\n                ttl\\n            );\\n\\n            // Update the name in the wrapper.\\n            _updateName(parentNode, node, nodeData.nodeOwner, nodeData.nodeFuses, nodeData.nodeExpiry, nodeData.label, nodeData.owner, fuses, expiry);\\n        }\\n\\n        // Check if there is an approved address and if so add it.\\n        if (approved != address(0)) {\\n            super._approve(approved, uint256(node));\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets records for the name in the ENS Registry\\n     * @param node Namehash of the name to set a record for\\n     * @param owner New owner in the registry\\n     * @param resolver Resolver contract\\n     * @param ttl Time to live in the registry\\n     */\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    )\\n        public\\n        onlyTokenOwner(node)\\n        operationAllowed(\\n            node,\\n            CANNOT_TRANSFER | CANNOT_SET_RESOLVER | CANNOT_SET_TTL\\n        )\\n    {\\n        // Set the record in the registry.\\n        ens.setRecord(node, address(this), resolver, ttl);\\n\\n        // Check to see if the name is being burned. \\n        if (owner == address(0)) {\\n\\n            // The name is being burned.\\n\\n            // Burn the name both in the wrapper and the registry.\\n            _burnAll(node);\\n\\n        } else {\\n\\n            // The name is NOT being burned.\\n\\n            // Get the current owner of the name. \\n            address oldOwner = ownerOf(uint256(node));\\n\\n            // Transfer the name to the new owner.\\n            _transfer(oldOwner, owner, uint256(node), 1, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets resolver contract in the registry\\n     * @param node namehash of the name\\n     * @param resolver the resolver contract\\n     */\\n\\n    function setResolver(\\n        bytes32 node,\\n        address resolver\\n    ) public onlyTokenOwner(node) operationAllowed(node, CANNOT_SET_RESOLVER) {\\n        ens.setResolver(node, resolver);\\n    }\\n\\n    /**\\n     * @notice Sets TTL in the registry\\n     * @param node Namehash of the name\\n     * @param ttl TTL in the registry\\n     */\\n\\n    function setTTL(\\n        bytes32 node,\\n        uint64 ttl\\n    ) public onlyTokenOwner(node) operationAllowed(node, CANNOT_SET_TTL) {\\n        ens.setTTL(node, ttl);\\n    }\\n\\n    /**\\n     * @dev Checks to see if any of the fuses are burned, and if so, reverts.\\n     * @param node The namehash of the name to check fuses on.\\n     * @param fuseMask A bitmask of fuses that must not be burned.\\n     */\\n\\n    modifier operationAllowed(bytes32 node, uint32 fuseMask) {\\n        (, uint32 fuses, ) = getData(uint256(node));\\n\\n        // Check to see if any of the fuses are burned specified by the fuseMask.\\n        if (fuses & fuseMask != 0) {\\n            revert OperationProhibited(node);\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Check whether a name can call setSubnodeOwner/setSubnodeRecord.\\n     * @dev Checks both CANNOT_CREATE_SUBDOMAIN and PARENT_CANNOT_CONTROL and whether not they have been burned\\n     *      and checks whether the owner of the subdomain is 0x0 for creating or already exists for\\n     *      replacing a subdomain. If either conditions are true, then it is possible to call\\n     *      setSubnodeOwner\\n     * @param parentFuses The fuses of the parent name.\\n     * @param node The namehash of the subname to check.\\n     */\\n\\n    function _canCallSetSubnode(\\n        uint32 parentFuses,\\n        bytes32 node,\\n        address nodeOwner,\\n        uint32 nodeFuses,\\n        uint64 nodeExpiry\\n    ) internal view {\\n\\n        // Check if the name is expired and the owner is the 0 address. \\n        if ((nodeExpiry < block.timestamp) && (nodeOwner == address(0) || ens.owner(node) == address(0))) {\\n            \\n            // The name is expired.\\n\\n            // Check to see if the parent has CANNOT_CREATE_SUBDOMAIN burned.\\n            if (parentFuses & CANNOT_CREATE_SUBDOMAIN != 0) {\\n                revert OperationProhibited(node);\\n            }\\n        } else {\\n\\n            // The name is NOT expired.  \\n\\n            // Check if the node has PARENT_CANNOT_CONTROL set.\\n            if (nodeFuses & PARENT_CANNOT_CONTROL != 0) {\\n                revert OperationProhibited(node);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks all Fuses in the mask are burned for the node\\n     * @param node Namehash of the name\\n     * @param fuseMask The fuses you want to check\\n     * @return Boolean of whether or not all the selected fuses are burned\\n     */\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) public view returns (bool) {\\n\\n        (, uint32 fuses, ) = getData(uint256(node));\\n\\n        // Check to see if all the fuses are burned as specified by the fuseMask.\\n        return fuses & fuseMask == fuseMask;\\n    }\\n\\n    /* Internal Functions */\\n\\n    /**\\n     * @notice Checks if the address is the owner or operator of the name. This function \\n     * is a version of the canModifyName function, where the data is also passed, avoiding an extra getData call.\\n     * @param addr The address to check for permissions.\\n     * @param owner The owner of the name.\\n     * @param fuses The fuses of the name.\\n     * @param expiry The expiry of the name.\\n     * @return Whether or not the address is the owner or an operator of the name.\\n     */\\n\\n    function _canModifyName_WithData(\\n        address addr,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal view returns (bool) {\\n\\n        return\\n            // Check if the address is the owner or an approved-for-all address.\\n            (owner == addr || isApprovedForAll(owner, addr)) &&\\n\\n            // Also if the name is a .eth 2LD, e.g, vitalik.eth, make sure that it is not in the grace period.\\n            !_isETH2LDInGracePeriod(fuses, expiry);\\n    }\\n\\n    /**\\n     * @notice This function is called by the ERC1155 contract when a token is transferred. \\n     * @dev It has a number of checks including checking to see if the name is transferable.\\n     * @param id The id of the token being transferred.\\n     * @param fuses The fuses of the token being transferred.\\n     * @param expiry The expiry of the token being transferred.\\n    */\\n\\n    function _beforeTransfer(\\n        uint256 id,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal override {\\n        // For this check, treat .eth 2LDs as expiring at the start of the grace period.\\n        if (fuses & IS_DOT_ETH == IS_DOT_ETH) {\\n            expiry -= GRACE_PERIOD;\\n        }\\n\\n        // Check to see if the name is expired.\\n        if (expiry < block.timestamp) {\\n\\n            // The name is expired.\\n\\n            // Check to see if the name is emancipated. If it is, then it is NOT transferable.            \\n            if (fuses & PARENT_CANNOT_CONTROL != 0) {\\n                revert(\\\"ERC1155: insufficient balance for transfer\\\");\\n            }\\n        } else {\\n\\n            // The name is NOT expired.\\n\\n            // Check to see if the name is transferable.\\n            if (fuses & CANNOT_TRANSFER != 0) {\\n                revert OperationProhibited(bytes32(id));\\n            }\\n        }\\n\\n        // Check to see if CANNOT_APPROVE is burned, if not then delete the approval.\\n        if (fuses & CANNOT_APPROVE == 0) {\\n            delete _tokenApprovals[id];\\n        }\\n    }\\n\\n    // Currently this is a dummy function. It needs to also be removed from ERC1155Fuse to remove it. \\n    function _clearOwnerAndFuses(\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal pure override returns (address, uint32) {\\n    }\\n\\n    /**\\n     * @notice This function creates a namehash from a parent node and a labelhash\\n     *         according to the ENS namehash specification.\\n     * @param parentNode The parent node.\\n     * @param labelhash The labelhash of the label.\\n     */\\n\\n    function _makeNode(\\n        bytes32 parentNode,\\n        bytes32 labelhash\\n    ) private pure returns (bytes32) {\\n\\n        // Create the namehash.\\n        return keccak256(abi.encodePacked(parentNode, labelhash));\\n    }\\n\\n    /**\\n     * @notice This function prepends a label to a name using the DNS encoding format.\\n     * @param label The label to prepend.\\n     * @param name The name to prepend the label to.\\n     */\\n\\n    function _addLabel(\\n        string memory label,\\n        bytes memory name\\n    ) internal pure returns (bytes memory ret) {\\n\\n        // Make sure the label is not empty.\\n        if (bytes(label).length < 1) {\\n            revert LabelTooShort();\\n        }\\n\\n        // Make sure the label is not too long.\\n        if (bytes(label).length > 255) {\\n            revert LabelTooLong(label);\\n        }\\n\\n        // Prepend the label to the name using the DNS encoding format.\\n        return abi.encodePacked(uint8(bytes(label).length), label, name);\\n    }\\n\\n\\n    /**\\n     * @notice Mint the name as an ERC1155 token.\\n     * @param node The namehash of the name.\\n     * @param owner The owner of the name.\\n     * @param fuses The fuses to set on the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function _mint(\\n        bytes32 node,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal override {\\n\\n        /** \\n         * Check to make sure if an fuses are being burned,\\n         * also PARENT_CANNOT_CONTROL is being burned.\\n         */\\n\\n        _canFusesBeBurned(node, fuses);\\n\\n        // Get the data from the node.\\n        (address oldOwner, , ) = super.getData(uint256(node));\\n\\n        // Check to see if the name was previously owned. \\n        if (oldOwner != address(0)) {\\n\\n            // burn the token. \\n            _burn(uint256(node));\\n\\n            emit NameUnwrapped(node, address(0));\\n        }\\n\\n        // Mint the token.\\n        super._mint(node, owner, fuses, expiry);\\n    }\\n\\n    /**\\n     * @notice This is a helper function that mints the name as well as\\n     *         emits the NameWrapped event.\\n     * @param node The namehash of the name.\\n     * @param name The name in DNS format.\\n     * @param wrappedOwner The owner of the wrapped name.\\n     * @param fuses The fuses to set on the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function _wrap(\\n        bytes32 node,\\n        bytes memory name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal {\\n\\n        // Mint the token.\\n        _mint(node, wrappedOwner, fuses, expiry);\\n\\n        // This function is needed to emit the NameWrapped event.\\n        emit NameWrapped(node, name, wrappedOwner, fuses, expiry);\\n    }\\n\\n\\n    /**\\n     * @notice This function saves the label of a name if it has not already been set.\\n     * @param parentNode The parent node of the name.\\n     * @param node The namehash of the name.\\n     * @param label The label of the name.\\n     */\\n\\n    function _saveLabel(\\n        bytes32 parentNode,\\n        bytes32 node,\\n        string memory label\\n    ) internal returns (bytes memory) {\\n\\n        // If the name has not been set then set it. \\n        if (names[node].length == 0) {\\n\\n            // Prepend the label to the parent name.\\n            bytes memory name = _addLabel(label, names[parentNode]);\\n\\n            // Save the name.\\n            names[node] = name;\\n            \\n            return name;\\n        }\\n\\n        // If the name is already set then just return it. \\n        return names[node];\\n    }\\n\\n\\n    /**\\n     * @notice This function updates a name.\\n     * @param parentNode The parent node of the name.\\n     * @param node The namehash of the name.\\n     * @param label The label of the name.\\n     * @param owner The owner of the name.\\n     * @param fuses The fuses to set on the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function _updateName(\\n        bytes32 parentNode,\\n        bytes32 node,\\n        address nodeOwner,\\n        uint32 nodeFuses,\\n        uint64 nodeExpiry,\\n        string memory label,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal {\\n\\n        // If the name is not set, set it.\\n        _saveLabel(parentNode, node, label);\\n\\n        // Set the data of the name. \\n        _setFuses(node, nodeOwner, nodeFuses | fuses, nodeExpiry, expiry);\\n\\n        // Check to see if the owner is being set to the 0 address, i.e. is being burned.\\n        if (owner == address(0)) {\\n\\n            // burn the name in both the wrapper and the registry.\\n            _burnAll(node);\\n\\n        } else {\\n\\n            // The owner is not address(0), so transfer the owner of the name to the new owner. \\n            _transfer(nodeOwner, owner, uint256(node), 1, \\\"\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice This function normalises the expiry of a name, setting the expiry\\n     *         between the old expiry and the max expiry.\\n     * @param expiry The expiry of the name.\\n     * @param oldExpiry The old expiry of the name.\\n     * @param maxExpiry The maximum expiry of the name.\\n     */\\n\\n    function _normaliseExpiry(\\n        uint64 expiry,\\n        uint64 oldExpiry,\\n        uint64 maxExpiry\\n    ) private pure returns (uint64) {\\n\\n        // The expiry cannot be more than maximum. \\n        if (expiry > maxExpiry) {\\n            expiry = maxExpiry;\\n        }\\n        // The expiry cannot be less than the old expiry.\\n        if (expiry < oldExpiry) {\\n            expiry = oldExpiry;\\n        }\\n\\n        return expiry;\\n    }\\n\\n    /**\\n     * @notice This function wraps a .eth 2LD, i.e., vitalik.eth.\\n     * @param label The label of the name.\\n     * @param wrappedOwner The owner of the wrapped name.\\n     * @param approved The approved address of the name.\\n     * @param fuses The fuses to set on the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     * @param resolver The resolver contract of the name.\\n     */\\n\\n    function _wrapETH2LD(\\n        string memory label,\\n        address wrappedOwner,\\n        address approved, \\n        uint32 fuses,\\n        uint64 expiry,\\n        address resolver\\n    ) private {\\n\\n        // Create the node from the label.\\n        bytes32 labelhash = keccak256(bytes(label));\\n        bytes32 node = _makeNode(ETH_NODE, labelhash);\\n\\n        // Hardcode the DNS encoded \\\"eth\\\" string for gas savings.\\n        bytes memory name = _addLabel(label, \\\"\\\\x03eth\\\\x00\\\");\\n\\n        // Save the name.\\n        names[node] = name;\\n\\n        // Wrap the .eth 2LD name in the wrapper, and burn CANNOT_BURN_NAME , PARENT_CANNOT_CONTROL and IS_DOT_ETH.\\n        _wrap(\\n            node,\\n            name,\\n            wrappedOwner,\\n            fuses | CANNOT_BURN_NAME | PARENT_CANNOT_CONTROL | IS_DOT_ETH,\\n            expiry\\n        );\\n\\n        // Add an approved address.\\n        if (approved != address(0)) {\\n            super._approve(approved, uint256(node));\\n        }\\n\\n        // Check to make sure the resolver address is not the 0 address, if not then set the resolver.\\n        if (resolver != address(0)) {\\n            ens.setResolver(node, resolver);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function burns the token and sets the address to 0 in the registry. \\n     * @param node The namehash of the name.\\n     */\\n\\n    function _burnAll(bytes32 node) private {\\n\\n        // Check to see if CANNOT_BURN_NAME is burned.\\n        if (allFusesBurned(node, CANNOT_BURN_NAME)) {\\n            revert OperationProhibited(node);\\n        }\\n\\n        // Burn token and fuse data\\n        _burn(uint256(node));\\n\\n        // Set the owner in the registry.\\n        ens.setOwner(node, address(0));\\n\\n        emit NameUnwrapped(node, address(0));\\n    }\\n\\n    /**\\n     * @notice This function sets the fuses of a name.\\n     * @param node The namehash of the name.\\n     * @param owner The owner of the name.\\n     * @param fuses The fuses to set on the name.\\n     * @param oldExpiry The old expiry of the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function _setFuses(\\n        bytes32 node,\\n        address owner,\\n        uint32 fuses,\\n        uint64 oldExpiry,\\n        uint64 expiry\\n    ) internal {\\n\\n        _setData(node, owner, fuses, expiry);\\n\\n        emit FusesSet(node, fuses);\\n\\n        // Check to see if the expiry has been extended.\\n        if (expiry > oldExpiry) {\\n            emit ExpiryExtended(node, expiry);\\n        }\\n    }\\n\\n    /**\\n     * @notice This function sets the data of a name.\\n     * @param node The namehash of the name.\\n     * @param owner The owner of the name.\\n     * @param fuses The fuses to set on the name.\\n     * @param expiry The expiry date of the name, in seconds since the Unix epoch.\\n     */\\n\\n    function _setData(\\n        bytes32 node,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal {\\n\\n        /** \\n         * Check to make sure if any fuse is being burned,\\n         * also PARENT_CANNOT_CONTROL and CANNOT_BURN_NAME are being burned.\\n         */\\n\\n        _canFusesBeBurned(node, fuses);\\n\\n        super._setData(uint256(node), owner, fuses, expiry);\\n    }\\n\\n    /**\\n     * @notice Checks to see if fuses are being burned, and if so,\\n     *         checks to see if PARENT_CANNOT_CONTROL is also being burned.\\n     * @param node The namehash of the name.\\n     * @param fuses The fuses of the name.\\n     */\\n    \\n    function _canFusesBeBurned(bytes32 node, uint32 fuses) internal pure {\\n\\n        if (\\n            \\n            // Checks to see if any fuses are being burned.\\n            fuses != 0 &&  \\n\\n            // Check to see if PARENT_CANNOT_CONTROL is being burned.\\n            fuses & PARENT_CANNOT_CONTROL != PARENT_CANNOT_CONTROL\\n        ) {\\n            revert OperationProhibited(node);\\n        }\\n    }\\n\\n    /**\\n     * @notice Check to make sure the special fuse, IS_DOT_ETH is not being burned.\\n     * @param node The namehash of the name.\\n     * @param fuses The fuses of the name.\\n     */\\n\\n    function _fusesAreSettable(bytes32 node, uint32 fuses) internal pure {\\n\\n        // Check to make sure that only allowable fuses are being burned, i.e. not IS_DOT_ETH.\\n        if (fuses | USER_SETTABLE_FUSES != USER_SETTABLE_FUSES) {\\n            revert OperationProhibited(node);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks to see if the name is a .eth 2LD in the grace period.\\n     * @param fuses The fuses of the name.\\n     * @param expiry The expiry of the name.\\n     */\\n\\n    function _isETH2LDInGracePeriod(\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal view returns (bool) {\\n\\n        return\\n\\n            // Check to see if the name is a .eth 2LD.\\n            fuses & IS_DOT_ETH == IS_DOT_ETH &&\\n\\n            // Check to see if the name is in the grace period.\\n            expiry - GRACE_PERIOD < block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x0854ff87416222a4f01867a8d8620f465abc9b0072bc29ff53277cac809b93b4\",\"license\":\"MIT\"},\"contracts/layertwo/optimism/wrapper/interfaces/IL2NameWrapper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"ens-contracts/registry/ENS.sol\\\";\\nimport \\\"ens-contracts/ethregistrar/IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"ens-contracts/wrapper/IMetadataService.sol\\\";\\nimport \\\"ens-contracts/wrapper/INameWrapperUpgrade.sol\\\";\\n\\n// These are named fuses which can be set by name owners. \\nuint32 constant CAN_DO_EVERYTHING = 0;\\nuint32 constant CANNOT_BURN_NAME = 1;\\nuint32 constant CANNOT_BURN_FUSES = 2;\\nuint32 constant CANNOT_TRANSFER = 4;\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\nuint32 constant CANNOT_SET_TTL = 16;\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\nuint32 constant CANNOT_APPROVE = 64;\\n\\n// These are named fuses which can be set by parent name owners on the name.\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 17;\\n\\n// This is a special fuse that is set for .eth names and only used internally. \\nuint32 constant IS_DOT_ETH = 1 << 18;\\n\\n// A filter for all the fuses that can be set by the parent name owner.\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000; // 0b11111111111111110000000000000000\\n\\n// A filter for all fuses the fuses that can be set by name owners.\\nuint32 constant USER_SETTABLE_FUSES = 0x3007F; // 0b00000000000000110000000001111111 \\n\\ninterface IL2NameWrapper is IERC1155 {\\n    event NameWrapped(\\n        bytes32 indexed node,\\n        bytes name,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    );\\n\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\n\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\n\\n    function ens() external view returns (ENS);\\n\\n    function metadataService() external view returns (IMetadataService);\\n\\n    function names(bytes32) external view returns (bytes memory);\\n\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\n\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\n\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\n\\n    function registerAndWrapEth2LD(\\n        string calldata label,\\n        address wrappedOwner,\\n        address approved,\\n        uint256 duration,\\n        address resolver,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint64 expiry);\\n\\n    function renewEth2LD(\\n        bytes32 labelhash,\\n        uint256 duration\\n    ) external returns (uint64 expiry);\\n\\n    function setFuses(\\n        bytes32 node,\\n        uint16 ownerControlledFuses\\n    ) external returns (uint32 newFuses);\\n\\n    function setChildFuses(\\n        bytes32 parentNode,\\n        bytes32 labelhash,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        string calldata label,\\n        address owner,\\n        address approved,\\n        address resolver,\\n        uint64 ttl,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        string calldata label,\\n        address newOwner,\\n        address approved,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32);\\n\\n    function extendExpiry(\\n        bytes32 node,\\n        bytes32 labelhash,\\n        uint64 expiry\\n    ) external returns (uint64);\\n\\n    function canModifyName(\\n        bytes32 node,\\n        address addr\\n    ) external view returns (bool);\\n\\n    // wrapTLD function \\n    function wrapTLD(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) external returns (bytes32 /* node */);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function ownerOf(uint256 id) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function getData(\\n        uint256 id\\n    ) external view returns (address, uint32, uint64);\\n\\n    function setMetadataService(IMetadataService _metadataService) external;\\n\\n    function uri(uint256 tokenId) external view returns (string memory);\\n\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\n\\n    function allFusesBurned(\\n        bytes32 node,\\n        uint32 fuseMask\\n    ) external view returns (bool);\\n    // just deleting this temporarily\\n\\n}\\n\",\"keccak256\":\"0x7efff89e4a89a665f4e702a13506e39d207e580086aac0f400ae2f76a21aa868\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/ethregistrar/IBaseRegistrar.sol\":{\"content\":\"import \\\"../registry/ENS.sol\\\";\\nimport \\\"./IBaseRegistrar.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface IBaseRegistrar is IERC721 {\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRegistered(\\n        uint256 indexed id,\\n        address indexed owner,\\n        uint256 expires\\n    );\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external view returns (uint256);\\n\\n    // Returns true if the specified name is available for registration.\\n    function available(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(\\n        uint256 id,\\n        address owner,\\n        uint256 duration\\n    ) external returns (uint256);\\n\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external;\\n}\\n\",\"keccak256\":\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\"},\"lib/ens-contracts/contracts/registry/ENS.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\"},\"lib/ens-contracts/contracts/utils/ERC20Recoverable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.17 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\n */\\n\\ncontract ERC20Recoverable is Ownable {\\n    /**\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\n    @dev The contract is Ownable and only the owner can call the recover function.\\n    @param _to The address to send the tokens to.\\n@param _token The address of the ERC20 token to recover\\n    @param _amount The amount of tokens to recover.\\n */\\n    function recoverFunds(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/BytesUtils.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nlibrary BytesUtils {\\n    /*\\n     * @dev Returns the keccak-256 hash of a byte range.\\n     * @param self The byte string to hash.\\n     * @param offset The position to start hashing at.\\n     * @param len The number of bytes to hash.\\n     * @return The hash of the byte range.\\n     */\\n    function keccak(\\n        bytes memory self,\\n        uint256 offset,\\n        uint256 len\\n    ) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\n     * @param self The DNS-encoded name to hash.\\n     * @param offset The offset at which to start hashing.\\n     * @return The namehash of the name.\\n     */\\n    function namehash(\\n        bytes memory self,\\n        uint256 offset\\n    ) internal pure returns (bytes32) {\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\n        if (labelhash == bytes32(0)) {\\n            require(offset == self.length - 1, \\\"namehash: Junk at end of name\\\");\\n            return bytes32(0);\\n        }\\n        return\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\n     * @param self The byte string to read a label from.\\n     * @param idx The index to read a label at.\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\n     * @return newIdx The index of the start of the next label.\\n     */\\n    function readLabel(\\n        bytes memory self,\\n        uint256 idx\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\n        require(idx < self.length, \\\"readLabel: Index out of bounds\\\");\\n        uint256 len = uint256(uint8(self[idx]));\\n        if (len > 0) {\\n            labelhash = keccak(self, idx + 1, len);\\n        } else {\\n            labelhash = bytes32(0);\\n        }\\n        newIdx = idx + len + 1;\\n    }\\n}\\n\",\"keccak256\":\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/Controllable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool active);\\n\\n    function setController(address controller, bool active) public onlyOwner {\\n        controllers[controller] = active;\\n        emit ControllerChanged(controller, active);\\n    }\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9191656a82eda6763cda29ce893ddbfddb6c43559ff3b90c00a184e14e1fa1\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/ERC1155Fuse.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/* This contract is a variation on ERC1155 with the additions of _setData, getData and _beforeTransfer and ownerOf. _setData and getData allows the use of the other 96 bits next to the address of the owner for extra data. We use this to store 'fuses' that control permissions that can be burnt. 32 bits are used for the fuses themselves and 64 bits are used for the expiry of the name. When a name has expired, its fuses will be be set back to 0 */\\n\\nabstract contract ERC1155Fuse is ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed approved,\\n        uint256 indexed tokenId\\n    );\\n    mapping(uint256 => uint256) public _tokens;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) internal _tokenApprovals;\\n\\n    /**************************************************************************\\n     * ERC721 methods\\n     *************************************************************************/\\n\\n    function ownerOf(uint256 id) public view virtual returns (address) {\\n        (address owner, , ) = getData(id);\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(\\n        uint256 tokenId\\n    ) public view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(\\n        address account,\\n        uint256 id\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            account != address(0),\\n            \\\"ERC1155: balance query for the zero address\\\"\\n        );\\n        address owner = ownerOf(id);\\n        if (owner == account) {\\n            return 1;\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual override returns (uint256[] memory) {\\n        require(\\n            accounts.length == ids.length,\\n            \\\"ERC1155: accounts and ids length mismatch\\\"\\n        );\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(\\n        address operator,\\n        bool approved\\n    ) public virtual override {\\n        require(\\n            msg.sender != operator,\\n            \\\"ERC1155: setting approval status for self\\\"\\n        );\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(\\n        address account,\\n        address operator\\n    ) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev Returns the Name's owner address and fuses\\n     */\\n    function getData(\\n        uint256 tokenId\\n    ) public view virtual returns (address owner, uint32 fuses, uint64 expiry) {\\n        uint256 t = _tokens[tokenId];\\n        owner = address(uint160(t));\\n        expiry = uint64(t >> 192);\\n        fuses = uint32(t >> 160);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _transfer(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            ids.length == amounts.length,\\n            \\\"ERC1155: ids and amounts length mismatch\\\"\\n        );\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            (address oldOwner, uint32 fuses, uint64 expiry) = getData(id);\\n\\n            _beforeTransfer(id, fuses, expiry);\\n\\n            require(\\n                amount == 1 && oldOwner == from,\\n                \\\"ERC1155: insufficient balance for transfer\\\"\\n            );\\n            _setData(id, to, fuses, expiry);\\n        }\\n\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            from,\\n            to,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**************************************************************************\\n     * Internal/private methods\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Sets the Name's owner address and fuses\\n     */\\n    function _setData(\\n        uint256 tokenId,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal virtual {\\n        _tokens[tokenId] =\\n            uint256(uint160(owner)) |\\n            (uint256(fuses) << 160) |\\n            (uint256(expiry) << 192);\\n    }\\n\\n    function _beforeTransfer(\\n        uint256 id,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal virtual;\\n\\n    function _clearOwnerAndFuses(\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal virtual returns (address, uint32);\\n\\n    function _mint(\\n        bytes32 node,\\n        address owner,\\n        uint32 fuses,\\n        uint64 expiry\\n    ) internal virtual {\\n        uint256 tokenId = uint256(node);\\n        (address oldOwner, uint32 oldFuses, uint64 oldExpiry) = getData(\\n            uint256(node)\\n        );\\n\\n        uint32 parentControlledFuses = (uint32(type(uint16).max) << 16) &\\n            oldFuses;\\n\\n        if (oldExpiry > expiry) {\\n            expiry = oldExpiry;\\n        }\\n\\n        if (oldExpiry >= block.timestamp) {\\n            fuses = fuses | parentControlledFuses;\\n        }\\n\\n        require(oldOwner == address(0), \\\"ERC1155: mint of existing token\\\");\\n        require(owner != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(\\n            owner != address(this),\\n            \\\"ERC1155: newOwner cannot be the NameWrapper contract\\\"\\n        );\\n\\n        _setData(tokenId, owner, fuses, expiry);\\n        emit TransferSingle(msg.sender, address(0x0), owner, tokenId, 1);\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            owner,\\n            tokenId,\\n            1,\\n            \\\"\\\"\\n        );\\n    }\\n\\n    function _burn(uint256 tokenId) internal virtual {\\n        (address oldOwner, uint32 fuses, uint64 expiry) = ERC1155Fuse.getData(\\n            tokenId\\n        );\\n        (, fuses) = _clearOwnerAndFuses(oldOwner, fuses, expiry);\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n        // Fuses and expiry are kept on burn\\n        _setData(tokenId, address(0x0), fuses, expiry);\\n        emit TransferSingle(msg.sender, oldOwner, address(0x0), tokenId, 1);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal {\\n        (address oldOwner, uint32 fuses, uint64 expiry) = getData(id);\\n\\n        _beforeTransfer(id, fuses, expiry);\\n\\n        require(\\n            amount == 1 && oldOwner == from,\\n            \\\"ERC1155: insufficient balance for transfer\\\"\\n        );\\n\\n        if (oldOwner == to) {\\n            return;\\n        }\\n\\n        _setData(id, to, fuses, expiry);\\n\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response != IERC1155Receiver(to).onERC1155Received.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                if (\\n                    response !=\\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\\n                ) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    /* ERC721 internal functions */\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfbbd36e7f5df0fe7a8e9199783af99ac61ab24122e4a9fdb072bbd4cd676a88b\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/IMetadataService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IMetadataService {\\n    function uri(uint256) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\",\"license\":\"MIT\"},\"lib/ens-contracts/contracts/wrapper/INameWrapperUpgrade.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface INameWrapperUpgrade {\\n    function wrapFromUpgrade(\\n        bytes calldata name,\\n        address wrappedOwner,\\n        uint32 fuses,\\n        uint64 expiry,\\n        address approved,\\n        bytes calldata extraData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\",\"license\":\"MIT\"},\"lib/forge-std/src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\",\"keccak256\":\"0x91d5413c2434ca58fd278b6e1e79fd98d10c83931cc2596a6038eee4daeb34ba\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162004b4838038062004b488339810160408190526200003491620001ea565b6200003f3362000181565b6001600160a01b03828116608052600580546001600160a01b031916918316919091179055600163fffeffff60a01b03197fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb498190557fafa26c20e8b3d9a2853d642cfe1021dae26242ffedfac91c97aab212c1a4b93b55604080518082019091526001815260006020808301829052908052600790527f6d5257204ebe7d88fd91ae87941cb2dd9d8062b64ae5a2bd2d28ec40b9fbf6df90620001039082620002ce565b506040805180820190915260058152626cae8d60e31b6020808301919091527f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae600052600790527f67a5df553dfa5ea6cf321241c7a45b123bd5d46f0e6183b7f22d603c884a435590620001789082620002ce565b5050506200039a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001e757600080fd5b50565b60008060408385031215620001fe57600080fd5b82516200020b81620001d1565b60208401519092506200021e81620001d1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200025457607f821691505b6020821081036200027557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002c957600081815260208120601f850160051c81016020861015620002a45750805b601f850160051c820191505b81811015620002c557828155600101620002b0565b5050505b505050565b81516001600160401b03811115620002ea57620002ea62000229565b6200030281620002fb84546200023f565b846200027b565b602080601f8311600181146200033a5760008415620003215750858301515b600019600386901b1c1916600185901b178555620002c5565b600085815260208120601f198616915b828110156200036b578886015182559484019460019091019084016200034a565b50858210156200038a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161473062000418600039600081816103b201528181610810015281816108be0152818161096401528181610b1d01528181610c33015281816116ec0152818161178401528181611a0d01528181611bb301528181611d190152818161217b015281816129d601528181612e7301526130a001526147306000f3fe608060405234801561001057600080fd5b506004361061022c5760003560e01c80635d3590d51161013b578063c93ab3fd116100b8578063e985e9c51161007c578063e985e9c51461057a578063ed70554d1461058d578063f242432a146105ad578063f2fde38b146105c0578063faf047d1146105d357600080fd5b8063c93ab3fd1461050b578063cf4088231461051e578063d9f09cee14610531578063da8c229e14610544578063e0dba60f1461056757600080fd5b8063a22cb465116100ff578063a22cb465146104ac578063adf4960a146104bf578063b1b36f28146104d2578063b6bcad26146104e5578063c76795f5146104f857600080fd5b80635d3590d5146104425780636352211e146104555780636e5d6ad214610468578063715018a6146104935780638da5cb5b1461049b57600080fd5b80631896f70a116101c95780633f15457f1161018d5780633f15457f146103ad578063402906fc146103d457806341415eab146103fc5780634e1273f41461040f578063530954671461042f57600080fd5b80631896f70a1461034e5780631f4e15041461036157806320c38e2b146103745780632eb2c2d61461038757806333c69ea91461039a57600080fd5b8062fdd58e146102315780630178fe3f1461025757806301ffc9a71461029d578063081812fc146102c0578063095ea7b3146102e05780630cd57c4f146102f55780630e89341c1461030857806314ab9038146103285780631534e1771461033b575b600080fd5b61024461023f36600461351f565b6105e6565b6040519081526020015b60405180910390f35b61026a61026536600461354b565b610693565b604080516001600160a01b03909416845263ffffffff90921660208401526001600160401b03169082015260600161024e565b6102b06102ab36600461357a565b6106d4565b604051901515815260200161024e565b6102d36102ce36600461354b565b6106f9565b60405161024e9190613597565b6102f36102ee36600461351f565b61073e565b005b61024461030336600461361e565b610784565b61031b61031636600461354b565b610a1e565b60405161024e91906136e4565b6102f36103363660046136f7565b610a90565b6102f3610349366004613723565b610b8a565b6102f361035c366004613740565b610bb4565b6006546102d3906001600160a01b031681565b61031b61038236600461354b565b610c6a565b6102f36103953660046138d3565b610d04565b6102f36103a8366004613980565b610f42565b6102d37f000000000000000000000000000000000000000000000000000000000000000081565b6103e76103e23660046139d8565b61107d565b60405163ffffffff909116815260200161024e565b6102b061040a366004613740565b61111c565b61042261041d3660046139fb565b611172565b60405161024e9190613af8565b6005546102d3906001600160a01b031681565b6102f3610450366004613b0b565b61129b565b6102d361046336600461354b565b61131c565b61047b610476366004613b4c565b611327565b6040516001600160401b03909116815260200161024e565b6102f36114b8565b6000546001600160a01b03166102d3565b6102f36104ba366004613b8f565b6114cc565b6102b06104cd366004613bbd565b6115a2565b6102446104e0366004613be0565b6115c7565b6102f36104f3366004613723565b611856565b61047b610506366004613ca2565b611880565b6102f3610519366004613cc4565b611932565b6102f361052c366004613d2f565b611b10565b61047b61053f366004613d67565b611c65565b6102b0610552366004613723565b60046020526000908152604090205460ff1681565b6102f3610575366004613b8f565b611e09565b6102b0610588366004613dfb565b611e70565b61024461059b36600461354b565b60016020526000908152604090205481565b6102f36105bb366004613e29565b611e9e565b6102f36105ce366004613723565b611f4b565b6102446105e1366004613e91565b611fc4565b60006001600160a01b0383166106575760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b60006106628361131c565b9050836001600160a01b0316816001600160a01b03160361068757600191505061068d565b60009150505b92915050565b60008181526001602052604090205460a081901c60c082901c428110156106cd5761ffff19620100008316016106c857600092505b600091505b9193909250565b60006001600160e01b03198216630f909ab560e21b148061068d575061068d82612250565b6000806107058361131c565b90506001600160a01b03811661071e5750600092915050565b6000838152600360205260409020546001600160a01b03165b9392505050565b600061074982610693565b50915050603f1960408216016107755760405163a2a7201360e01b81526004810183905260240161064e565b61077f83836122a0565b505050565b6000806107cb600088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506123b09050565b50905060006107da8183612467565b60008181526007602052604090209091506107f6888a83613faa565b506040516302571be360e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190614063565b90506001600160a01b038116331480159061092b575060405163e985e9c560e01b81526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190614080565b155b1561094d578133604051636f2ff52760e01b815260040161064e92919061409d565b604051635b0fc9c360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b0fc9c39061099b908590309060040161409d565b600060405180830381600087803b1580156109b557600080fd5b505af11580156109c9573d6000803e3d6000fd5b50505050610a12828a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91508a9050612493565b50979650505050505050565b6005546040516303a24d0760e21b8152600481018390526060916001600160a01b031690630e89341c90602401600060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068d91908101906140b4565b81610a9b813361111c565b610abc578033604051636f2ff52760e01b815260040161064e92919061409d565b8260106000610aca83610693565b5091505063ffffffff8282161615610af85760405163a2a7201360e01b81526004810184905260240161064e565b604051630295720760e31b8152600481018790526001600160401b03861660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906314ab9038906044015b600060405180830381600087803b158015610b6a57600080fd5b505af1158015610b7e573d6000803e3d6000fd5b50505050505050505050565b610b926124e4565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b81610bbf813361111c565b610be0578033604051636f2ff52760e01b815260040161064e92919061409d565b8260086000610bee83610693565b5091505063ffffffff8282161615610c1c5760405163a2a7201360e01b81526004810184905260240161064e565b604051630c4b7b8560e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90610b50908990899060040161409d565b60076020526000908152604090208054610c8390613f15565b80601f0160208091040260200160405190810160405280929190818152602001828054610caf90613f15565b8015610cfc5780601f10610cd157610100808354040283529160200191610cfc565b820191906000526020600020905b815481529060010190602001808311610cdf57829003601f168201915b505050505081565b8151835114610d665760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b606482015260840161064e565b6001600160a01b038416610d8c5760405162461bcd60e51b815260040161064e9061412b565b6001600160a01b038516331480610da85750610da88533611e70565b610e0f5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606482015260840161064e565b60005b8351811015610ed5576000848281518110610e2f57610e2f614170565b602002602001015190506000848381518110610e4d57610e4d614170565b602002602001015190506000806000610e6585610693565b925092509250610e7685838361253e565b836001148015610e9757508a6001600160a01b0316836001600160a01b0316145b610eb35760405162461bcd60e51b815260040161064e90614186565b610ebf858b84846125e7565b505050505080610ece906141e6565b9050610e12565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610f259291906141ff565b60405180910390a4610f3b338686868686612629565b5050505050565b6000610f4e8585612467565b9050610f5a818461278e565b60008080610f6784610693565b9194509250905060008080610f7b8b610693565b919450925090506000610f8d8861131c565b6001600160a01b031603610fb457604051635374b59960e01b815260040160405180910390fd5b8a610feb57610fc5338787876127c0565b610fe6578633604051636f2ff52760e01b815260040161064e92919061409d565b611018565b610ff7338484846127c0565b611018578a33604051636f2ff52760e01b815260040161064e92919061409d565b611023888583612803565b975063ffffffff89161580159061103e575062010000851615155b1561105f5760405163a2a7201360e01b81526004810188905260240161064e565b9784179761107087878b878c612849565b5050505050505050505050565b60008261108a813361111c565b6110ab578033604051636f2ff52760e01b815260040161064e92919061409d565b83600260006110b983610693565b5091505063ffffffff82821616156110e75760405163a2a7201360e01b81526004810184905260240161064e565b600080806110f48a610693565b92509250925061110d8a84848c61ffff16178485612849565b509550505b5050505092915050565b600080808061112a86610693565b925092509250846001600160a01b0316836001600160a01b0316148061115557506111558386611e70565b8015611168575061116682826128e5565b155b9695505050505050565b606081518351146111d75760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161064e565b600083516001600160401b038111156111f2576111f2613770565b60405190808252806020026020018201604052801561121b578160200160208202803683370190505b50905060005b84518110156112935761126685828151811061123f5761123f614170565b602002602001015185838151811061125957611259614170565b60200260200101516105e6565b82828151811061127857611278614170565b602090810291909101015261128c816141e6565b9050611221565b509392505050565b6112a36124e4565b60405163a9059cbb60e01b81526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af11580156112f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113169190614080565b50505050565b600061068d82612915565b6000806113348585612467565b905060006113418261131c565b6001600160a01b03160361136857604051635374b59960e01b815260040160405180910390fd5b6000808061137584610693565b91945092509050600080806113898b610693565b92509250925061139b338484846127c0565b1580156113d557506113ac8b6106f9565b6001600160a01b0316336001600160a01b03161480156113d357506113d182826128e5565b155b155b80156113fa57506113e8338787876127c0565b80156113f8575062020000851615155b155b8015611420575061140a876106f9565b6001600160a01b0316336001600160a01b031614155b15611442578633604051636f2ff52760e01b815260040161064e92919061409d565b600061144d8c610693565b9250505061145c8a8683612803565b995061146a8888888d61292b565b6040516001600160401b038b16815288907ff675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b1329060200160405180910390a250979a9950505050505050505050565b6114c06124e4565b6114ca6000612941565b565b6001600160a01b03821633036115365760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161064e565b3360008181526002602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000806115ae84610693565b50841663ffffffff908116908516149250505092915050565b6000886115d4813361111c565b6115f5578033604051636f2ff52760e01b815260040161064e92919061409d565b885160208a01206116068b82612467565b92506116106134b6565b8a81526001600160a01b038a16602082015261162b84610693565b6001600160401b0316608084015263ffffffff1660608301526001600160a01b0316604082015261165b8c610693565b6001600160401b031660e084015263ffffffff1660c083018190526001600160a01b0390911660a08301526040820151606083015160808401516116a3939288929091612991565b6116b68582608001518360e00151612803565b94506116c2848761278e565b60006116cf8d868e612aa2565b905060006116dc8661131c565b6001600160a01b031603611782577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ef2c7f08e85308d8d6040518663ffffffff1660e01b815260040161173e959493929190614224565b600060405180830381600087803b15801561175857600080fd5b505af115801561176c573d6000803e3d6000fd5b5050505061177d85828d8a8a612493565b61182d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635ef2c7f08e85308d8d6040518663ffffffff1660e01b81526004016117d6959493929190614224565b600060405180830381600087803b1580156117f057600080fd5b505af1158015611804573d6000803e3d6000fd5b5050505061182d8d86846040015185606001518660800151876000015188602001518e8e612c2d565b6001600160a01b038a1615611846576118468a86612c84565b5050505098975050505050505050565b61185e6124e4565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526004602052604081205460ff166118af5760405162461bcd60e51b815260040161064e90614259565b60006118c96000805160206146db83398151915285612467565b905060006118d68261131c565b6001600160a01b0316036118fd57604051635374b59960e01b815260040160405180910390fd5b6000808061190a84610693565b91945092509050611924866001600160401b0383166142a1565b94506111128484848861292b565b6000611978600086868080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509293925050612cf29050565b90506000808061198784610693565b60065492955090935091506001600160a01b03166119b85760405163093075b560e21b815260040160405180910390fd5b6119c4338484846127c0565b6119e5578333604051636f2ff52760e01b815260040161064e92919061409d565b60006119f0856106f9565b600654604051635b0fc9c360e01b81529192506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692635b0fc9c392611a46928a9291169060040161409d565b600060405180830381600087803b158015611a6057600080fd5b505af1158015611a74573d6000803e3d6000fd5b50505050611a848560001c612db1565b600660009054906101000a90046001600160a01b03166001600160a01b0316639198c2768a8a878787878e8e6040518963ffffffff1660e01b8152600401611ad39897969594939291906142dd565b600060405180830381600087803b158015611aed57600080fd5b505af1158015611b01573d6000803e3d6000fd5b50505050505050505050505050565b83611b1b813361111c565b611b3c578033604051636f2ff52760e01b815260040161064e92919061409d565b84601c6000611b4a83610693565b5091505063ffffffff8282161615611b785760405163a2a7201360e01b81526004810184905260240161064e565b60405163cf40882360e01b8152600481018990523060248201526001600160a01b0387811660448301526001600160401b03871660648301527f0000000000000000000000000000000000000000000000000000000000000000169063cf40882390608401600060405180830381600087803b158015611bf757600080fd5b505af1158015611c0b573d6000803e3d6000fd5b5050506001600160a01b0388169050611c2c57611c2788612e27565b611c5b565b6000611c378961131c565b9050611c5981898b60001c600160405180602001604052806000815250612f19565b505b5050505050505050565b3360009081526004602052604081205460ff16611c945760405162461bcd60e51b815260040161064e90614259565b60008888604051611ca6929190614345565b60405190819003902090506000611ccb6000805160206146db83398151915283612467565b90506000611cd88261131c565b6001600160a01b031614611d025760405163a2a7201360e01b81526004810182905260240161064e565b6040516305ef2c7f60e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f090611d65906000805160206146db83398151915290869030906000908190600401614224565b600060405180830381600087803b158015611d7f57600080fd5b505af1158015611d93573d6000803e3d6000fd5b505050506276a7008642611da79190614355565b611db19190614355565b9250611dfc8a8a8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508b91505061ffff8816878a612fe9565b5050979650505050505050565b611e116124e4565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b6001600160a01b038416611ec45760405162461bcd60e51b815260040161064e9061412b565b6001600160a01b038516331480611ee05750611ee08533611e70565b611f3e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b606482015260840161064e565b610f3b8585858585612f19565b611f536124e4565b6001600160a01b038116611fb85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161064e565b611fc181612941565b50565b600087611fd1813361111c565b611ff2578033604051636f2ff52760e01b815260040161064e92919061409d565b60008888604051612004929190614345565b604051809103902090506120188a82612467565b92506120226134b6565b89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506001600160a01b038816602082015261207384610693565b6001600160401b0316608084015263ffffffff1660608301526001600160a01b031660408201526120a38b610693565b6001600160401b031660e084015263ffffffff1660c083018190526040830151606084015160808501516120db945088929190612991565b6120ee8582608001518360e00151612803565b94506120fa848761278e565b600061213d8c868d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612aa292505050565b9050600061214a8661131c565b6001600160a01b031603612203576040516306ab592360e01b8152600481018d9052602481018490523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906306ab5923906064016020604051808303816000875af11580156121cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f0919061437c565b506121fe85828b8a8a612493565b612228565b6122288c86846040015185606001518660800151876000015188602001518e8e612c2d565b6001600160a01b03881615612241576122418886612c84565b50505050979650505050505050565b60006001600160e01b03198216636cdb3d1360e11b148061228157506001600160e01b031982166303a24d0760e21b145b8061068d57506301ffc9a760e01b6001600160e01b031983161461068d565b60006122ab8261131c565b9050806001600160a01b0316836001600160a01b0316036123185760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161064e565b336001600160a01b038216148061233457506123348133611e70565b6123a65760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161064e565b61077f8383612c84565b600080835183106124035760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e64730000604482015260640161064e565b600084848151811061241757612417614170565b016020015160f81c905080156124435761243c856124368660016142a1565b836130d7565b9250612448565b600092505b61245281856142a1565b61245d9060016142a1565b9150509250929050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b61249f858484846130fb565b847f8ce7013e8abebc55c3890a68f5a27c67c3f7efa64e584de5fb22363c606fd340858585856040516124d59493929190614395565b60405180910390a25050505050565b6000546001600160a01b031633146114ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161064e565b6203ffff196204000083160161255e5761255b6276a700826143dc565b90505b42816001600160401b0316101561259757620100008216156125925760405162461bcd60e51b815260040161064e90614186565b6125bc565b60048216156125bc5760405163a2a7201360e01b81526004810184905260240161064e565b6040821660000361077f575050600090815260036020526040902080546001600160a01b0319169055565b60c0816001600160401b0316901b60a08363ffffffff16901b846001600160a01b03161717600160008681526020019081526020016000208190555050505050565b6001600160a01b0384163b156127865760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061266d90899089908890889088906004016143fc565b6020604051808303816000875af19250505080156126a8575060408051601f3d908101601f191682019092526126a59181019061445a565b60015b612754576126b4614477565b806308c379a0036126ed57506126c8614493565b806126d357506126ef565b8060405162461bcd60e51b815260040161064e91906136e4565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161064e565b6001600160e01b0319811663bc197c8160e01b146127845760405162461bcd60e51b815260040161064e9061451c565b505b505050505050565b6203007f81811763ffffffff16146127bc5760405163a2a7201360e01b81526004810183905260240161064e565b5050565b6000846001600160a01b0316846001600160a01b031614806127e757506127e78486611e70565b80156127fa57506127f883836128e5565b155b95945050505050565b6000816001600160401b0316846001600160401b03161115612823578193505b826001600160401b0316846001600160401b03161015612841578293505b509192915050565b6128558585858461292b565b60405163ffffffff8416815285907f39873f00c80f4f94b7bd1594aebcf650f003545b74824d57ddf4939e3ff3a34b9060200160405180910390a2816001600160401b0316816001600160401b03161115610f3b576040516001600160401b038216815285907ff675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b132906020016124d5565b6000620400008381161480156107375750426129046276a700846143dc565b6001600160401b0316109392505050565b60008061292183610693565b5090949350505050565b6129358483613172565b611316848484846125e7565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b42816001600160401b0316108015612a4c57506001600160a01b0383161580612a4c57506040516302571be360e01b8152600481018590526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015612a1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a419190614063565b6001600160a01b0316145b15612a7b576020851615612a765760405163a2a7201360e01b81526004810185905260240161064e565b610f3b565b62010000821615610f3b5760405163a2a7201360e01b81526004810185905260240161064e565b6000828152600760205260409020805460609190612abf90613f15565b9050600003612b8d5760008481526007602052604081208054612b6a918591612ae790613f15565b80601f0160208091040260200160405190810160405280929190818152602001828054612b1390613f15565b8015612b605780601f10612b3557610100808354040283529160200191612b60565b820191906000526020600020905b815481529060010190602001808311612b4357829003601f168201915b50505050506131ad565b6000858152600760205260409020909150612b858282614564565b509050610737565b60008381526007602052604090208054612ba690613f15565b80601f0160208091040260200160405190810160405280929190818152602001828054612bd290613f15565b8015612c1f5780601f10612bf457610100808354040283529160200191612c1f565b820191906000526020600020905b815481529060010190602001808311612c0257829003601f168201915b505050505090509392505050565b612c38898986612aa2565b50612c4888888489178885612849565b6001600160a01b038316612c6457612c5f88612e27565b611c59565b611c5987848a60001c600160405180602001604052806000815250612f19565b600081815260036020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612cb98261131c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806000612d0185856123b0565b909250905081612d735760018551612d19919061461d565b8414612d675760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d65000000604482015260640161064e565b506000915061068d9050565b612d7d8582612cf2565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b6000818152600160209081526040808320546003909252822080546001600160a01b03191690559060c082901c612dea848380846125e7565b60408051858152600160208201526000916001600160a01b0386169133916000805160206146bb833981519152910160405180910390a450505050565b612e328160016115a2565b15612e535760405163a2a7201360e01b81526004810182905260240161064e565b612e5c81612db1565b604051635b0fc9c360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635b0fc9c390612eab90849060009060040161409d565b600060405180830381600087803b158015612ec557600080fd5b505af1158015612ed9573d6000803e3d6000fd5b50505050807fee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c46000604051612f0e9190613597565b60405180910390a250565b6000806000612f2786610693565b925092509250612f3886838361253e565b846001148015612f595750876001600160a01b0316836001600160a01b0316145b612f755760405162461bcd60e51b815260040161064e90614186565b866001600160a01b0316836001600160a01b031603612f9657505050610f3b565b612fa2868884846125e7565b60408051878152602081018790526001600160a01b03808a1692908b169133916000805160206146bb833981519152910160405180910390a4611c5b338989898989613224565b85516020870120600061300a6000805160206146db83398151915283612467565b9050600061303389604051806040016040528060058152602001626cae8d60e31b8152506131ad565b600083815260076020526040902090915061304e8282614564565b5061306182828a620500018a1789612493565b6001600160a01b0387161561307a5761307a8783612c84565b6001600160a01b03841615611c5957604051630c4b7b8560e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90611ad3908590889060040161409d565b82516000906130e683856142a1565b11156130f157600080fd5b5091016020012090565b6131058483613172565b6000848152600160205260409020546001600160a01b038116156131665761312c85612db1565b847fee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c4600060405161315d9190613597565b60405180910390a25b610f3b858585856132df565b63ffffffff81161580159061318c57506201000081811614155b156127bc5760405163a2a7201360e01b81526004810183905260240161064e565b60606001835110156131d257604051631406d65b60e11b815260040160405180910390fd5b60ff835111156131f7578260405163e3ba295f60e01b815260040161064e91906136e4565b8251838360405160200161320d93929190614630565b604051602081830303815290604052905092915050565b6001600160a01b0384163b156127865760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906132689089908990889088908890600401614675565b6020604051808303816000875af19250505080156132a3575060408051601f3d908101601f191682019092526132a09181019061445a565b60015b6132af576126b4614477565b6001600160e01b0319811663f23a6e6160e01b146127845760405162461bcd60e51b815260040161064e9061451c565b83600080806132ed84610693565b9194509250905063ffff000082166001600160401b038087169083161115613313578195505b42826001600160401b03161061332857958617955b6001600160a01b0384161561337f5760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e00604482015260640161064e565b6001600160a01b0388166133df5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161064e565b306001600160a01b038916036134545760405162461bcd60e51b815260206004820152603460248201527f455243313135353a206e65774f776e65722063616e6e6f74206265207468652060448201527313985b5955dc985c1c195c8818dbdb9d1c9858dd60621b606482015260840161064e565b613460858989896125e7565b60408051868152600160208201526001600160a01b038a169160009133916000805160206146bb833981519152910160405180910390a4611c593360008a88600160405180602001604052806000815250613224565b6040805161010081018252606080825260006020830181905292820183905281018290526080810182905260a0810182905260c0810182905260e081019190915290565b6001600160a01b0381168114611fc157600080fd5b803561351a816134fa565b919050565b6000806040838503121561353257600080fd5b823561353d816134fa565b946020939093013593505050565b60006020828403121561355d57600080fd5b5035919050565b6001600160e01b031981168114611fc157600080fd5b60006020828403121561358c57600080fd5b813561073781613564565b6001600160a01b0391909116815260200190565b60008083601f8401126135bd57600080fd5b5081356001600160401b038111156135d457600080fd5b6020830191508360208285010111156135ec57600080fd5b9250929050565b803563ffffffff8116811461351a57600080fd5b80356001600160401b038116811461351a57600080fd5b60008060008060006080868803121561363657600080fd5b85356001600160401b0381111561364c57600080fd5b613658888289016135ab565b909650945050602086013561366c816134fa565b925061367a604087016135f3565b915061368860608701613607565b90509295509295909350565b60005b838110156136af578181015183820152602001613697565b50506000910152565b600081518084526136d0816020860160208601613694565b601f01601f19169290920160200192915050565b60208152600061073760208301846136b8565b6000806040838503121561370a57600080fd5b8235915061371a60208401613607565b90509250929050565b60006020828403121561373557600080fd5b8135610737816134fa565b6000806040838503121561375357600080fd5b823591506020830135613765816134fa565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b03811182821017156137ab576137ab613770565b6040525050565b60006001600160401b038211156137cb576137cb613770565b5060051b60200190565b600082601f8301126137e657600080fd5b813560206137f3826137b2565b6040516138008282613786565b83815260059390931b850182019282810191508684111561382057600080fd5b8286015b8481101561383b5780358352918301918301613824565b509695505050505050565b60006001600160401b0382111561385f5761385f613770565b50601f01601f191660200190565b600061387883613846565b6040516138858282613786565b80925084815285858501111561389a57600080fd5b8484602083013760006020868301015250509392505050565b600082601f8301126138c457600080fd5b6107378383356020850161386d565b600080600080600060a086880312156138eb57600080fd5b85356138f6816134fa565b94506020860135613906816134fa565b935060408601356001600160401b038082111561392257600080fd5b61392e89838a016137d5565b9450606088013591508082111561394457600080fd5b61395089838a016137d5565b9350608088013591508082111561396657600080fd5b50613973888289016138b3565b9150509295509295909350565b6000806000806080858703121561399657600080fd5b84359350602085013592506139ad604086016135f3565b91506139bb60608601613607565b905092959194509250565b803561ffff8116811461351a57600080fd5b600080604083850312156139eb57600080fd5b8235915061371a602084016139c6565b60008060408385031215613a0e57600080fd5b82356001600160401b0380821115613a2557600080fd5b818501915085601f830112613a3957600080fd5b81356020613a46826137b2565b604051613a538282613786565b83815260059390931b8501820192828101915089841115613a7357600080fd5b948201945b83861015613a9a578535613a8b816134fa565b82529482019490820190613a78565b96505086013592505080821115613ab057600080fd5b5061245d858286016137d5565b600081518084526020808501945080840160005b83811015613aed57815187529582019590820190600101613ad1565b509495945050505050565b6020815260006107376020830184613abd565b600080600060608486031215613b2057600080fd5b8335613b2b816134fa565b92506020840135613b3b816134fa565b929592945050506040919091013590565b600080600060608486031215613b6157600080fd5b8335925060208401359150613b7860408501613607565b90509250925092565b8015158114611fc157600080fd5b60008060408385031215613ba257600080fd5b8235613bad816134fa565b9150602083013561376581613b81565b60008060408385031215613bd057600080fd5b8235915061371a602084016135f3565b600080600080600080600080610100898b031215613bfd57600080fd5b8835975060208901356001600160401b03811115613c1a57600080fd5b8901601f81018b13613c2b57600080fd5b613c3a8b82356020840161386d565b9750506040890135613c4b816134fa565b95506060890135613c5b816134fa565b9450613c6960808a0161350f565b9350613c7760a08a01613607565b9250613c8560c08a016135f3565b9150613c9360e08a01613607565b90509295985092959890939650565b60008060408385031215613cb557600080fd5b50508035926020909101359150565b60008060008060408587031215613cda57600080fd5b84356001600160401b0380821115613cf157600080fd5b613cfd888389016135ab565b90965094506020870135915080821115613d1657600080fd5b50613d23878288016135ab565b95989497509550505050565b60008060008060808587031215613d4557600080fd5b843593506020850135613d57816134fa565b925060408501356139ad816134fa565b600080600080600080600060c0888a031215613d8257600080fd5b87356001600160401b03811115613d9857600080fd5b613da48a828b016135ab565b9098509650506020880135613db8816134fa565b94506040880135613dc8816134fa565b9350606088013592506080880135613ddf816134fa565b9150613ded60a089016139c6565b905092959891949750929550565b60008060408385031215613e0e57600080fd5b8235613e19816134fa565b91506020830135613765816134fa565b600080600080600060a08688031215613e4157600080fd5b8535613e4c816134fa565b94506020860135613e5c816134fa565b9350604086013592506060860135915060808601356001600160401b03811115613e8557600080fd5b613973888289016138b3565b600080600080600080600060c0888a031215613eac57600080fd5b8735965060208801356001600160401b03811115613ec957600080fd5b613ed58a828b016135ab565b9097509550506040880135613ee9816134fa565b93506060880135613ef9816134fa565b9250613f07608089016135f3565b9150613ded60a08901613607565b600181811c90821680613f2957607f821691505b602082108103613f4957634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561077f57600081815260208120601f850160051c81016020861015613f765750805b601f850160051c820191505b8181101561278657828155600101613f82565b600019600383901b1c191660019190911b1790565b6001600160401b03831115613fc157613fc1613770565b613fd583613fcf8354613f15565b83613f4f565b6000601f8411600181146140035760008515613ff15750838201355b613ffb8682613f95565b845550610f3b565b600083815260209020601f19861690835b828110156140345786850135825560209485019460019092019101614014565b50868210156140515760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60006020828403121561407557600080fd5b8151610737816134fa565b60006020828403121561409257600080fd5b815161073781613b81565b9182526001600160a01b0316602082015260400190565b6000602082840312156140c657600080fd5b81516001600160401b038111156140dc57600080fd5b8201601f810184136140ed57600080fd5b80516140f881613846565b6040516141058282613786565b82815286602084860101111561411a57600080fd5b611168836020830160208701613694565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600182016141f8576141f86141d0565b5060010190565b6040815260006142126040830185613abd565b82810360208401526127fa8185613abd565b94855260208501939093526001600160a01b0391821660408501521660608301526001600160401b0316608082015260a00190565b60208082526028908201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604082015267373a3937b63632b960c11b606082015260800190565b8082018082111561068d5761068d6141d0565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c0815260006142f160c083018a8c6142b4565b6001600160a01b03898116602085015263ffffffff891660408501526001600160401b03881660608501528616608084015282810360a08401526143368185876142b4565b9b9a5050505050505050505050565b8183823760009101908152919050565b6001600160401b03818116838216019080821115614375576143756141d0565b5092915050565b60006020828403121561438e57600080fd5b5051919050565b6080815260006143a860808301876136b8565b6001600160a01b039590951660208301525063ffffffff9290921660408301526001600160401b0316606090910152919050565b6001600160401b03828116828216039080821115614375576143756141d0565b6001600160a01b0386811682528516602082015260a06040820181905260009061442890830186613abd565b828103606084015261443a8186613abd565b9050828103608084015261444e81856136b8565b98975050505050505050565b60006020828403121561446c57600080fd5b815161073781613564565b600060033d11156144905760046000803e5060005160e01c5b90565b600060443d10156144a15790565b6040516003193d81016004833e81513d6001600160401b0381602484011181841117156144d057505050505090565b82850191508151818111156144e85750505050505090565b843d87010160208285010111156145025750505050505090565b61451160208286010187613786565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b81516001600160401b0381111561457d5761457d613770565b6145918161458b8454613f15565b84613f4f565b602080601f8311600181146145c057600084156145ae5750858301515b6145b88582613f95565b865550612786565b600085815260208120601f198616915b828110156145ef578886015182559484019460019091019084016145d0565b508582101561460d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8181038181111561068d5761068d6141d0565b60ff60f81b8460f81b16815260008351614651816001850160208801613694565b835190830190614668816001840160208801613694565b0160010195945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906146af908301846136b8565b97965050505050505056fec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6293cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4aea26469706673582212201248839ec49a9e0b9678944c9bf420ae177fa2cf4536d39d71119e621d1ce75064736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "allFusesBurned(bytes32,uint32)": {
        "params": {
          "fuseMask": "The fuses you want to check",
          "node": "Namehash of the name"
        },
        "returns": {
          "_0": "Boolean of whether or not all the selected fuses are burned"
        }
      },
      "approve(address,uint256)": {
        "details": "Approved addresses are restricted to being able to renew the name or subnames of the name.      This is particularly useful for creating renewal controllers, contracts tasked with renewing      names for example for a fee.",
        "params": {
          "to": "address to approve",
          "tokenId": "name to approve"
        }
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "canModifyName(bytes32,address)": {
        "params": {
          "addr": "The address to check for permissions.",
          "node": "The namehash of the name to check."
        },
        "returns": {
          "_0": "Whether or not the address is the owner or an operator of the name."
        }
      },
      "extendExpiry(bytes32,bytes32,uint64)": {
        "params": {
          "expiry": "The time when the name will expire in seconds since the Unix epoch.",
          "labelhash": "The labelhash of the name, e.g. vitalik.xyz would be keccak256('vitalik').",
          "parentNode": "The parent namehash of the name, e.g. vitalik.xyz would be namehash('xyz')."
        },
        "returns": {
          "_0": "The new expiry."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "Namehash of the name"
        },
        "returns": {
          "operator": "Approved operator of a name"
        }
      },
      "getData(uint256)": {
        "details": "If the name is expired, the fuses are set to 0. If the name is emancipated and       expired, both the fuses and the owner are set to 0.",
        "params": {
          "id": "Namehash of the name"
        },
        "returns": {
          "expiry": "The expiry of the name. ",
          "fuses": "The fuses of the name.",
          "owner": "The owner of the name."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "Label as a string of the .eth domain to wrap"
        },
        "returns": {
          "owner": "The owner of the name"
        }
      },
      "recoverFunds(address,address,uint256)": {
        "details": "The contract is Ownable and only the owner can call the recover function.",
        "params": {
          "_amount": "The amount of tokens to recover.",
          "_to": "The address to send the tokens to.",
          "_token": "The address of the ERC20 token to recover"
        }
      },
      "registerAndWrapEth2LD(string,address,address,uint256,address,uint16)": {
        "details": "Registers a new .eth second-level domain and wraps it.      Only callable by authorized controllers.",
        "params": {
          "approved": "The address to approve for the name.",
          "duration": "The duration, in seconds, to register the name for.",
          "label": "The label to register (Eg, 'foo' for 'foo.eth').",
          "ownerControlledFuses": "Initial owner-controlled fuses to set",
          "resolver": "The resolver address to set on the ENS registry (optional).",
          "wrappedOwner": "The owner of the wrapped name."
        },
        "returns": {
          "expiry": "The expiry date of the new name, in seconds since the Unix epoch."
        }
      },
      "renewEth2LD(bytes32,uint256)": {
        "details": "Only callable by authorized controllers.",
        "params": {
          "duration": "The number of seconds to renew the name for.",
          "labelhash": "The hash of the label to register (eg, `keccak256('foo')`, for 'foo.eth')."
        },
        "returns": {
          "expiry": "The expiry date of the name, in seconds since the Unix epoch."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setChildFuses(bytes32,bytes32,uint32,uint64)": {
        "params": {
          "expiry": "When the name will expire in seconds since the Unix epoch",
          "fuses": "Fuses to burn",
          "labelhash": "Labelhash of the name, e.g. vitalik.xyz would be keccak256('vitalik')",
          "parentNode": "Parent namehash of the name e.g. vitalik.xyz would be namehash('xyz')"
        }
      },
      "setFuses(bytes32,uint16)": {
        "params": {
          "node": "Namehash of the name",
          "ownerControlledFuses": "Owner-controlled fuses to burn"
        },
        "returns": {
          "_0": "Old fuses"
        }
      },
      "setMetadataService(address)": {
        "params": {
          "_metadataService": "The new metadata service"
        }
      },
      "setRecord(bytes32,address,address,uint64)": {
        "params": {
          "node": "Namehash of the name to set a record for",
          "owner": "New owner in the registry",
          "resolver": "Resolver contract",
          "ttl": "Time to live in the registry"
        }
      },
      "setResolver(bytes32,address)": {
        "params": {
          "node": "namehash of the name",
          "resolver": "the resolver contract"
        }
      },
      "setSubnodeOwner(bytes32,string,address,address,uint32,uint64)": {
        "params": {
          "approved": "Address to approve for the name",
          "expiry": "When the name will expire in seconds since the Unix epoch",
          "fuses": "Initial fuses for the wrapped subdomain",
          "label": "Label of the subdomain as a string",
          "owner": "New owner in the wrapper",
          "parentNode": "Parent namehash of the subdomain"
        },
        "returns": {
          "node": "Namehash of the subdomain"
        }
      },
      "setSubnodeRecord(bytes32,string,address,address,address,uint64,uint32,uint64)": {
        "params": {
          "approved": "address to approve for the name",
          "expiry": "When the name will expire in seconds since the Unix epoch",
          "fuses": "initial fuses for the wrapped subdomain",
          "label": "label of the subdomain as a string",
          "owner": "new owner in the wrapper",
          "parentNode": "parent namehash of the subdomain",
          "resolver": "resolver contract in the registry",
          "ttl": "ttl in the registry"
        },
        "returns": {
          "node": "Namehash of the subdomain"
        }
      },
      "setTTL(bytes32,uint64)": {
        "params": {
          "node": "Namehash of the name",
          "ttl": "TTL in the registry"
        }
      },
      "setUpgradeContract(address)": {
        "details": "The default value of upgradeContract is the 0 address. Use the 0 address at any time to make the contract not upgradable.",
        "params": {
          "_upgradeAddress": "address of an upgraded contract"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface id of the name."
        },
        "returns": {
          "_0": "The interface id. "
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgrade(bytes,bytes)": {
        "details": "Can be called by the owner or an authorized caller",
        "params": {
          "extraData": "Extra data to pass to the upgrade contract",
          "name": "The name to upgrade, in DNS format"
        }
      },
      "uri(uint256)": {
        "params": {
          "tokenId": "The id of the token."
        },
        "returns": {
          "_0": "string The uri of the metadata service."
        }
      },
      "wrapTLD(bytes,address,uint32,uint64)": {
        "details": "Only callable by authorized controllers.",
        "params": {
          "expiry": "The expiry date of the name, in seconds since the Unix epoch.",
          "fuses": "Initial fuses to set on the name.",
          "name": "The name of the TLD, e.g. vitalik.xyz would be \"xyz\".",
          "wrappedOwner": "The owner of the name."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allFusesBurned(bytes32,uint32)": {
        "notice": "Checks all Fuses in the mask are burned for the node"
      },
      "approve(address,uint256)": {
        "notice": "Approves an address for a name"
      },
      "canModifyName(bytes32,address)": {
        "notice": "Checks if the address is the owner or operator of the name."
      },
      "extendExpiry(bytes32,bytes32,uint64)": {
        "notice": "A function to extend the expiry of a name."
      },
      "getApproved(uint256)": {
        "notice": "Gets the owner of a name"
      },
      "getData(uint256)": {
        "notice": "Gets the data for a name"
      },
      "names(bytes32)": {
        "notice": "In the ENS registry only the namehash of each name is stored and not the actual name. To make it easier to retrieve the human readable name, saved in bytes using the DNS format, we store it here. "
      },
      "ownerOf(uint256)": {
        "notice": "Gets the owner of a name"
      },
      "recoverFunds(address,address,uint256)": {
        "notice": "Recover ERC20 tokens sent to the contract by mistake."
      },
      "renewEth2LD(bytes32,uint256)": {
        "notice": "Renews a .eth second-level domain."
      },
      "setChildFuses(bytes32,bytes32,uint32,uint64)": {
        "notice": "Sets fuses of a name that you own the parent of"
      },
      "setFuses(bytes32,uint16)": {
        "notice": "Sets fuses of a name"
      },
      "setMetadataService(address)": {
        "notice": "Set the metadata service. Only the owner can do this"
      },
      "setRecord(bytes32,address,address,uint64)": {
        "notice": "Sets records for the name in the ENS Registry"
      },
      "setResolver(bytes32,address)": {
        "notice": "Sets resolver contract in the registry"
      },
      "setSubnodeOwner(bytes32,string,address,address,uint32,uint64)": {
        "notice": "Sets the subdomain owner in the registry and then wraps the subdomain"
      },
      "setSubnodeRecord(bytes32,string,address,address,address,uint64,uint32,uint64)": {
        "notice": "Sets the subdomain owner in the registry with records and then wraps the subdomain"
      },
      "setTTL(bytes32,uint64)": {
        "notice": "Sets TTL in the registry"
      },
      "setUpgradeContract(address)": {
        "notice": "Set the address of the upgradeContract of the contract. only admin can do this"
      },
      "supportsInterface(bytes4)": {
        "notice": "Provides support for ERC-165, allowing checking for interfaces. "
      },
      "upgrade(bytes,bytes)": {
        "notice": "Upgrades a domain of any kind. Could be a .eth name vitalik.eth,          a DNSSEC name vitalik.xyz, or a subdomain."
      },
      "uri(uint256)": {
        "notice": "Get the metadata uri."
      },
      "wrapTLD(bytes,address,uint32,uint64)": {
        "notice": "Wrap a new TLD, e.g. .xyz "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20134,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11070,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "_tokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11076,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11080,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11001,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "controllers",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1914,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "metadataService",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IMetadataService)12044"
      },
      {
        "astId": 1917,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "upgradeContract",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(INameWrapperUpgrade)12062"
      },
      {
        "astId": 1922,
        "contract": "contracts/layertwo/optimism/wrapper/L2NameWrapper.sol:L2NameWrapper",
        "label": "names",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bytes_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IMetadataService)12044": {
        "encoding": "inplace",
        "label": "contract IMetadataService",
        "numberOfBytes": "20"
      },
      "t_contract(INameWrapperUpgrade)12062": {
        "encoding": "inplace",
        "label": "contract INameWrapperUpgrade",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_bytes32,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}